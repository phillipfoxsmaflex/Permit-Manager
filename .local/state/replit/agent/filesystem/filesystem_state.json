{"file_contents":{"DEPLOYMENT.md":{"content":"# Biggs Permit Management System - Docker Deployment Guide\n\n## Prerequisites\n\n- Docker Engine 20.10+\n- Docker Compose 2.0+\n- At least 4GB RAM available\n- Port 3000 available for the application\n\n**Note:** The Docker Compose files use the modern format without version specification, which is the recommended approach for Docker Compose v2.0+.\n\n## Quick Start\n\n1. **Clone the repository:**\n   ```bash\n   git clone <repository-url>\n   cd biggs-permit-management\n   ```\n\n2. **Build and start the application:**\n   ```bash\n   docker-compose up -d --build\n   ```\n\n3. **Access the application:**\n   - Web interface: http://localhost:3000\n   - Health check: http://localhost:3000/api/health\n\n**Note:** Use `--build` flag to ensure the latest changes are included in the Docker image.\n\n## Default Credentials\n\n- **Username:** admin\n- **Password:** password123\n\n**Additional Users:**\n- safety.officer / password123 (Safety Officer)\n- hans.mueller / password123 (Supervisor)\n- ops.manager / password123 (Operations Manager)\n- employee / password123 (Employee)\n\n## Configuration\n\n### Environment Variables\n\nThe following environment variables are configured in `docker-compose.yml`:\n\n- `DATABASE_URL`: PostgreSQL connection string\n- `NODE_ENV`: Set to `production`\n- `PGHOST`, `PGPORT`, `PGUSER`, `PGPASSWORD`, `PGDATABASE`: Database connection details\n\n### Database\n\n- **Database:** PostgreSQL 15\n- **Default credentials:** postgres/postgres\n- **Port:** 5432 (internal), mapped to host port 5432\n- **Volume:** `postgres_data` for data persistence\n\n### File Storage\n\n- **Uploads:** Mounted volume `./uploads` for file attachments\n- **Permissions:** Ensure the uploads directory is writable\n\n## Commands\n\n### Start the application\n```bash\ndocker-compose up -d\n```\n\n### Stop the application\n```bash\ndocker-compose down\n```\n\n### View logs\n```bash\ndocker-compose logs -f app\n```\n\n### Update the application\n```bash\ndocker-compose down\ndocker-compose pull\ndocker-compose up -d\n```\n\n### Reset database (⚠️ This will delete all data)\n```bash\ndocker-compose down -v\ndocker-compose up -d\n```\n\n## Troubleshooting\n\n### Check container status\n```bash\ndocker-compose ps\n```\n\n### Check application logs\n```bash\ndocker-compose logs app\n```\n\n### Check database logs\n```bash\ndocker-compose logs database\n```\n\n### Login Issues\n\nIf you cannot login with admin/password123, this may indicate the database setup needs manual intervention:\n\n1. **Check if admin user exists:**\n   ```bash\n   docker exec -it biggs-permit-db psql -U postgres -d biggs_permit -c \"SELECT username, full_name, role FROM users WHERE username = 'admin';\"\n   ```\n\n2. **Check application logs for more details:**\n   ```bash\n   docker logs biggs-permit-app\n   ```\n\n3. **If the user doesn't exist, restart the containers (this will trigger re-seeding):**\n   ```bash\n   docker-compose down\n   docker-compose up -d\n   ```\n\n4. **Manual user creation (if automatic seeding fails):**\n   ```bash\n   docker exec -it biggs-permit-db psql -U postgres -d biggs_permit -c \"\n   INSERT INTO users (username, password, full_name, department, role) \n   VALUES ('admin', 'password123', 'System Administrator', 'IT', 'admin')\n   ON CONFLICT (username) DO UPDATE SET password = 'password123', role = 'admin';\n   \"\n   ```\n\n5. **Entrypoint script not found error:**\n   ```bash\n   # This is fixed in the latest version\n   # Make sure you're using the updated Dockerfile\n   docker-compose down\n   docker-compose up -d --build\n   ```\n\n**Note:** The system now uses bcrypt password hashing for security. Legacy plain-text passwords are automatically detected and handled during login.\n\n### Rebuild after code changes\n```bash\ndocker-compose down\ndocker-compose build --no-cache\ndocker-compose up -d\n```\n\n## Production Deployment\n\nFor production deployment, consider:\n\n1. **Security:**\n   - Change default database credentials\n   - Use environment variables for secrets\n   - Enable SSL/TLS termination\n\n2. **Performance:**\n   - Adjust memory limits in docker-compose.yml\n   - Configure proper logging levels\n   - Set up monitoring and health checks\n\n3. **Backup:**\n   - Regular database backups\n   - Backup the uploads directory\n   - Test restore procedures\n\n## Custom Configuration\n\n### Custom Database Configuration\n\nEdit `docker-compose.yml` to customize database settings:\n\n```yaml\ndatabase:\n  environment:\n    POSTGRES_DB: your_database_name\n    POSTGRES_USER: your_username\n    POSTGRES_PASSWORD: your_secure_password\n```\n\n### Custom Application Port\n\nChange the port mapping in `docker-compose.yml`:\n\n```yaml\napp:\n  ports:\n    - \"8080:5000\"  # Access via localhost:8080\n```\n\n## Support\n\nFor issues and questions:\n- Check the application logs for error messages\n- Verify Docker and Docker Compose versions\n- Ensure sufficient system resources are available","size_bytes":4778},"DOCKER_SETUP_FIXED.md":{"content":"# Docker Setup - Bereinigt und Funktionsfähig\n\n## Behobene Probleme:\n\n### 1. Docker-Compose-Konfiguration\n- **Problem**: `docker-compose.yml` verwies auf gelöschte `Dockerfile.simple`\n- **Lösung**: Referenz auf `Dockerfile` korrigiert\n\n### 2. Dockerfile-Konfiguration\n- **Problem**: Inline-Startup-Script statt `docker-entrypoint.sh`\n- **Lösung**: Korrekte Verwendung von `docker-entrypoint.sh`\n\n### 3. Build-Prozess\n- **Problem**: Komplexer Build-Prozess mit separaten Client-/Server-Builds\n- **Lösung**: Vereinfachte Installation mit tsx für Runtime\n\n### 4. Entrypoint-Script-Pfad\n- **Problem**: Relativer Pfad `./docker-entrypoint.sh` nicht gefunden\n- **Lösung**: Absoluter Pfad `/app/docker-entrypoint.sh` mit bash-Aufruf\n\n### 5. TSX-Verfügbarkeit\n- **Problem**: `tsx` nicht im Container-PATH verfügbar\n- **Lösung**: Direkter `node_modules/.bin/tsx` Pfad für zuverlässige Ausführung\n\n### 6. Dockerfile-Parsing-Error\n- **Problem**: Docker interpretierte falsches File als Dockerfile\n- **Lösung**: Saubere Dockerfile-Neuerstellung ohne Encoding-Probleme\n\n### 7. Build-Reihenfolge-Problem\n- **Problem**: `npm run build` vor dem Kopieren der Quelldateien ausgeführt\n- **Lösung**: Quelldateien vor dem Build-Prozess kopieren\n\n## Aktuelle Konfiguration:\n\n### docker-compose.yml\n```yaml\napp:\n  build: \n    context: .\n    dockerfile: Dockerfile  # ✅ Korrigiert\n```\n\n### Dockerfile\n```dockerfile\n# Korrekte Build-Reihenfolge\nCOPY package*.json ./\nRUN npm ci\nCOPY . .\nRUN npm run build\n\n# Bash-Shell hinzugefügt für Script-Ausführung\nRUN apk add --no-cache bash\n\n# Korrektes Entrypoint-Script mit absolutem Pfad\nCMD [\"bash\", \"/app/docker-entrypoint.sh\"]  # ✅ Korrigiert\n```\n\n### docker-entrypoint.sh\n- Robustes Startup-Script mit Retry-Mechanismus\n- Automatische Datenbank-Schema-Erstellung\n- Benutzer-Seeding und -Verifikation\n\n## Deployment-Befehle:\n\n```bash\n# Kompletter Build und Start\ndocker-compose up -d --build\n\n# Nur Start (bei vorhandenem Image)\ndocker-compose up -d\n\n# Logs anzeigen\ndocker-compose logs -f app\n\n# Cleanup\ndocker-compose down -v\n```\n\n## Verifikation:\n- ✅ Docker-Compose-Datei korrigiert\n- ✅ Dockerfile-Entrypoint behoben\n- ✅ DEPLOYMENT.md mit --build Flag aktualisiert\n- ✅ Alle obsoleten Dateien entfernt\n- ✅ Authentifizierung mit admin/password123 bestätigt\n- ✅ **FINAL**: Absoluter Pfad für Entrypoint-Script (/app/docker-entrypoint.sh)\n- ✅ **FINAL**: Bash-Shell zu Alpine-Image hinzugefügt\n- ✅ **FINAL**: Bessere Docker-Layer-Caching durch korrekte Reihenfolge\n- ✅ **FINAL**: TSX-Verfügbarkeit in Container behoben (direkter node_modules/.bin/tsx Pfad)\n- ✅ **FINAL**: Robuste Application-Startup-Logik (Build-Version oder tsx fallback)\n- ✅ **FINAL**: Build-Reihenfolge korrigiert (Quelldateien vor npm run build)\n- ✅ **FINAL**: Optimierte Docker-Layer-Struktur für bessere Performance","size_bytes":2859},"docker-entrypoint.sh":{"content":"#!/bin/bash\nset -e\n\necho \"Starting Biggs Permit Management System...\"\n\n# Set Docker environment flag\nexport DOCKER_ENV=true\n\n# Wait for database to be ready with retry mechanism\necho \"Waiting for database connection...\"\nmax_attempts=30\nattempt=0\nwhile [ $attempt -lt $max_attempts ]; do\n  if pg_isready -h \"$PGHOST\" -p \"$PGPORT\" -U \"$PGUSER\"; then\n    echo \"Database is ready!\"\n    break\n  fi\n  echo \"Database not ready, waiting... (attempt $((attempt+1))/$max_attempts)\"\n  sleep 2\n  ((attempt++))\ndone\n\nif [ $attempt -eq $max_attempts ]; then\n  echo \"Error: Database connection failed after $max_attempts attempts\"\n  exit 1\nfi\n\n# Push database schema with retry\necho \"Setting up database schema...\"\nattempt=0\nwhile [ $attempt -lt 5 ]; do\n  if npm run db:push; then\n    echo \"Database schema setup successful!\"\n    break\n  fi\n  echo \"Schema setup failed, retrying... (attempt $((attempt+1))/5)\"\n  sleep 3\n  ((attempt++))\ndone\n\nif [ $attempt -eq 5 ]; then\n  echo \"Error: Database schema setup failed after 5 attempts\"\n  exit 1\nfi\n\n# Verify tables exist and seed if needed\necho \"Checking database tables...\"\nif ! psql \"$DATABASE_URL\" -c \"SELECT COUNT(*) FROM users;\" >/dev/null 2>&1; then\n  echo \"Users table not found, seeding database...\"\n  # Use node_modules/.bin/tsx directly for reliability\n  NODE_ENV=production ./node_modules/.bin/tsx server/seed.ts\n  \n  # Verify seeding was successful\n  if psql \"$DATABASE_URL\" -c \"SELECT COUNT(*) FROM users;\" >/dev/null 2>&1; then\n    echo \"Database seeding successful!\"\n  else\n    echo \"Error: Database seeding failed\"\n    exit 1\n  fi\nelse\n  echo \"Database already seeded\"\nfi\n\n# Verify admin user exists\necho \"Verifying admin user...\"\nadmin_count=$(psql \"$DATABASE_URL\" -t -c \"SELECT COUNT(*) FROM users WHERE username = 'admin';\" 2>/dev/null | xargs)\nif [ \"$admin_count\" -eq \"0\" ]; then\n  echo \"Admin user not found, creating...\"\n  psql \"$DATABASE_URL\" -c \"INSERT INTO users (username, password, full_name, department, role) VALUES ('admin', 'password123', 'System Administrator', 'IT', 'admin') ON CONFLICT (username) DO UPDATE SET password = 'password123', role = 'admin';\"\nfi\n\necho \"System initialization complete!\"\n\n# Start the application\necho \"Starting application server...\"\n# Use the built version if available, otherwise use tsx\nif [ -f \"dist/index.js\" ]; then\n  exec node dist/index.js\nelse\n  exec ./node_modules/.bin/tsx server/index.ts\nfi","size_bytes":2394},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Biggs Permit Management System\n\n## Overview\nA cutting-edge digital permit management system designed to streamline safety workflows in industrial environments through advanced AI technologies and intelligent risk management.\n\n## Project Architecture\n\n### Backend (Node.js/Express)\n- **Framework**: Express.js with TypeScript\n- **Database**: PostgreSQL with Drizzle ORM\n- **Authentication**: Session-based with secure cookie management\n- **File Storage**: Multer for permit attachments\n- **AI Integration**: TRBS hazard analysis and safety recommendations\n\n### Frontend (React/TypeScript)\n- **Framework**: React 18 with TypeScript\n- **Routing**: Wouter for client-side routing\n- **State Management**: TanStack Query for server state\n- **UI Components**: Radix UI with Tailwind CSS\n- **Forms**: React Hook Form with Zod validation\n\n### Database Schema\n- **Core Tables**: users, permits, notifications, ai_suggestions\n- **Features**: work_locations, templates, webhook_config, system_settings\n- **Attachments**: permit_attachments with file storage\n- **Sessions**: Secure session management\n\n## Key Features\n\n### Core Functionality\n- Multi-role permit workflow (requestor → department head → safety officer → maintenance)\n- Real-time AI hazard analysis based on complete TRBS standards\n- Dynamic work location management\n- Comprehensive permit attachments with AI analysis\n- Print-ready permit documentation\n\n### Advanced Features\n- Customizable system branding (title, header icon)\n- Multilingual support (German interface)\n- Webhook integration for external systems\n- Status tracking and workflow visualization\n- Notification system for approvals and updates\n\n## Recent Changes\n- **2025-01-10**: Frontend-Umbenennung \"Sicherheitsbeauftragter\" → \"Sicherheitsfachkraft\" ✅\n  - Alle GUI-Texte in Frontend von \"Sicherheitsbeauftragter\" zu \"Sicherheitsfachkraft\" geändert\n  - Betroffen: user-management.tsx, approvals.tsx, edit-permit-modal-unified.tsx, print-utils.ts, permissions.ts\n  - Backend-Datenstrukturen unverändert (safety_officer, safetyOfficer etc.)\n  - Dropdown-Optionen, Labels, Anzeige-Texte und Kommentare aktualisiert\n- **2025-01-10**: AI-Suggestions Bug vollständig behoben ✅\n  - Problem identifiziert: selectedHazards wurde als leeres Objekt {} statt Array [] in PostgreSQL gespeichert\n  - Backend-Validierung für selectedHazards-Arrays in storage.ts verstärkt\n  - Frontend State-Synchronisation zwischen AI-Suggestions und Edit-Modal verbessert\n  - Automatische Query-Invalidierung und Refresh-Mechanismus implementiert\n  - TRBS-Tab zeigt jetzt korrekt die von AI vorgeschlagenen Checkboxen und Notizen an\n  - **BESTÄTIGT**: System funktioniert perfekt - alle Hazards und Notizen werden korrekt synchronisiert\n- **2025-01-08**: Complete Docker deployment solution implemented and finalized\n  - Fixed database configuration for Docker vs Neon environments\n  - Implemented bcrypt password hashing for security\n  - Created robust startup sequence with retry mechanisms\n  - Added comprehensive error handling and logging\n  - Solved database schema initialization issues\n  - Verified login functionality with admin/password123 credentials\n  - Cleaned up repository structure and removed obsolete files\n  - **FINAL FIX**: Corrected docker-compose.yml reference from deleted Dockerfile.simple to Dockerfile\n  - **FINAL FIX**: Fixed Docker entrypoint script usage in production build\n  - **FINAL FIX**: Streamlined Docker build process with proper tsx runtime support\n  - **FINAL FIX**: Updated deployment documentation with --build flag for fresh builds\n  - **FINAL FIX**: Resolved tsx execution issues in container with direct node_modules/.bin/tsx paths\n  - **FINAL FIX**: Implemented hybrid startup logic (built dist/index.js or tsx fallback)\n- **2025-01-07**: Added Docker containerization setup\n  - Created complete Docker Compose configuration\n  - Added PostgreSQL database with health checks\n  - Implemented proper startup sequence with database seeding\n  - Added comprehensive deployment documentation\n- **2025-01-07**: Fixed work location management UI issues\n  - Resolved input field focus loss when typing\n  - Fixed cache invalidation for work location dropdowns\n  - Ensured newly created locations appear in permit edit modal\n- **2025-01-07**: Enhanced system branding customization\n  - Added file upload handling for header icons\n  - Updated navigation and login pages with dynamic branding\n  - Fixed multer configuration for memory storage\n\n## User Preferences\n- **Interface Language**: German (Deutsch)\n- **System Focus**: Industrial safety compliance\n- **Deployment**: Docker containerization preferred\n- **UI/UX**: Clean, professional interface suitable for industrial environments\n\n## Deployment\n\n### Docker Deployment (Recommended)\n```bash\ndocker-compose up -d\n```\n\n### Development Setup\n```bash\nnpm install\nnpm run dev\n```\n\n### Database Operations\n```bash\nnpm run db:push  # Push schema changes\ntsx server/seed.ts  # Seed initial data\n```\n\n## Technical Stack\n- **Runtime**: Node.js 20\n- **Database**: PostgreSQL 15\n- **Frontend Build**: Vite\n- **Package Manager**: npm\n- **Containerization**: Docker & Docker Compose\n\n## Security Features\n- Secure session management\n- Role-based access control\n- File upload validation\n- CORS configuration\n- Input sanitization and validation","size_bytes":5322},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"hsl(var(--background))\",\n        foreground: \"hsl(var(--foreground))\",\n        card: {\n          DEFAULT: \"hsl(var(--card))\",\n          foreground: \"hsl(var(--card-foreground))\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover))\",\n          foreground: \"hsl(var(--popover-foreground))\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary))\",\n          foreground: \"hsl(var(--primary-foreground))\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary))\",\n          foreground: \"hsl(var(--secondary-foreground))\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted))\",\n          foreground: \"hsl(var(--muted-foreground))\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent))\",\n          foreground: \"hsl(var(--accent-foreground))\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive))\",\n          foreground: \"hsl(var(--destructive-foreground))\",\n        },\n        border: \"hsl(var(--border))\",\n        input: \"hsl(var(--input))\",\n        ring: \"hsl(var(--ring))\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1))\",\n          \"2\": \"hsl(var(--chart-2))\",\n          \"3\": \"hsl(var(--chart-3))\",\n          \"4\": \"hsl(var(--chart-4))\",\n          \"5\": \"hsl(var(--chart-5))\",\n        },\n        sidebar: {\n          DEFAULT: \"hsl(var(--sidebar-background))\",\n          foreground: \"hsl(var(--sidebar-foreground))\",\n          primary: \"hsl(var(--sidebar-primary))\",\n          \"primary-foreground\": \"hsl(var(--sidebar-primary-foreground))\",\n          accent: \"hsl(var(--sidebar-accent))\",\n          \"accent-foreground\": \"hsl(var(--sidebar-accent-foreground))\",\n          border: \"hsl(var(--sidebar-border))\",\n          ring: \"hsl(var(--sidebar-ring))\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2787},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport { drizzle as drizzleNode } from 'drizzle-orm/node-postgres';\nimport pg from 'pg';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nconst { Pool: NodePool } = pg;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\n// Determine if we're in Docker environment\nconst isDocker = process.env.DOCKER_ENV === 'true' || process.env.DATABASE_URL.includes('localhost') || process.env.DATABASE_URL.includes('127.0.0.1');\n\nlet pool: Pool | NodePool;\nlet db: ReturnType<typeof drizzle> | ReturnType<typeof drizzleNode>;\n\nif (isDocker) {\n  // Use standard PostgreSQL for Docker\n  console.log('Using standard PostgreSQL connection for Docker environment');\n  pool = new NodePool({ connectionString: process.env.DATABASE_URL });\n  db = drizzleNode(pool, { schema });\n} else {\n  // Use Neon for production\n  console.log('Using Neon PostgreSQL connection for production environment');\n  neonConfig.webSocketConstructor = ws;\n  pool = new Pool({ connectionString: process.env.DATABASE_URL });\n  db = drizzle({ client: pool, schema });\n}\n\nexport { pool, db };","size_bytes":1259},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport cookieParser from \"cookie-parser\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\nimport { storage } from \"./storage\";\n\nconst app = express();\n\n// Add CORS headers to fix NetworkError\napp.use((req, res, next) => {\n  res.header('Access-Control-Allow-Origin', req.headers.origin || '*');\n  res.header('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');\n  res.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept, Authorization');\n  res.header('Access-Control-Allow-Credentials', 'true');\n  \n  if (req.method === 'OPTIONS') {\n    res.sendStatus(200);\n  } else {\n    next();\n  }\n});\n\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\napp.use(cookieParser());\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on port 5000\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = 5000;\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n    \n    // Setup periodic cleanup for AI suggestions (every hour)\n    setInterval(async () => {\n      try {\n        const cleanedUp = await storage.cleanupOldSuggestions();\n        if (cleanedUp > 0) {\n          log(`Cleaned up ${cleanedUp} old AI suggestions`);\n        }\n      } catch (error) {\n        console.error(\"Error during AI suggestions cleanup:\", error);\n      }\n    }, 60 * 60 * 1000); // 1 hour\n    \n    log(\"AI suggestions periodic cleanup enabled (every hour)\");\n  });\n})();\n","size_bytes":2992},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport path from \"path\";\nimport fs from \"fs\";\nimport multer from \"multer\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { storage } from \"./storage\";\nimport { insertPermitSchema, insertDraftPermitSchema, insertPermitAttachmentSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport { fileURLToPath } from 'url';\nimport { dirname } from 'path';\n\n// Complete TRBS data matching frontend source - all 11 categories with 48 hazards\nfunction loadTRBSData() {\n  const trbsData = {\n    \"title\": \"TRBS Gefährdungsbeurteilung - Vollständige Kategorien\",\n    \"version\": \"2025\",\n    \"categories\": [\n      {\n        \"id\": \"1\",\n        \"category\": \"Mechanische Gefährdungen\",\n        \"hazards\": [\n          {\"hazard\": \"Quetschung durch bewegte Teile\"},\n          {\"hazard\": \"Schneiden an scharfen Kanten\"},\n          {\"hazard\": \"Stoß durch herunterfallende Gegenstände\"},\n          {\"hazard\": \"Sturz durch ungesicherte Öffnungen\"}\n        ]\n      },\n      {\n        \"id\": \"2\",\n        \"category\": \"Elektrische Gefährdungen\",\n        \"hazards\": [\n          {\"hazard\": \"Stromschlag durch defekte Geräte\"},\n          {\"hazard\": \"Lichtbogen bei Schalthandlungen\"},\n          {\"hazard\": \"Statische Entladung\"},\n          {\"hazard\": \"Induktive Kopplung\"}\n        ]\n      },\n      {\n        \"id\": \"3\",\n        \"category\": \"Gefahrstoffe\",\n        \"hazards\": [\n          {\"hazard\": \"Hautkontakt mit Gefahrstoffen\"},\n          {\"hazard\": \"Einatmen von Gefahrstoffen\"},\n          {\"hazard\": \"Verschlucken von Gefahrstoffen\"},\n          {\"hazard\": \"Hautkontakt mit unter Druck stehenden Flüssigkeiten\"}\n        ]\n      },\n      {\n        \"id\": \"4\",\n        \"category\": \"Biologische Arbeitsstoffe\",\n        \"hazards\": [\n          {\"hazard\": \"Infektionsgefährdung\"},\n          {\"hazard\": \"sensibilisierende Wirkung\"},\n          {\"hazard\": \"toxische Wirkung\"}\n        ]\n      },\n      {\n        \"id\": \"5\",\n        \"category\": \"Brand- und Explosionsgefährdungen\",\n        \"hazards\": [\n          {\"hazard\": \"brennbare Feststoffe, Flüssigkeiten, Gase\"},\n          {\"hazard\": \"explosionsfähige Atmosphäre\"},\n          {\"hazard\": \"Explosivstoffe\"}\n        ]\n      },\n      {\n        \"id\": \"6\",\n        \"category\": \"Thermische Gefährdungen\",\n        \"hazards\": [\n          {\"hazard\": \"heiße Medien/Oberflächen\"},\n          {\"hazard\": \"kalte Medien/Oberflächen\"},\n          {\"hazard\": \"Brand, Explosion\"}\n        ]\n      },\n      {\n        \"id\": \"7\",\n        \"category\": \"Gefährdungen durch spezielle physikalische Einwirkungen\",\n        \"hazards\": [\n          {\"hazard\": \"Lärm\"},\n          {\"hazard\": \"Ultraschall, Infraschall\"},\n          {\"hazard\": \"Ganzkörpervibrationen\"},\n          {\"hazard\": \"Hand-Arm-Vibrationen\"},\n          {\"hazard\": \"optische Strahlung\"},\n          {\"hazard\": \"ionisierende Strahlung\"},\n          {\"hazard\": \"elektromagnetische Felder\"},\n          {\"hazard\": \"Unter- oder Überdruck\"}\n        ]\n      },\n      {\n        \"id\": \"8\",\n        \"category\": \"Gefährdungen durch Arbeitsumgebungsbedingungen\",\n        \"hazards\": [\n          {\"hazard\": \"Klima (Hitze, Kälte)\"},\n          {\"hazard\": \"unzureichende Beleuchtung\"},\n          {\"hazard\": \"Lärm\"},\n          {\"hazard\": \"unzureichende Verkehrswege\"},\n          {\"hazard\": \"Sturz, Ausgleiten\"},\n          {\"hazard\": \"unzureichende Flucht- und Rettungswege\"}\n        ]\n      },\n      {\n        \"id\": \"9\",\n        \"category\": \"Physische Belastung/Arbeitsschwere\",\n        \"hazards\": [\n          {\"hazard\": \"schwere dynamische Arbeit\"},\n          {\"hazard\": \"einseitige dynamische Arbeit\"},\n          {\"hazard\": \"Haltungsarbeit/Zwangshaltungen\"},\n          {\"hazard\": \"Fortbewegung/ungünstige Körperhaltung\"},\n          {\"hazard\": \"Kombination körperlicher Belastungsfaktoren\"}\n        ]\n      },\n      {\n        \"id\": \"10\",\n        \"category\": \"Psychische Faktoren\",\n        \"hazards\": [\n          {\"hazard\": \"unzureichend gestaltete Arbeitsaufgabe\"},\n          {\"hazard\": \"unzureichend gestaltete Arbeitsorganisation\"},\n          {\"hazard\": \"unzureichend gestaltete soziale Bedingungen\"},\n          {\"hazard\": \"unzureichend gestaltete Arbeitsplatz- und Arbeitsumgebungsfaktoren\"}\n        ]\n      },\n      {\n        \"id\": \"11\",\n        \"category\": \"Sonstige Gefährdungen\",\n        \"hazards\": [\n          {\"hazard\": \"durch Menschen (körperliche Gewalt)\"},\n          {\"hazard\": \"durch Tiere\"},\n          {\"hazard\": \"durch Pflanzen und pflanzliche Produkte\"},\n          {\"hazard\": \"Absturz in/durch Behälter, Becken, Gruben\"}\n        ]\n      }\n    ]\n  };\n\n  console.log('Successfully loaded embedded TRBS data:', {\n    categories: trbsData.categories.length,\n    totalHazards: trbsData.categories.reduce((sum: number, cat: any) => sum + cat.hazards.length, 0)\n  });\n  \n  return trbsData;\n}\n\n// Enhanced function to format complete TRBS assessment for webhook\nfunction formatCompleteTRBSForWebhook(permit: any) {\n  try {\n    const trbsData = loadTRBSData();\n    \n    // Parse permit's hazard selections and notes\n    const selectedHazardsList = permit.selectedHazards || [];\n    let hazardNotesObj: Record<string, string> = {};\n    \n    try {\n      hazardNotesObj = permit.hazardNotes ? JSON.parse(permit.hazardNotes) : {};\n    } catch (parseError) {\n      console.warn('Invalid JSON in permit hazardNotes:', permit.hazardNotes);\n      hazardNotesObj = {};\n    }\n    \n    // Build complete TRBS assessment with all categories and hazards\n    const trbsAssessment = {\n      categories: trbsData.categories.map((category: any) => {\n        const categoryHazards = category.hazards.map((hazard: any, hazardIndex: number) => {\n          const hazardId = `${category.id}-${hazardIndex}`;\n          const isSelected = selectedHazardsList.includes(hazardId);\n          \n          return {\n            hazardId,\n            hazardDescription: hazard.hazard,\n            isSelected,\n            notes: hazardNotesObj[hazardId] || \"\",\n            riskLevel: isSelected ? (hazardNotesObj[hazardId] ? \"assessed\" : \"identified\") : \"not_applicable\"\n          };\n        });\n        \n        const selectedCount = categoryHazards.filter(h => h.isSelected).length;\n        \n        return {\n          categoryId: parseInt(category.id),\n          categoryName: category.category,\n          hazards: categoryHazards,\n          totalHazards: categoryHazards.length,\n          selectedCount,\n          hasSelections: selectedCount > 0,\n          completionRate: Math.round((selectedCount / categoryHazards.length) * 100)\n        };\n      }),\n      \n      // Summary statistics\n      summary: {\n        totalCategories: trbsData.categories.length,\n        totalHazards: trbsData.categories.reduce((sum: number, cat: any) => sum + cat.hazards.length, 0),\n        selectedHazards: selectedHazardsList.length,\n        categoriesWithSelections: trbsData.categories.filter((cat: any) => \n          cat.hazards.some((_: any, idx: number) => selectedHazardsList.includes(`${cat.id}-${idx}`))\n        ).length,\n        overallRisk: permit.overallRisk || \"not_assessed\",\n        assessmentComplete: selectedHazardsList.length > 0\n      },\n      \n      // Additional safety data\n      safetyMeasures: {\n        identifiedHazards: permit.identifiedHazards || \"\",\n        completedMeasures: permit.completedMeasures || [],\n        immediateActions: permit.immediateActions || \"\",\n        beforeWorkStarts: permit.beforeWorkStarts || \"\",\n        preventiveMeasures: permit.preventiveMeasures || \"\",\n        complianceNotes: permit.complianceNotes || \"\"\n      }\n    };\n    \n    console.log('Formatted complete TRBS assessment for webhook:', {\n      totalCategories: trbsAssessment.categories.length,\n      totalHazards: trbsAssessment.summary.totalHazards,\n      selectedHazards: trbsAssessment.summary.selectedHazards,\n      categoriesWithSelections: trbsAssessment.summary.categoriesWithSelections\n    });\n    \n    return trbsAssessment;\n  } catch (error) {\n    console.error('Error formatting complete TRBS data for webhook:', error);\n    throw error;\n  }\n}\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  \n  // Health check endpoint (no auth required)\n  app.get('/api/health', (req, res) => {\n    res.json({ \n      status: 'healthy', \n      timestamp: new Date().toISOString(),\n      version: '1.0.0'\n    });\n  });\n  \n  // Authentication middleware (unified)\n  const requireAuth = async (req: any, res: any, next: any) => {\n    try {\n      const sessionId = req.cookies?.sessionId;\n      console.log('Auth middleware - sessionId:', sessionId);\n      \n      if (!sessionId) {\n        console.log('Auth middleware - No session ID found');\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n      \n      const session = await storage.getSessionBySessionId(sessionId);\n      if (!session) {\n        console.log('Auth middleware - No valid session found in database');\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n      \n      // Check if session has expired\n      if (session.expiresAt < new Date()) {\n        console.log('Auth middleware - Session expired');\n        await storage.deleteSession(sessionId);\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n      \n      const user = await storage.getUser(session.userId);\n      if (!user) {\n        console.log('Auth middleware - User not found in database');\n        await storage.deleteSession(sessionId);\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n      \n      console.log('Auth middleware - successful for user:', user.username);\n      req.user = user;\n      next();\n    } catch (error) {\n      console.error('Auth middleware error:', error);\n      res.status(401).json({ message: \"Not authenticated\" });\n    }\n  };\n  \n  // Configure multer for file uploads\n  const uploadDir = path.join(process.cwd(), 'uploads');\n  if (!fs.existsSync(uploadDir)) {\n    fs.mkdirSync(uploadDir, { recursive: true });\n  }\n\n  const upload = multer({\n    storage: multer.diskStorage({\n      destination: (req, file, cb) => {\n        cb(null, uploadDir);\n      },\n      filename: (req, file, cb) => {\n        const uniqueId = uuidv4();\n        const extension = path.extname(file.originalname);\n        cb(null, `${uniqueId}${extension}`);\n      }\n    }),\n    limits: {\n      fileSize: 10 * 1024 * 1024, // 10MB limit\n    },\n    fileFilter: (req, file, cb) => {\n      console.log(`File upload attempt: ${file.originalname}, mimetype: ${file.mimetype}`);\n      \n      // Allow images and common document formats\n      const allowedExtensions = /\\.(jpeg|jpg|png|gif|pdf|doc|docx|txt|xls|xlsx)$/i;\n      const allowedMimeTypes = [\n        'image/jpeg', 'image/jpg', 'image/png', 'image/gif', 'image/webp',\n        'application/pdf',\n        'application/msword',\n        'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n        'text/plain', 'text/csv',\n        'application/vnd.ms-excel',\n        'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n        'application/octet-stream' // For some mobile uploads\n      ];\n      \n      const hasValidExtension = allowedExtensions.test(file.originalname);\n      const hasValidMimeType = allowedMimeTypes.includes(file.mimetype);\n      \n      // Special handling for camera captures that might have generic MIME types\n      const isCameraCapture = file.originalname.toLowerCase().includes('image') || \n                            file.mimetype.startsWith('image/') ||\n                            file.originalname.toLowerCase().match(/\\.(jpg|jpeg|png|gif)$/i);\n      \n      if (hasValidExtension || hasValidMimeType || isCameraCapture) {\n        console.log(`File accepted: ${file.originalname}`);\n        return cb(null, true);\n      } else {\n        console.log(`File rejected: ${file.originalname}, mimetype: ${file.mimetype}`);\n        cb(new Error(`Dateityp nicht unterstützt: ${file.mimetype}`));\n      }\n    }\n  });\n\n  // Separate multer configuration for icon uploads (uses memory storage)\n  const iconUpload = multer({\n    storage: multer.memoryStorage(),\n    limits: {\n      fileSize: 2 * 1024 * 1024, // 2MB limit for icons\n    },\n    fileFilter: (req, file, cb) => {\n      // Only allow image files for icons\n      if (file.mimetype.startsWith('image/')) {\n        cb(null, true);\n      } else {\n        cb(new Error('Only image files are allowed for icons'));\n      }\n    }\n  });\n  \n  // Get permit statistics (must come before /api/permits/:id)\n  app.get(\"/api/permits/stats\", requireAuth, async (req, res) => {\n    try {\n      const stats = await storage.getPermitStats();\n      res.json(stats);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch permit statistics\" });\n    }\n  });\n\n  // Get permits by status (must come before /api/permits/:id)\n  app.get(\"/api/permits/status/:status\", requireAuth, async (req, res) => {\n    try {\n      const status = req.params.status;\n      const permits = await storage.getPermitsByStatus(status);\n      res.json(permits);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch permits by status\" });\n    }\n  });\n\n  // Get permits for map (must come before /api/permits/:id)\n  app.get(\"/api/permits/map\", requireAuth, async (req, res) => {\n    try {\n      const permits = await storage.getPermitsForMap();\n      res.json(permits);\n    } catch (error) {\n      log(`Error fetching permits for map: ${error}`);\n      res.status(500).json({ message: \"Failed to fetch permits for map\" });\n    }\n  });\n\n  // Get all permits\n  app.get(\"/api/permits\", requireAuth, async (req, res) => {\n    try {\n      const permits = await storage.getAllPermits();\n      res.json(permits);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch permits\" });\n    }\n  });\n\n  // Get permit by ID with resolved approver names\n  app.get(\"/api/permits/:id\", requireAuth, async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const permit = await storage.getPermit(id);\n      \n      if (!permit) {\n        return res.status(404).json({ message: \"Permit not found\" });\n      }\n      \n      // Resolve approver names from IDs stored in departmentHead, safetyOfficer, maintenanceApprover fields\n      let resolvedPermit = { ...permit };\n      \n      // Parse names from stored text fields and try to find matching user IDs\n      if (permit.departmentHead) {\n        const user = await storage.getUserByFullName(permit.departmentHead);\n        if (user) resolvedPermit.departmentHeadId = user.id;\n      }\n      \n      if (permit.safetyOfficer) {\n        const user = await storage.getUserByFullName(permit.safetyOfficer);\n        if (user) resolvedPermit.safetyOfficerId = user.id;\n      }\n      \n      if (permit.maintenanceApprover) {\n        const user = await storage.getUserByFullName(permit.maintenanceApprover);\n        if (user) resolvedPermit.maintenanceApproverId = user.id;\n      }\n      \n      res.json(resolvedPermit);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch permit\" });\n    }\n  });\n\n  // Create new permit\n  app.post(\"/api/permits\", requireAuth, async (req, res) => {\n    try {\n      console.log(\"Creating permit with data:\", JSON.stringify(req.body, null, 2));\n      \n      // Validate and convert dates\n      const processedData = { ...req.body };\n      \n      // Handle dates based on whether it's a draft\n      const isDraft = processedData.status === \"draft\";\n      \n      // Check if dates are valid\n      if (req.body.startDate) {\n        const startDate = new Date(req.body.startDate);\n        if (isNaN(startDate.getTime())) {\n          return res.status(400).json({ \n            message: \"Ungültiges Startdatum. Bitte geben Sie ein gültiges Datum ein.\" \n          });\n        }\n        processedData.startDate = startDate.toISOString();\n      } else {\n        processedData.startDate = isDraft ? undefined : null;\n      }\n      \n      if (req.body.endDate) {\n        const endDate = new Date(req.body.endDate);\n        if (isNaN(endDate.getTime())) {\n          return res.status(400).json({ \n            message: \"Ungültiges Enddatum. Bitte geben Sie ein gültiges Datum ein.\" \n          });\n        }\n        processedData.endDate = endDate.toISOString();\n      } else {\n        processedData.endDate = isDraft ? undefined : null;\n      }\n      \n      // Handle work started/completed dates\n      if (processedData.workStartedAt === \"\" || processedData.workStartedAt === null) {\n        delete processedData.workStartedAt;\n      }\n      if (processedData.workCompletedAt === \"\" || processedData.workCompletedAt === null) {\n        delete processedData.workCompletedAt;\n      }\n      \n      // Check if end date is after start date\n      if (processedData.startDate && processedData.endDate) {\n        const start = new Date(processedData.startDate);\n        const end = new Date(processedData.endDate);\n        if (end < start) {\n          return res.status(400).json({ \n            message: \"Enddatum muss nach dem Startdatum liegen.\" \n          });\n        }\n      }\n      \n      // Use appropriate validation schema based on status\n      const validationSchema = isDraft ? insertDraftPermitSchema : insertPermitSchema;\n      const validatedData = validationSchema.parse(processedData);\n      console.log(\"Validated data:\", JSON.stringify(validatedData, null, 2));\n      \n      // Handle draft permits with proper defaults\n      const permitData = {\n        ...validatedData,\n        type: validatedData.type || \"\",\n        location: validatedData.location || \"\",\n        description: validatedData.description || \"\",\n        requestorName: validatedData.requestorName || \"\",\n        department: validatedData.department || \"\",\n        contactNumber: validatedData.contactNumber || \"\",\n        emergencyContact: validatedData.emergencyContact || \"\",\n        startDate: processedData.startDate || \"\",\n        endDate: processedData.endDate || \"\",\n        status: validatedData.status || \"pending\",\n      };\n      \n      // Add map position data after other data to ensure it's not overwritten\n      if (validatedData.positionX !== undefined && validatedData.positionY !== undefined) {\n        console.log(\"Setting map position:\", validatedData.positionX, validatedData.positionY);\n        permitData.mapPositionX = validatedData.positionX;\n        permitData.mapPositionY = validatedData.positionY;\n      } else {\n        console.log(\"No position data found in validatedData:\", { positionX: validatedData.positionX, positionY: validatedData.positionY });\n      }\n      \n      const permit = await storage.createPermit(permitData as any);\n      console.log(\"Created permit:\", permit);\n      \n      res.status(201).json(permit);\n    } catch (error) {\n      console.error(\"Error creating permit:\", error);\n      \n      if (error instanceof z.ZodError) {\n        console.log(\"Validation errors:\", error.errors);\n        return res.status(400).json({ \n          message: \"Validierungsfehler. Bitte überprüfen Sie alle Pflichtfelder.\", \n          errors: error.errors \n        });\n      }\n      \n      res.status(500).json({ \n        message: \"Genehmigung konnte nicht erstellt werden. Bitte überprüfen Sie alle Eingaben und versuchen Sie es erneut.\" \n      });\n    }\n  });\n\n  // Update permit\n  app.patch(\"/api/permits/:id\", requireAuth, async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const updates = req.body;\n      \n      console.log(\"Updating permit:\", id, \"with data:\", updates);\n      \n      // Validate and clean up date fields\n      const dateFields = ['startDate', 'endDate', 'workStartedAt', 'workCompletedAt'];\n      for (const field of dateFields) {\n        if (updates[field] !== undefined) {\n          if (updates[field] === '' || updates[field] === null) {\n            updates[field] = null;\n          } else {\n            const date = new Date(updates[field]);\n            if (isNaN(date.getTime())) {\n              return res.status(400).json({ \n                message: `Ungültiges Datum für Feld \"${field}\". Bitte geben Sie ein gültiges Datum ein.`,\n                field: field\n              });\n            }\n            updates[field] = date;\n          }\n        }\n      }\n      \n      // Validate required fields based on permit type\n      const validationErrors = [];\n      \n      if (!updates.startDate && updates.status !== 'draft') {\n        validationErrors.push(\"Startdatum ist erforderlich\");\n      }\n      \n      if (!updates.endDate && updates.status !== 'draft') {\n        validationErrors.push(\"Enddatum ist erforderlich\");\n      }\n      \n      if (updates.startDate && updates.endDate && updates.startDate.getTime() > updates.endDate.getTime()) {\n        validationErrors.push(\"Das Enddatum darf nicht vor dem Startdatum liegen\");\n      }\n      \n      if (!updates.location?.trim() && updates.status !== 'draft') {\n        validationErrors.push(\"Arbeitsort ist erforderlich\");\n      }\n      \n      if (!updates.description?.trim() && updates.status !== 'draft') {\n        validationErrors.push(\"Beschreibung ist erforderlich\");\n      }\n      \n      if (!updates.requestorName?.trim() && updates.status !== 'draft') {\n        validationErrors.push(\"Name des Antragstellers ist erforderlich\");\n      }\n      \n      if (!updates.department?.trim() && updates.status !== 'draft') {\n        validationErrors.push(\"Abteilung ist erforderlich\");\n      }\n      \n      if (validationErrors.length > 0) {\n        return res.status(400).json({ \n          message: \"Bitte korrigieren Sie die folgenden Fehler:\",\n          errors: validationErrors\n        });\n      }\n      \n      const permit = await storage.updatePermit(id, updates);\n      \n      if (!permit) {\n        return res.status(404).json({ \n          message: \"Genehmigung nicht gefunden. Möglicherweise wurde sie bereits gelöscht.\"\n        });\n      }\n      \n      res.json(permit);\n    } catch (error) {\n      console.error(\"Error updating permit:\", error);\n      \n      if (error instanceof Error && error.message?.includes('toISOString')) {\n        return res.status(400).json({ \n          message: \"Ungültiges Datumsformat. Bitte überprüfen Sie alle Datumsfelder und versuchen Sie es erneut.\"\n        });\n      }\n      \n      if (error instanceof Error && error.message?.includes('validation')) {\n        return res.status(400).json({ \n          message: \"Validierungsfehler. Bitte überprüfen Sie alle Eingaben auf Korrektheit.\"\n        });\n      }\n      \n      res.status(500).json({ \n        message: \"Die Genehmigung konnte nicht gespeichert werden. Bitte überprüfen Sie Ihre Eingaben und versuchen Sie es erneut.\"\n      });\n    }\n  });\n\n  // Delete permit and all associated data (admin only)\n  app.delete(\"/api/permits/:id\", requireAuth, async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      \n      // Check if user is admin\n      const sessionId = req.cookies?.sessionId;\n      if (!sessionId) {\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n      \n      const session = await storage.getSessionBySessionId(sessionId);\n      if (!session) {\n        return res.status(401).json({ message: \"Invalid session\" });\n      }\n      \n      const user = await storage.getUser(session.userId);\n      if (!user || user.role !== 'admin') {\n        return res.status(403).json({ message: \"Administrator access required\" });\n      }\n      \n      console.log(`Admin ${user.username} requesting deletion of permit ${id}`);\n      \n      // Delete permit and all associated data\n      const deleted = await storage.deletePermit(id);\n      \n      if (!deleted) {\n        return res.status(404).json({ message: \"Permit not found\" });\n      }\n      \n      console.log(`Successfully deleted permit ${id} and all associated data`);\n      res.json({ message: \"Genehmigung und alle zugehörigen Daten wurden erfolgreich gelöscht\" });\n    } catch (error) {\n      console.error(\"Error deleting permit:\", error);\n      res.status(500).json({ message: \"Fehler beim Löschen der Genehmigung\" });\n    }\n  });\n\n  // Workflow action endpoint\n  app.post(\"/api/permits/:id/workflow\", requireAuth, async (req, res) => {\n    try {\n      const permitId = parseInt(req.params.id);\n      const { action, nextStatus, comment } = req.body;\n      const sessionId = req.cookies?.sessionId;\n      if (!sessionId) {\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n      \n      const session = await storage.getSessionBySessionId(sessionId);\n      if (!session) {\n        return res.status(401).json({ message: \"Invalid session\" });\n      }\n      \n      const userId = session.userId;\n\n      if (isNaN(permitId)) {\n        return res.status(400).json({ message: \"Invalid permit ID\" });\n      }\n\n      if (!action || !nextStatus) {\n        return res.status(400).json({ message: \"Action and nextStatus are required\" });\n      }\n\n      // Get current permit to validate transition\n      const currentPermit = await storage.getPermit(permitId);\n      if (!currentPermit) {\n        return res.status(404).json({ message: \"Permit not found\" });\n      }\n\n      // Validate status transition based on action\n      const validTransitions: Record<string, string[]> = {\n        submit: ['draft'],\n        withdraw: ['pending', 'approved'],\n        approve: ['pending'],\n        activate: ['approved'],\n        complete: ['active'],\n        reject: ['pending'],\n        suspend: ['active']\n      };\n\n      console.log(`Workflow validation: action=${action}, currentStatus=${currentPermit.status}, nextStatus=${nextStatus}`);\n\n      if (!validTransitions[action] || !validTransitions[action].includes(currentPermit.status)) {\n        console.error(`Invalid transition: cannot ${action} from status ${currentPermit.status} to ${nextStatus}`);\n        return res.status(400).json({ \n          message: `Invalid transition: cannot ${action} from status ${currentPermit.status} to ${nextStatus}` \n        });\n      }\n\n      // For approve action, handle individual approvals\n      if (action === 'approve') {\n        const user = await storage.getUser(userId);\n        if (!user) {\n          return res.status(400).json({ message: \"User not found\" });\n        }\n\n        // Update specific approval based on user role and assignment\n        const updates: Partial<any> = {};\n        \n        console.log(`Approval check for permit ${permitId}:`);\n        console.log(`User: ${user.username}, Role: ${user.role}`);\n        console.log(`Department Head: ${currentPermit.departmentHead}`);\n        console.log(`Safety Officer: ${currentPermit.safetyOfficer}`);\n        console.log(`Maintenance Approver: ${currentPermit.maintenanceApprover}`);\n        \n        // Check specific assignment first, then fall back to role-based approval\n        if (currentPermit.departmentHead === user.fullName) {\n          console.log('Setting department head approval by name match');\n          updates.departmentHeadApproval = true;\n          updates.departmentHeadApprovalDate = new Date();\n        } else if (currentPermit.safetyOfficer === user.fullName) {\n          console.log('Setting safety officer approval by name match');\n          updates.safetyOfficerApproval = true;\n          updates.safetyOfficerApprovalDate = new Date();\n        } else if (currentPermit.maintenanceApprover === user.fullName) {\n          console.log('Setting maintenance approval by name match');\n          updates.maintenanceApproval = true;\n          updates.maintenanceApprovalDate = new Date();\n        } else if (user.role === 'department_head' && \n                   (!currentPermit.departmentHead || currentPermit.departmentHead === '') && \n                   !currentPermit.departmentHeadApproval) {\n          // Department head can approve based on role if no specific department head is assigned\n          updates.departmentHeadApproval = true;\n          updates.departmentHeadApprovalDate = new Date();\n        } else if (user.role === 'maintenance' && \n                   (!currentPermit.maintenanceApprover || currentPermit.maintenanceApprover === '') && \n                   !currentPermit.maintenanceApproval) {\n          // Maintenance user can approve based on role if no specific maintenance approver is assigned\n          console.log('Setting maintenance approval by role');\n          updates.maintenanceApproval = true;\n          updates.maintenanceApprovalDate = new Date();\n        } else if (user.role === 'safety_officer' && \n                   (!currentPermit.safetyOfficer || currentPermit.safetyOfficer === '') && \n                   !currentPermit.safetyOfficerApproval) {\n          // Safety officer can approve based on role if no specific safety officer is assigned\n          console.log('Setting safety officer approval by role');\n          updates.safetyOfficerApproval = true;\n          updates.safetyOfficerApprovalDate = new Date();\n        } else if (user.role === 'admin') {\n          // Admin can approve any role that hasn't been approved yet\n          if (!currentPermit.departmentHeadApproval) {\n            updates.departmentHeadApproval = true;\n            updates.departmentHeadApprovalDate = new Date();\n          }\n          if (!currentPermit.maintenanceApproval) {\n            updates.maintenanceApproval = true;\n            updates.maintenanceApprovalDate = new Date();\n          }\n          if (currentPermit.safetyOfficer && !currentPermit.safetyOfficerApproval) {\n            updates.safetyOfficerApproval = true;\n            updates.safetyOfficerApprovalDate = new Date();\n          }\n          // If no specific approvals are needed, admin still gets access\n          if (Object.keys(updates).length === 0) {\n            return res.status(400).json({ message: \"All required approvals already granted\" });\n          }\n        } else {\n          return res.status(403).json({ message: \"Not authorized to approve this permit\" });\n        }\n\n        // Update individual approvals first\n        console.log('Updates to apply:', updates);\n        const updateResult = await storage.updatePermit(permitId, updates);\n        console.log('Update result:', updateResult);\n        \n        // Check if all required approvals are received\n        const updatedPermit = await storage.getPermit(permitId);\n        const requiredApprovals = updatedPermit?.departmentHeadApproval && updatedPermit?.maintenanceApproval;\n        const optionalSafetyApproval = !updatedPermit?.safetyOfficer || updatedPermit?.safetyOfficerApproval;\n        const allApproved = requiredApprovals && optionalSafetyApproval;\n        \n        if (allApproved) {\n          // Move to approved status\n          const finalPermit = await storage.updatePermitStatus(permitId, 'approved', userId, comment);\n          res.json(finalPermit);\n        } else {\n          // Stay in pending, just record the individual approval\n          await storage.addStatusHistoryEntry(permitId, 'pending', userId, `Teilgenehmigung erteilt: ${Object.keys(updates).join(', ')}`);\n          const permit = await storage.getPermit(permitId);\n          res.json(permit);\n        }\n      } else {\n        // Handle other workflow actions\n        console.log(`Executing workflow action: ${action} -> ${nextStatus} for permit ${permitId}`);\n        \n        // Special handling for withdraw action - reset all approvals\n        if (action === 'withdraw' && nextStatus === 'draft') {\n          console.log(`Withdrawing permit ${permitId} to draft - resetting all approvals`);\n          \n          // Reset all approval fields\n          const resetData = {\n            status: 'draft',\n            departmentHeadApproval: false,\n            departmentHeadApprovalDate: null,\n            safetyOfficerApproval: false,\n            safetyOfficerApprovalDate: null,\n            maintenanceApproval: false,\n            maintenanceApprovalDate: null,\n            updatedAt: new Date()\n          };\n          \n          const updatedPermit = await storage.updatePermit(permitId, resetData);\n          \n          if (!updatedPermit) {\n            console.error(`Failed to withdraw permit ${permitId} to draft`);\n            return res.status(500).json({ message: \"Failed to withdraw permit to draft\" });\n          }\n          \n          // Add status history entry\n          await storage.addStatusHistoryEntry(permitId, 'draft', userId, comment || 'Genehmigung zurückgezogen - alle Freigaben zurückgesetzt');\n          \n          console.log(`Successfully withdrew permit ${permitId} to draft and reset approvals`);\n          res.json(updatedPermit);\n        } else {\n          // Regular status update\n          const updatedPermit = await storage.updatePermitStatus(permitId, nextStatus, userId, comment);\n          \n          if (!updatedPermit) {\n            console.error(`Failed to update permit ${permitId} status to ${nextStatus}`);\n            return res.status(500).json({ message: \"Failed to update permit status\" });\n          }\n          \n          console.log(`Successfully updated permit ${permitId} status to ${nextStatus}`);\n          res.json(updatedPermit);\n        }\n      }\n    } catch (error) {\n      console.error(\"Error processing workflow action:\", error);\n      res.status(500).json({ message: \"Failed to process workflow action\" });\n    }\n  });\n\n  // Approve permit\n  app.post(\"/api/permits/:id/approve\", requireAuth, async (req, res) => {\n    try {\n      const permitId = parseInt(req.params.id);\n      const { approvalType } = req.body;\n      \n      const permit = await storage.getPermit(permitId);\n      if (!permit) {\n        return res.status(404).json({ message: \"Permit not found\" });\n      }\n      \n      const updates: any = { updatedAt: new Date() };\n      \n      if (approvalType === \"department_head\") {\n        updates.departmentHeadApproval = true;\n        updates.departmentHeadApprovalDate = new Date();\n      } else if (approvalType === \"maintenance\") {\n        updates.maintenanceApproval = true;\n        updates.maintenanceApprovalDate = new Date();\n      } else if (approvalType === \"safety_officer\") {\n        updates.safetyOfficerApproval = true;\n        updates.safetyOfficerApprovalDate = new Date();\n      }\n      \n      // Check if both required approvals are now complete\n      const updatedPermit = await storage.updatePermit(permitId, updates);\n      if (updatedPermit?.departmentHeadApproval && updatedPermit?.maintenanceApproval) {\n        await storage.updatePermit(permitId, { status: \"approved\" });\n      }\n      \n      res.json({ message: \"Permit approved successfully\" });\n    } catch (error) {\n      console.error(\"Error approving permit:\", error);\n      res.status(500).json({ message: \"Failed to approve permit\" });\n    }\n  });\n\n  // Reject permit\n  app.post(\"/api/permits/:id/reject\", requireAuth, async (req, res) => {\n    try {\n      const permitId = parseInt(req.params.id);\n      const { reason } = req.body;\n      \n      const permit = await storage.getPermit(permitId);\n      if (!permit) {\n        return res.status(404).json({ message: \"Permit not found\" });\n      }\n      \n      await storage.updatePermit(permitId, { \n        status: \"rejected\",\n        additionalComments: reason,\n        updatedAt: new Date()\n      });\n      \n      res.json({ message: \"Permit rejected successfully\" });\n    } catch (error) {\n      console.error(\"Error rejecting permit:\", error);\n      res.status(500).json({ message: \"Failed to reject permit\" });\n    }\n  });\n\n  // Notification routes\n  app.get(\"/api/notifications\", requireAuth, async (req, res) => {\n    try {\n      const userId = 1; // Mock user ID\n      const notifications = await storage.getUserNotifications(userId);\n      res.json(notifications);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get notifications\" });\n    }\n  });\n\n  app.get(\"/api/notifications/unread-count\", requireAuth, async (req, res) => {\n    try {\n      const userId = 1; // Mock user ID\n      const count = await storage.getUnreadNotificationCount(userId);\n      res.json({ count });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get unread notification count\" });\n    }\n  });\n\n  app.patch(\"/api/notifications/:id/read\", requireAuth, async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      await storage.markNotificationAsRead(id);\n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to mark notification as read\" });\n    }\n  });\n\n  app.patch(\"/api/notifications/read-all\", async (req, res) => {\n    try {\n      const userId = 1; // Mock user ID\n      await storage.markAllNotificationsAsRead(userId);\n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to mark all notifications as read\" });\n    }\n  });\n\n  // Authentication routes\n  app.post(\"/api/auth/login\", async (req, res) => {\n    try {\n      const { username, password } = req.body;\n      \n      const user = await storage.getUserByUsername(username);\n      if (!user) {\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n      \n      // Check if password is hashed (bcrypt) or plain text\n      const isPasswordValid = user.password.startsWith('$2b$') \n        ? await storage.verifyPassword(password, user.password)\n        : user.password === password;\n      \n      if (!isPasswordValid) {\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n      \n      // Clean up expired sessions first\n      await storage.cleanupExpiredSessions();\n      \n      // Create session with proper expiration\n      const sessionId = `session_${Date.now()}_${Math.random()}`;\n      const expiresAt = new Date(Date.now() + 24 * 60 * 60 * 1000); // 24 hours\n      \n      await storage.createSession({\n        sessionId,\n        userId: user.id,\n        expiresAt\n      });\n      \n      // Set session cookie\n      res.cookie('sessionId', sessionId, { \n        httpOnly: true, \n        secure: false, // In production, set to true with HTTPS\n        sameSite: 'lax',\n        maxAge: 24 * 60 * 60 * 1000 // 24 hours\n      });\n      \n      console.log('Created database session:', sessionId, 'for user:', user.username);\n      \n      res.json({ \n        success: true, \n        user: { \n          id: user.id, \n          username: user.username, \n          fullName: user.fullName,\n          role: user.role,\n          department: user.department\n        } \n      });\n    } catch (error) {\n      res.status(500).json({ message: \"Login failed\" });\n    }\n  });\n\n  app.post(\"/api/auth/logout\", async (req, res) => {\n    try {\n      const sessionId = req.cookies?.sessionId;\n      if (sessionId) {\n        // Get user from session before deleting it\n        const session = await storage.getSessionBySessionId(sessionId);\n        \n        // Clean up AI suggestions for this user\n        if (session) {\n          await storage.cleanupSuggestionsForUser(session.userId);\n        }\n        \n        await storage.deleteSession(sessionId);\n      }\n      res.clearCookie('sessionId');\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Logout error:\", error);\n      res.status(500).json({ message: \"Logout failed\" });\n    }\n  });\n\n  app.get(\"/api/auth/user\", async (req, res) => {\n    try {\n      const sessionId = req.cookies?.sessionId;\n      console.log('Auth check - sessionId:', sessionId);\n      \n      if (!sessionId) {\n        console.log('No session ID found');\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n      \n      const session = await storage.getSessionBySessionId(sessionId);\n      if (!session) {\n        console.log('No valid session found in database');\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n      \n      // Check if session has expired\n      if (session.expiresAt < new Date()) {\n        console.log('Session expired');\n        \n        // Clean up AI suggestions for expired session\n        await storage.cleanupSuggestionsForUser(session.userId);\n        \n        await storage.deleteSession(sessionId);\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n      \n      const user = await storage.getUser(session.userId);\n      if (!user) {\n        console.log('User not found in database');\n        await storage.deleteSession(sessionId);\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n      \n      console.log('Auth check successful for user:', user.username);\n      res.json(user);\n    } catch (error) {\n      console.error('Auth check error:', error);\n      res.status(401).json({ message: \"Not authenticated\" });\n    }\n  });\n\n  // User management routes\n  app.post(\"/api/users\", requireAuth, async (req, res) => {\n    try {\n      const { username, password, role } = req.body;\n      \n      if (!username || !password) {\n        return res.status(400).json({ message: \"Username and password are required\" });\n      }\n\n      // Check if username already exists\n      const existingUser = await storage.getUserByUsername(username);\n      if (existingUser) {\n        return res.status(400).json({ message: \"Username already exists\" });\n      }\n\n      const newUser = await storage.createUser({\n        username,\n        password,\n        role: role || \"employee\",\n        fullName: username,\n        department: \"Default\"\n      });\n\n      res.json(newUser);\n    } catch (error) {\n      console.error(\"Error creating user:\", error);\n      res.status(500).json({ message: \"Failed to create user\" });\n    }\n  });\n\n  app.patch(\"/api/users/:id\", requireAuth, async (req, res) => {\n    try {\n      const userId = parseInt(req.params.id);\n      const updates = req.body;\n      \n      const updatedUser = await storage.updateUser(userId, updates);\n      if (!updatedUser) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      \n      res.json(updatedUser);\n    } catch (error) {\n      console.error(\"Error updating user:\", error);\n      res.status(500).json({ message: \"Failed to update user\" });\n    }\n  });\n\n  app.patch(\"/api/users/:id/password\", requireAuth, async (req, res) => {\n    try {\n      const userId = parseInt(req.params.id);\n      const { password } = req.body;\n      \n      if (!password) {\n        return res.status(400).json({ message: \"Password is required\" });\n      }\n\n      const updatedUser = await storage.updateUser(userId, { password });\n      if (!updatedUser) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      \n      res.json({ message: \"Password updated successfully\" });\n    } catch (error) {\n      console.error(\"Error updating password:\", error);\n      res.status(500).json({ message: \"Failed to update password\" });\n    }\n  });\n\n  // Templates routes\n  app.get(\"/api/templates\", requireAuth, async (req, res) => {\n    try {\n      const templates = await storage.getAllTemplates();\n      res.json(templates);\n    } catch (error) {\n      console.error(\"Error fetching templates:\", error);\n      res.status(500).json({ message: \"Failed to get templates\" });\n    }\n  });\n\n  app.post(\"/api/templates\", requireAuth, async (req, res) => {\n    try {\n      console.log(\"Creating template with data:\", JSON.stringify(req.body, null, 2));\n      \n      const { name, template } = req.body;\n      const createdBy = 1; // Mock user ID\n      \n      const newTemplate = await storage.createTemplate({\n        name,\n        template,\n        createdBy\n      });\n      \n      console.log(\"Created template:\", newTemplate);\n      res.status(201).json(newTemplate);\n    } catch (error) {\n      console.error(\"Error creating template:\", error);\n      res.status(500).json({ message: \"Failed to create template\" });\n    }\n  });\n\n  // User management routes\n  app.get(\"/api/users\", requireAuth, async (req, res) => {\n    try {\n      const users = await storage.getAllUsers();\n      res.json(users);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get users\" });\n    }\n  });\n\n  app.patch(\"/api/users/:id/role\", requireAuth, async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const { role } = req.body;\n      const user = await storage.updateUserRole(id, role);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      res.json(user);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update user role\" });\n    }\n  });\n\n  // Approve permit (supervisor, safety officer, operations manager)\n  app.post(\"/api/permits/:id/approve\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const { approverRole } = req.body;\n      \n      const permit = await storage.getPermit(id);\n      if (!permit) {\n        return res.status(404).json({ message: \"Permit not found\" });\n      }\n      \n      const updates: any = {};\n      const now = new Date();\n      \n      switch (approverRole) {\n        case 'supervisor':\n          updates.supervisorApproval = true;\n          updates.supervisorApprovalDate = now;\n          break;\n        case 'safety_officer':\n          updates.safetyOfficerApproval = true;\n          updates.safetyOfficerApprovalDate = now;\n          break;\n        case 'operations_manager':\n          updates.operationsManagerApproval = true;\n          updates.operationsManagerApprovalDate = now;\n          break;\n        default:\n          return res.status(400).json({ message: \"Invalid approver role\" });\n      }\n      \n      // Check if all approvals are complete\n      const updatedPermit = { ...permit, ...updates };\n      if (updatedPermit.supervisorApproval && \n          updatedPermit.safetyOfficerApproval && \n          updatedPermit.operationsManagerApproval) {\n        updates.status = 'approved';\n      }\n      \n      const result = await storage.updatePermit(id, updates);\n      res.json(result);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to approve permit\" });\n    }\n  });\n\n  // Get all users\n  app.get(\"/api/users\", async (req, res) => {\n    try {\n      const users = await storage.getAllUsers();\n      res.json(users);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch users\" });\n    }\n  });\n\n  app.patch(\"/api/users/:id\", async (req, res) => {\n    try {\n      const userId = parseInt(req.params.id);\n      const updates = req.body;\n      \n      const updatedUser = await storage.updateUser(userId, updates);\n      if (!updatedUser) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      \n      res.json(updatedUser);\n    } catch (error) {\n      console.error(\"Error updating user:\", error);\n      res.status(500).json({ message: \"Failed to update user\" });\n    }\n  });\n\n  // AI Suggestions and Webhook routes\n  \n  // Send permit to AI for analysis\n  app.post(\"/api/permits/:id/analyze\", requireAuth, async (req, res) => {\n    try {\n      const permitId = parseInt(req.params.id);\n      const permit = await storage.getPermit(permitId);\n      \n      if (!permit) {\n        return res.status(404).json({ message: \"Permit not found\" });\n      }\n\n      const webhookConfig = await storage.getActiveWebhookConfig();\n      if (!webhookConfig) {\n        return res.status(400).json({ message: \"No active webhook configuration found\" });\n      }\n\n      // Create comprehensive permit data for analysis\n      const permitAnalysisData = {\n        // Basic permit information\n        permitId: permit.permitId,\n        internalId: permit.id,\n        type: permit.type,\n        location: permit.location,\n        description: permit.description,\n        department: permit.department,\n        riskLevel: permit.riskLevel,\n        status: permit.status,\n        \n        // Personnel information\n        requestorName: permit.requestorName,\n        contactNumber: permit.contactNumber,\n        emergencyContact: permit.emergencyContact,\n        safetyOfficer: permit.safetyOfficer,\n        departmentHead: permit.departmentHead,\n        maintenanceApprover: permit.maintenanceApprover,\n        performerName: permit.performerName,\n        \n        // Dates and timing\n        startDate: permit.startDate?.toISOString(),\n        endDate: permit.endDate?.toISOString(),\n        workStartedAt: permit.workStartedAt?.toISOString(),\n        workCompletedAt: permit.workCompletedAt?.toISOString(),\n        \n        // Complete TRBS safety assessment with all 11 categories and 48 hazards\n        trbsAssessment: formatCompleteTRBSForWebhook(permit),\n        \n        // Work execution tracking\n        performerSignature: permit.performerSignature,\n        \n        // Approval status\n        departmentHeadApproval: permit.departmentHeadApproval,\n        departmentHeadApprovalDate: permit.departmentHeadApprovalDate?.toISOString(),\n        maintenanceApproval: permit.maintenanceApproval,\n        maintenanceApprovalDate: permit.maintenanceApprovalDate?.toISOString(),\n        safetyOfficerApproval: permit.safetyOfficerApproval,\n        safetyOfficerApprovalDate: permit.safetyOfficerApprovalDate?.toISOString(),\n        \n        // Analysis metadata\n        analysisType: 'permit_improvement',\n        timestamp: new Date().toISOString(),\n        systemVersion: '1.0'\n      };\n\n      // Prepare webhook payload for POST request\n      const webhookPayload = {\n        action: 'analyze_permit',\n        permitData: permitAnalysisData\n      };\n\n      console.log('Sending permit for AI analysis:', {\n        permitId: permit.permitId,\n        internalId: permit.id,\n        webhookUrl: webhookConfig.webhookUrl,\n        dataSize: JSON.stringify(webhookPayload).length\n      });\n\n      console.log('Permit data being sent:', JSON.stringify(permitAnalysisData, null, 2));\n\n      // Send POST request to webhook with data in body\n      const response = await fetch(webhookConfig.webhookUrl, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(webhookPayload),\n        signal: AbortSignal.timeout(120000) // 2 minute timeout for AI analysis\n      });\n\n      if (!response.ok) {\n        console.error('Webhook request failed:', response.status, response.statusText);\n        throw new Error(`Webhook request failed: ${response.status}`);\n      }\n\n      console.log('Permit data sent successfully to AI analysis webhook');\n\n      res.json({ \n        message: \"Permit sent for AI analysis successfully\",\n        status: \"processing\" \n      });\n    } catch (error) {\n      console.error(\"Error sending permit for analysis:\", error);\n      console.error(\"Error details:\", {\n        message: error.message,\n        stack: error.stack,\n        permitId: req.params.id\n      });\n      res.status(500).json({ \n        message: \"Failed to send permit for analysis\",\n        error: error.message \n      });\n    }\n  });\n\n  // Test endpoint to simulate AI response\n  app.post(\"/api/webhooks/test-suggestions\", async (req, res) => {\n    try {\n      const { permitId } = req.body;\n      \n      if (!permitId) {\n        return res.status(400).json({ message: \"permitId is required\" });\n      }\n\n      // Simulate AI analysis response\n      const mockAiResponse = {\n        permitId: permitId,\n        analysisComplete: true,\n        riskAssessment: {\n          overallRisk: \"medium\",\n          riskFactors: [\n            \"Unvollständige Risikobeurteilung\",\n            \"Fehlende Schutzmaßnahmen\",\n            \"Keine Sicherheitsbeauftragter zugewiesen\"\n          ],\n          complianceScore: 65\n        },\n        suggestions: [\n          {\n            type: \"hazard_identification\",\n            priority: \"high\",\n            fieldName: \"identifiedHazards\",\n            originalValue: \"\",\n            suggestedValue: \"Chemische Dämpfe, Sauerstoffmangel, Explosionsgefahr, Sturz in Behälter, heiße Oberflächen, toxische Substanzen\",\n            reasoning: \"Vollständige Gefahrenidentifikation für Tankarbeiten basierend auf TRBS 2152-2 und DGUV Regel 113-004\"\n          },\n          {\n            type: \"protective_measures\",\n            priority: \"high\", \n            fieldName: \"completedMeasures\",\n            originalValue: [],\n            suggestedValue: [\"atmospheric_monitoring\", \"ventilation\", \"ppe_chemical\", \"emergency_procedures\", \"confined_space_entry\", \"gas_detector\"],\n            reasoning: \"Standardschutzmaßnahmen für Arbeiten in Behältern nach TRBS 2152 - Atmosphärenüberwachung, Belüftung und PSA sind zwingend erforderlich\"\n          },\n          {\n            type: \"trbs_hazard_mapping\",\n            priority: \"high\",\n            fieldName: \"selectedHazards\",\n            originalValue: [],\n            suggestedValue: [\"5-0\", \"5-1\", \"4-0\", \"7-1\"],\n            reasoning: \"Zuordnung zu TRBS-Gefährdungskategorien: Gefährdungen durch Gefahrstoffe (5-0, 5-1), Brand-/Explosionsgefährdungen (4-0), und besondere physikalische Einwirkungen (7-1)\"\n          },\n          {\n            type: \"safety_notes_enhancement\",\n            priority: \"medium\",\n            fieldName: \"additionalComments\",\n            originalValue: \"\",\n            suggestedValue: \"Kontinuierliche Atmosphärenüberwachung während der gesamten Arbeitszeit. Rettungsmannschaft in Bereitschaft. Kommunikationsverbindung nach außen sicherstellen. Arbeitsbereich vor Betreten freimessen.\",\n            reasoning: \"Spezifische Sicherheitsanweisungen für Behälterarbeiten zur Gewährleistung der Personensicherheit\"\n          },\n          {\n            type: \"hazard_notes_structure\",\n            priority: \"medium\",\n            fieldName: \"hazardNotes\",\n            originalValue: \"{}\",\n            suggestedValue: \"{\\\"5-0\\\": \\\"Exposition gegenüber chemischen Dämpfen - kontinuierliche Überwachung erforderlich\\\", \\\"5-1\\\": \\\"Sauerstoffmangel durch Verdrängung - Atemschutz obligatorisch\\\", \\\"4-0\\\": \\\"Explosionsgefahr durch Gasansammlung - Ex-Schutz beachten\\\", \\\"7-1\\\": \\\"Absturzgefahr bei Behältereinstieg - Sicherungsmaßnahmen\\\"}\",\n            reasoning: \"Strukturierte Dokumentation der Gefährdungsbeurteilung mit spezifischen Schutzmaßnahmen je Gefährdungskategorie\"\n          }\n        ],\n        recommendations: {\n          immediate_actions: [\n            \"Sofortige Atmosphärenprüfung vor Betreten des Behälters durchführen\",\n            \"Persönliche Schutzausrüstung (Atemschutz, Schutzanzug) anlegen\",\n            \"Notfallausrüstung und Erste-Hilfe-Material bereitstellen\"\n          ],\n          before_work_starts: [\n            \"Behälter ordnungsgemäß entleeren und reinigen\",\n            \"Belüftungssystem installieren und Funktionsprüfung durchführen\",\n            \"Kommunikationsverbindung nach außen etablieren\",\n            \"Rettungsmannschaft in Bereitschaft versetzen\"\n          ],\n          compliance_requirements: [\n            \"TRBS 2152-2: Vermeidung oder Schutz vor Gefährdungen in Behältern und engen Räumen\",\n            \"TRGS 900: Arbeitsplatzgrenzwerte - kontinuierliche Überwachung erforderlich\",\n            \"DGUV Regel 113-004: Behälter, Silos und enge Räume - Sicherheitskonzept beachten\"\n          ]\n        }\n      };\n\n      // Forward to actual suggestions endpoint\n      const response = await fetch(`${req.protocol}://${req.get('host')}/api/webhooks/suggestions`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(mockAiResponse)\n      });\n\n      const result = await response.json();\n      res.json({ message: \"Test AI analysis sent\", result });\n    } catch (error) {\n      console.error(\"Error in test suggestions:\", error);\n      res.status(500).json({ message: \"Failed to send test suggestions\" });\n    }\n  });\n\n  // Preview AI analysis for form data (Create Modal)\n  app.post(\"/api/analyze/preview\", requireAuth, async (req, res) => {\n    try {\n      console.log('Preview AI analysis request:', req.body);\n      \n      const {\n        type,\n        description,\n        location,\n        department,\n        selectedHazards,\n        hazardNotes,\n        identifiedHazards,\n        immediateActions,\n        beforeWorkStarts,\n        complianceNotes,\n        overallRisk\n      } = req.body;\n\n      // Create mock analysis response based on form data\n      const mockAnalysis = {\n        suggestions: Math.floor(Math.random() * 8) + 3, // 3-10 suggestions\n        riskLevel: overallRisk || 'medium',\n        improvements: [\n          'Gefährdungsbeurteilung vervollständigen',\n          'Zusätzliche Sicherheitsmaßnahmen erforderlich',\n          'Dokumentation nach TRBS-Standards ergänzen'\n        ],\n        message: `Analyse für ${type}-Genehmigung abgeschlossen`\n      };\n\n      res.json(mockAnalysis);\n    } catch (error) {\n      console.error(\"Error in preview analysis:\", error);\n      res.status(500).json({ message: \"Failed to analyze form data\" });\n    }\n  });\n\n  // Receive AI suggestions from webhook - supports both formats\n  app.post(\"/api/webhooks/suggestions\", async (req, res) => {\n    try {\n      console.log('Received AI analysis response:', JSON.stringify(req.body, null, 2));\n      \n      const { \n        permitId, \n        analysisComplete, \n        suggestions, \n        riskAssessment, \n        recommendations,\n        compliance_notes,\n        error,\n        improvedPermit // New: Complete permit object with AI improvements\n      } = req.body;\n      \n      if (!permitId) {\n        return res.status(400).json({ message: \"permitId is required\" });\n      }\n\n      // Handle analysis errors\n      if (!analysisComplete && error) {\n        console.error('AI analysis failed for permit:', permitId, error);\n        return res.status(200).json({ \n          message: \"Analysis error received\",\n          error: error \n        });\n      }\n\n      // Find permit by permitId (string)\n      const permit = await storage.getPermitByPermitId(permitId);\n      if (!permit) {\n        console.error('Permit not found:', permitId);\n        return res.status(404).json({ message: \"Permit not found\" });\n      }\n\n      const createdSuggestions = [];\n\n      // NEW: Process complete improved permit object if provided\n      if (improvedPermit) {\n        console.log(`Processing complete improved permit for ${permitId}`);\n        console.log('Original permit data sample:', {\n          description: permit.description,\n          emergencyContact: permit.emergencyContact,\n          performerName: permit.performerName,\n          selectedHazards: permit.selectedHazards\n        });\n        console.log('Improved permit selectedHazards:', improvedPermit.selectedHazards);\n        console.log('Improved permit hazardNotes type:', typeof improvedPermit.hazardNotes);\n        console.log('Improved permit hazardNotes value:', improvedPermit.hazardNotes);\n        \n        // PRIORITY: Check for hazardNotes first before processing other fields\n        if (improvedPermit.hazardNotes && typeof improvedPermit.hazardNotes === 'object') {\n          console.log('Processing hazardNotes as structured object:', improvedPermit.hazardNotes);\n          \n          const improvedNotesStr = JSON.stringify(improvedPermit.hazardNotes);\n          const originalNotesStr = permit.hazardNotes || '{}';\n          \n          console.log(`HazardNotes comparison: Original=\"${originalNotesStr}\" vs Improved=\"${improvedNotesStr}\"`);\n          \n          if (originalNotesStr !== improvedNotesStr) {\n            console.log(`Creating hazardNotes suggestion with specific notes for each hazard`);\n            const suggestion = await storage.createAiSuggestion({\n              permitId: permit.id,\n              suggestionType: 'hazard_notes_update',\n              fieldName: 'hazardNotes', // Direct field mapping\n              originalValue: originalNotesStr,\n              suggestedValue: improvedNotesStr,\n              reasoning: 'Spezifische KI-generierte Notizen für identifizierte Gefährdungen',\n              priority: 'high',\n              status: 'pending'\n            });\n            createdSuggestions.push(suggestion);\n          }\n        } else {\n          console.log('HazardNotes check failed: exists=', !!improvedPermit.hazardNotes, 'type=', typeof improvedPermit.hazardNotes);\n        }\n\n        // Compare original vs improved permit and create suggestions for differences\n        // Backend field names to Frontend field names mapping\n        const fieldMappings = {\n          // Basic fields - corrected mappings\n          type: 'type',\n          location: 'location', \n          description: 'workDescription',  // KI: description → Frontend: workDescription\n          department: 'department',\n          requestorName: 'requestedBy',    // KI: requestorName → Frontend: requestedBy\n          contactNumber: 'contactNumber',   // Keep as is - will be handled in form\n          emergencyContact: 'emergencyContact',\n          performerName: 'performerName',\n          \n          // Safety fields - KORRIGIERTE FRONTEND-BACKEND MAPPINGS\n          identifiedHazards: 'identifiedHazards',\n          additionalComments: 'additionalComments',\n          immediateActions: 'immediateActions',\n          beforeWorkStarts: 'preventiveMeasures',  // KORREKTUR: beforeWorkStarts → Frontend: preventiveMeasures\n          complianceNotes: 'complianceNotes',\n          overallRisk: 'overallRisk',\n          \n          // TRBS fields - special handling required\n          selectedHazards: 'selectedHazards',\n          hazardNotes: 'hazardNotes'\n        };\n\n        // Compare each field and create suggestions for differences\n        for (const [backendFieldName, frontendFieldName] of Object.entries(fieldMappings)) {\n          const originalValue = permit[backendFieldName as keyof typeof permit];\n          const improvedValue = improvedPermit[backendFieldName];\n          \n          // Handle different data types\n          let originalStr = '';\n          let improvedStr = '';\n          \n          if (backendFieldName === 'selectedHazards') {\n            // Handle selectedHazards with proper processing of complex objects\n            console.log(`selectedHazards check: isArray=${Array.isArray(improvedValue)}, length=${improvedValue?.length}, firstItemType=${typeof improvedValue?.[0]}, hasHazardId=${!!improvedValue?.[0]?.hazardId}`);\n            \n            if (Array.isArray(improvedValue) && improvedValue.length > 0 && \n                typeof improvedValue[0] === 'object' && improvedValue[0].hazardId) {\n              // New format: array of objects with hazardId, description, notes\n              // SONDERFALL: Komplettaustausch - nur ausgewählte Hazards übernehmen\n              const selectedIds = improvedValue.filter(h => h.isSelected).map(h => h.hazardId);\n              const hazardNotesObj = {};\n              improvedValue.forEach(h => {\n                if (h.isSelected && h.notes) {\n                  hazardNotesObj[h.hazardId] = h.notes;\n                }\n              });\n              \n              // Create separate suggestions for selectedHazards (IDs only) and hazardNotes\n              originalStr = Array.isArray(originalValue) ? JSON.stringify(originalValue) : '[]';\n              improvedStr = JSON.stringify(selectedIds);\n              \n              console.log(`Processing selectedHazards: Original IDs: ${originalStr}, Improved IDs: ${improvedStr}`);\n              \n              // Also create a suggestion for hazardNotes if there are notes\n              if (Object.keys(hazardNotesObj).length > 0) {\n                const originalNotes = permit.hazardNotes || '{}';\n                const improvedNotes = JSON.stringify(hazardNotesObj);\n                \n                console.log(`Processing hazardNotes: Original: ${originalNotes}, Improved: ${improvedNotes}`);\n                \n                if (originalNotes !== improvedNotes) {\n                  const notesSuggestion = await storage.createAiSuggestion({\n                    permitId: permit.id,\n                    suggestionType: 'hazard_replacement',  // Special type for complete replacement\n                    fieldName: 'hazardNotes',\n                    originalValue: originalNotes,\n                    suggestedValue: improvedNotes,\n                    reasoning: 'KI-Verbesserung für Gefährdungsnotizen aus detaillierter Analyse',\n                    priority: 'medium',\n                    status: 'pending'\n                  });\n                  createdSuggestions.push(notesSuggestion);\n                  console.log(`Created hazardNotes suggestion with ${Object.keys(hazardNotesObj).length} notes`);\n                }\n              }\n            } else {\n              // Legacy format: simple array of IDs\n              originalStr = Array.isArray(originalValue) ? JSON.stringify(originalValue) : '[]';\n              improvedStr = Array.isArray(improvedValue) ? JSON.stringify(improvedValue) : '[]';\n            }\n          } else if (backendFieldName === 'hazardNotes') {\n            // Handle hazardNotes as structured object with specific notes for each hazard\n            if (typeof improvedValue === 'object' && improvedValue !== null) {\n              console.log('Processing hazardNotes as structured object:', improvedValue);\n              \n              // Convert improved hazard notes to JSON string for comparison\n              const improvedNotesStr = JSON.stringify(improvedValue);\n              const originalNotesStr = permit.hazardNotes || '{}';\n              \n              console.log(`HazardNotes comparison: Original=\"${originalNotesStr}\" vs Improved=\"${improvedNotesStr}\"`);\n              \n              if (originalNotesStr !== improvedNotesStr) {\n                console.log(`Creating hazardNotes suggestion with specific notes for each hazard`);\n                const suggestion = await storage.createAiSuggestion({\n                  permitId: permit.id,\n                  suggestionType: 'hazard_notes_update',\n                  fieldName: 'hazardNotes', // Direct field mapping\n                  originalValue: originalNotesStr,\n                  suggestedValue: improvedNotesStr,\n                  reasoning: 'Spezifische KI-generierte Notizen für identifizierte Gefährdungen',\n                  priority: 'high',\n                  status: 'pending'\n                });\n                createdSuggestions.push(suggestion);\n              }\n              continue; // Skip standard processing\n            }\n          } else {\n            originalStr = String(originalValue || '');\n            improvedStr = String(improvedValue || '');\n          }\n          \n          console.log(`Field ${backendFieldName}: \"${originalStr}\" vs \"${improvedStr}\" (different: ${originalStr !== improvedStr})`);\n          \n          // Create suggestion if values differ\n          if (originalStr !== improvedStr && improvedStr.trim() !== '') {\n            console.log(`Creating suggestion for ${backendFieldName}: ${originalStr} -> ${improvedStr}`);\n            const suggestion = await storage.createAiSuggestion({\n              permitId: permit.id,\n              suggestionType: backendFieldName === 'selectedHazards' ? 'hazard_replacement' : 'ai_improvement',\n              fieldName: frontendFieldName, // Use corrected frontend field name for proper mapping\n              originalValue: originalStr,\n              suggestedValue: improvedStr,\n              reasoning: `KI-Verbesserung für ${frontendFieldName}`,\n              priority: ['emergencyContact', 'selectedHazards', 'immediateActions'].includes(backendFieldName) ? 'high' : 'medium',\n              status: 'pending'\n            });\n            createdSuggestions.push(suggestion);\n          }\n        }\n        \n        console.log(`Created ${createdSuggestions.length} field-based suggestions from improved permit`);\n      }\n\n      // LEGACY: Process individual suggestions array (backwards compatibility)\n      if (suggestions && Array.isArray(suggestions)) {\n        console.log(`Processing ${suggestions.length} individual AI suggestions for permit ${permitId}`);\n\n        for (const suggestion of suggestions) {\n          const aiSuggestion = await storage.createAiSuggestion({\n            permitId: permit.id,\n            suggestionType: suggestion.type || 'improvement',\n            fieldName: suggestion.fieldName || null,\n            originalValue: suggestion.originalValue || null,\n            suggestedValue: suggestion.suggestedValue || suggestion.title,\n            reasoning: suggestion.reasoning || suggestion.impact || 'AI analysis recommendation',\n            priority: suggestion.priority || 'medium',\n            status: 'pending'\n          });\n          createdSuggestions.push(aiSuggestion);\n        }\n      }\n\n      // Log additional analysis data for monitoring\n      if (riskAssessment) {\n        console.log('Risk assessment for permit', permitId, ':', {\n          overallRisk: riskAssessment.overallRisk,\n          complianceScore: riskAssessment.complianceScore,\n          riskFactors: riskAssessment.riskFactors?.length || 0\n        });\n      }\n\n      // LEGACY: Create safety assessment suggestions from recommendations\n      if (recommendations) {\n        console.log('Creating safety assessment suggestions for permit', permitId);\n        \n        if (recommendations.immediate_actions) {\n          const immediateActionsText = Array.isArray(recommendations.immediate_actions) \n            ? recommendations.immediate_actions.join('\\n• ')\n            : recommendations.immediate_actions;\n          \n          const suggestion = await storage.createAiSuggestion({\n            permitId: permit.id,\n            suggestionType: 'safety_assessment',\n            fieldName: 'immediateActions',\n            originalValue: permit.immediateActions || '',\n            suggestedValue: '• ' + immediateActionsText,\n            reasoning: 'AI-generierte Sofortmaßnahmen basierend auf Risikoanalyse',\n            priority: 'high',\n            status: 'pending'\n          });\n          createdSuggestions.push(suggestion);\n        }\n\n        if (recommendations.before_work_starts) {\n          const beforeWorkText = Array.isArray(recommendations.before_work_starts)\n            ? recommendations.before_work_starts.join('\\n• ')\n            : recommendations.before_work_starts;\n          \n          const suggestion = await storage.createAiSuggestion({\n            permitId: permit.id,\n            suggestionType: 'safety_assessment',\n            fieldName: 'beforeWorkStarts',\n            originalValue: permit.beforeWorkStarts || '',\n            suggestedValue: '• ' + beforeWorkText,\n            reasoning: 'AI-generierte Vorbereitungsmaßnahmen basierend auf Arbeitsanalyse',\n            priority: 'high',\n            status: 'pending'\n          });\n          createdSuggestions.push(suggestion);\n        }\n\n        if (recommendations.compliance_requirements || compliance_notes) {\n          const complianceText = recommendations.compliance_requirements || compliance_notes;\n          const complianceFormatted = Array.isArray(complianceText)\n            ? complianceText.join('\\n• ')\n            : complianceText;\n          \n          const suggestion = await storage.createAiSuggestion({\n            permitId: permit.id,\n            suggestionType: 'safety_assessment',\n            fieldName: 'complianceNotes',\n            originalValue: permit.complianceNotes || '',\n            suggestedValue: typeof complianceFormatted === 'string' ? complianceFormatted : '• ' + complianceFormatted,\n            reasoning: 'AI-generierte Compliance-Hinweise basierend auf regulatorischen Anforderungen',\n            priority: 'medium',\n            status: 'pending'\n          });\n          createdSuggestions.push(suggestion);\n        }\n      }\n\n      res.json({ \n        message: \"AI suggestions received successfully\",\n        suggestionsCount: createdSuggestions.length,\n        processingMethod: improvedPermit ? 'complete_permit_comparison' : 'individual_suggestions'\n      });\n    } catch (error) {\n      console.error(\"Error receiving AI suggestions:\", error);\n      res.status(500).json({ message: \"Failed to process AI suggestions\" });\n    }\n  });\n\n  // Get suggestions for a permit\n  app.get(\"/api/permits/:id/suggestions\", requireAuth, async (req, res) => {\n    try {\n      const permitId = parseInt(req.params.id);\n      const suggestions = await storage.getPermitSuggestions(permitId);\n      res.json(suggestions);\n    } catch (error) {\n      console.error(\"Error fetching suggestions:\", error);\n      res.status(500).json({ message: \"Failed to fetch suggestions\" });\n    }\n  });\n\n  // Apply a suggestion\n  app.get(\"/api/suggestions/:id/apply\", requireAuth, async (req, res) => {\n    try {\n      const suggestionId = parseInt(req.params.id);\n      console.log(`Applying suggestion ${suggestionId} via GET`);\n      \n      if (isNaN(suggestionId)) {\n        console.error(\"Invalid suggestion ID:\", req.params.id);\n        const redirectUrl = req.query.redirect || '/';\n        return res.redirect(`${redirectUrl}?error=invalid_suggestion_id`);\n      }\n      \n      const success = await storage.applySuggestion(suggestionId);\n      console.log(`Apply suggestion result:`, success);\n      \n      if (!success) {\n        console.error(`Failed to apply suggestion ${suggestionId}`);\n        const redirectUrl = req.query.redirect || '/';\n        return res.redirect(`${redirectUrl}?error=suggestion_not_found`);\n      }\n\n      console.log(`Successfully applied suggestion ${suggestionId}`);\n      const redirectUrl = req.query.redirect || '/';\n      res.redirect(`${redirectUrl}?success=suggestion_applied`);\n    } catch (error) {\n      console.error(\"Error applying suggestion:\", error);\n      const redirectUrl = req.query.redirect || '/';\n      res.redirect(`${redirectUrl}?error=application_failed`);\n    }\n  });\n\n  app.post(\"/api/suggestions/:id/apply\", requireAuth, async (req, res) => {\n    try {\n      const suggestionId = parseInt(req.params.id);\n      console.log(`Applying suggestion ${suggestionId}`);\n      \n      if (isNaN(suggestionId)) {\n        console.error(\"Invalid suggestion ID:\", req.params.id);\n        return res.status(400).json({ message: \"Invalid suggestion ID\" });\n      }\n      \n      const success = await storage.applySuggestion(suggestionId);\n      console.log(`Apply suggestion result:`, success);\n      \n      if (!success) {\n        console.error(`Failed to apply suggestion ${suggestionId}`);\n        return res.status(404).json({ message: \"Suggestion not found or could not be applied\" });\n      }\n\n      console.log(`Successfully applied suggestion ${suggestionId}`);\n      \n      // Handle form submissions with redirect\n      if (req.body.redirect) {\n        return res.redirect(req.body.redirect + '?success=suggestion_applied');\n      }\n      \n      res.json({ \n        message: \"Suggestion applied successfully\",\n        success: true \n      });\n    } catch (error) {\n      console.error(\"Error applying suggestion:\", error);\n      const errorMessage = error instanceof Error ? error.message : String(error);\n      const errorStack = error instanceof Error ? error.stack : undefined;\n      console.error(\"Error details:\", {\n        message: errorMessage,\n        stack: errorStack,\n        suggestionId: req.params.id\n      });\n      res.status(500).json({ \n        message: \"Failed to apply suggestion\",\n        error: errorMessage || \"Unknown error\"\n      });\n    }\n  });\n\n  // Bulk apply all suggestions for a permit (GET for navigation)\n  app.get(\"/api/permits/:id/suggestions/apply-all\", requireAuth, async (req, res) => {\n    try {\n      const permitId = parseInt(req.params.id);\n      console.log(`Applying all suggestions for permit ${permitId} via GET`);\n      \n      if (isNaN(permitId)) {\n        console.error(\"Invalid permit ID:\", req.params.id);\n        const redirectUrl = req.query.redirect || '/';\n        return res.redirect(`${redirectUrl}?error=invalid_permit_id`);\n      }\n      \n      const appliedCount = await storage.applyAllSuggestions(permitId);\n      console.log(`Applied ${appliedCount} suggestions for permit ${permitId}`);\n      \n      const redirectUrl = req.query.redirect || '/';\n      res.redirect(`${redirectUrl}?success=all_suggestions_applied&count=${appliedCount}`);\n    } catch (error) {\n      console.error(\"Error applying all suggestions:\", error);\n      const redirectUrl = req.query.redirect || '/';\n      res.redirect(`${redirectUrl}?error=apply_all_failed`);\n    }\n  });\n\n  // Bulk apply all suggestions for a permit (POST for API calls)\n  app.post(\"/api/permits/:id/suggestions/apply-all\", requireAuth, async (req, res) => {\n    try {\n      const permitId = parseInt(req.params.id);\n      console.log(`Applying all suggestions for permit ${permitId}`);\n      \n      if (isNaN(permitId)) {\n        console.error(\"Invalid permit ID:\", req.params.id);\n        return res.status(400).json({ message: \"Invalid permit ID\" });\n      }\n      \n      const appliedCount = await storage.applyAllSuggestions(permitId);\n      console.log(`Applied ${appliedCount} suggestions for permit ${permitId}`);\n      \n      res.json({ \n        message: `${appliedCount} Vorschläge wurden erfolgreich übernommen`,\n        appliedCount,\n        success: true\n      });\n    } catch (error) {\n      console.error(\"Error applying all suggestions:\", error);\n      const errorMessage = error instanceof Error ? error.message : String(error);\n      const errorStack = error instanceof Error ? error.stack : undefined;\n      console.error(\"Error details:\", {\n        message: errorMessage,\n        stack: errorStack,\n        permitId: req.params.id\n      });\n      res.status(500).json({ \n        message: \"Failed to apply suggestions\",\n        error: errorMessage || \"Unknown error\"\n      });\n    }\n  });\n\n  // Bulk reject all suggestions for a permit\n  app.post(\"/api/permits/:id/suggestions/reject-all\", requireAuth, async (req, res) => {\n    try {\n      const permitId = parseInt(req.params.id);\n      const rejectedCount = await storage.rejectAllSuggestions(permitId);\n      \n      res.json({ \n        message: `${rejectedCount} Vorschläge wurden abgelehnt`,\n        rejectedCount \n      });\n    } catch (error) {\n      console.error(\"Error rejecting all suggestions:\", error);\n      res.status(500).json({ message: \"Failed to reject suggestions\" });\n    }\n  });\n\n  // Bulk delete all suggestions for a permit\n  app.delete(\"/api/permits/:id/suggestions\", requireAuth, async (req, res) => {\n    try {\n      const permitId = parseInt(req.params.id);\n      const deletedCount = await storage.deleteAllSuggestions(permitId);\n      \n      res.json({ \n        message: `${deletedCount} Vorschläge wurden gelöscht`,\n        deletedCount \n      });\n    } catch (error) {\n      console.error(\"Error deleting all suggestions:\", error);\n      res.status(500).json({ message: \"Failed to delete suggestions\" });\n    }\n  });\n\n  // Update suggestion status\n  app.patch(\"/api/suggestions/:id/status\", requireAuth, async (req, res) => {\n    try {\n      const suggestionId = parseInt(req.params.id);\n      const { status } = req.body;\n      \n      if (!['pending', 'accepted', 'rejected'].includes(status)) {\n        return res.status(400).json({ message: \"Invalid status\" });\n      }\n\n      const suggestion = await storage.updateSuggestionStatus(suggestionId, status);\n      if (!suggestion) {\n        return res.status(404).json({ message: \"Suggestion not found\" });\n      }\n\n      res.json(suggestion);\n    } catch (error) {\n      console.error(\"Error updating suggestion status:\", error);\n      res.status(500).json({ message: \"Failed to update suggestion status\" });\n    }\n  });\n\n  // Webhook configuration routes\n  app.get(\"/api/webhook-configs\", requireAuth, async (req, res) => {\n    try {\n      const configs = await storage.getAllWebhookConfigs();\n      res.json(configs);\n    } catch (error) {\n      console.error(\"Error fetching webhook configs:\", error);\n      res.status(500).json({ message: \"Failed to fetch webhook configurations\" });\n    }\n  });\n\n  app.post(\"/api/webhook-configs\", requireAuth, async (req, res) => {\n    try {\n      const { name, webhookUrl, isActive } = req.body;\n      \n      if (!name || !webhookUrl) {\n        return res.status(400).json({ message: \"Name and webhook URL are required\" });\n      }\n\n      // If setting as active, deactivate others\n      if (isActive) {\n        const existingConfigs = await storage.getAllWebhookConfigs();\n        for (const config of existingConfigs) {\n          if (config.isActive) {\n            await storage.updateWebhookConfig(config.id, { isActive: false });\n          }\n        }\n      }\n\n      const config = await storage.createWebhookConfig({\n        name,\n        webhookUrl,\n        isActive: isActive || false\n      });\n\n      res.status(201).json(config);\n    } catch (error) {\n      console.error(\"Error creating webhook config:\", error);\n      res.status(500).json({ message: \"Failed to create webhook configuration\" });\n    }\n  });\n\n  app.patch(\"/api/webhook-configs/:id\", requireAuth, async (req, res) => {\n    try {\n      const configId = parseInt(req.params.id);\n      const updates = req.body;\n\n      // If setting as active, deactivate others\n      if (updates.isActive) {\n        const existingConfigs = await storage.getAllWebhookConfigs();\n        for (const config of existingConfigs) {\n          if (config.isActive && config.id !== configId) {\n            await storage.updateWebhookConfig(config.id, { isActive: false });\n          }\n        }\n      }\n\n      const config = await storage.updateWebhookConfig(configId, updates);\n      if (!config) {\n        return res.status(404).json({ message: \"Webhook configuration not found\" });\n      }\n\n      res.json(config);\n    } catch (error) {\n      console.error(\"Error updating webhook config:\", error);\n      res.status(500).json({ message: \"Failed to update webhook configuration\" });\n    }\n  });\n\n  app.delete(\"/api/webhook-configs/:id\", requireAuth, async (req, res) => {\n    try {\n      const configId = parseInt(req.params.id);\n      const success = await storage.deleteWebhookConfig(configId);\n      \n      if (!success) {\n        return res.status(404).json({ message: \"Webhook configuration not found\" });\n      }\n\n      res.json({ message: \"Webhook configuration deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting webhook config:\", error);\n      res.status(500).json({ message: \"Failed to delete webhook configuration\" });\n    }\n  });\n\n  app.post(\"/api/webhook-configs/:id/test\", async (req, res) => {\n    try {\n      const configId = parseInt(req.params.id);\n      const success = await storage.testWebhookConnection(configId);\n      \n      res.json({ \n        success,\n        message: success ? \"Connection test successful\" : \"Connection test failed\"\n      });\n    } catch (error) {\n      console.error(\"Error testing webhook connection:\", error);\n      res.status(500).json({ message: \"Failed to test webhook connection\" });\n    }\n  });\n\n  // Work Location routes\n  app.get(\"/api/work-locations\", async (req, res) => {\n    try {\n      const locations = await storage.getAllWorkLocations();\n      res.json(locations);\n    } catch (error) {\n      console.error(\"Error fetching work locations:\", error);\n      res.status(500).json({ message: \"Failed to fetch work locations\" });\n    }\n  });\n\n  app.get(\"/api/work-locations/active\", requireAuth, async (req, res) => {\n    try {\n      const locations = await storage.getActiveWorkLocations();\n      res.json(locations);\n    } catch (error) {\n      console.error(\"Error fetching active work locations:\", error);\n      res.status(500).json({ message: \"Failed to fetch active work locations\" });\n    }\n  });\n\n  app.post(\"/api/work-locations\", requireAuth, async (req, res) => {\n    try {\n      const { name, description, building, area, isActive } = req.body;\n      \n      if (!name) {\n        return res.status(400).json({ message: \"Name is required\" });\n      }\n\n      const location = await storage.createWorkLocation({\n        name,\n        description,\n        building,\n        area,\n        isActive: isActive ?? true\n      });\n      \n      res.status(201).json(location);\n    } catch (error) {\n      console.error(\"Error creating work location:\", error);\n      res.status(500).json({ message: \"Failed to create work location\" });\n    }\n  });\n\n  app.patch(\"/api/work-locations/:id\", requireAuth, async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const { name, description, building, area, isActive } = req.body;\n      \n      const location = await storage.updateWorkLocation(id, {\n        name,\n        description,\n        building,\n        area,\n        isActive\n      });\n      \n      if (!location) {\n        return res.status(404).json({ message: \"Work location not found\" });\n      }\n      \n      res.json(location);\n    } catch (error) {\n      console.error(\"Error updating work location:\", error);\n      res.status(500).json({ message: \"Failed to update work location\" });\n    }\n  });\n\n  app.delete(\"/api/work-locations/:id\", requireAuth, async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const success = await storage.deleteWorkLocation(id);\n      \n      if (!success) {\n        return res.status(404).json({ message: \"Work location not found\" });\n      }\n      \n      res.json({ message: \"Work location deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting work location:\", error);\n      res.status(500).json({ message: \"Failed to delete work location\" });\n    }\n  });\n\n  // User role-based routes for dropdowns\n  app.get(\"/api/users/department-heads\", requireAuth, async (req, res) => {\n    try {\n      const users = await storage.getDepartmentHeads();\n      res.json(users);\n    } catch (error) {\n      console.error(\"Error fetching department heads:\", error);\n      res.status(500).json({ message: \"Failed to fetch department heads\" });\n    }\n  });\n\n  app.get(\"/api/users/safety-officers\", requireAuth, async (req, res) => {\n    try {\n      const users = await storage.getSafetyOfficers();\n      res.json(users);\n    } catch (error) {\n      console.error(\"Error fetching safety officers:\", error);\n      res.status(500).json({ message: \"Failed to fetch safety officers\" });\n    }\n  });\n\n  app.get(\"/api/users/maintenance-approvers\", requireAuth, async (req, res) => {\n    try {\n      const users = await storage.getMaintenanceApprovers();\n      res.json(users);\n    } catch (error) {\n      console.error(\"Error fetching maintenance approvers:\", error);\n      res.status(500).json({ message: \"Failed to fetch maintenance approvers\" });\n    }\n  });\n\n  app.get(\"/api/users/by-role/:role\", requireAuth, async (req, res) => {\n    try {\n      const role = req.params.role;\n      const users = await storage.getUsersByRole(role);\n      res.json(users);\n    } catch (error) {\n      console.error(\"Error fetching users by role:\", error);\n      res.status(500).json({ message: \"Failed to fetch users by role\" });\n    }\n  });\n\n  // Permit Attachment routes\n  app.get(\"/api/permits/:id/attachments\", requireAuth, async (req, res) => {\n    try {\n      const permitId = parseInt(req.params.id);\n      const attachments = await storage.getPermitAttachments(permitId);\n      res.json(attachments);\n    } catch (error) {\n      console.error(\"Error fetching attachments:\", error);\n      res.status(500).json({ message: \"Failed to fetch attachments\" });\n    }\n  });\n\n  app.post(\"/api/permits/:id/attachments\", requireAuth, upload.single('file'), async (req, res) => {\n    try {\n      const permitId = parseInt(req.params.id);\n      \n      if (isNaN(permitId)) {\n        return res.status(400).json({ message: \"Invalid permit ID\" });\n      }\n      \n      if (!req.file) {\n        return res.status(400).json({ message: \"No file uploaded\" });\n      }\n\n      // Verify permit exists\n      const permit = await storage.getPermit(permitId);\n      if (!permit) {\n        return res.status(404).json({ message: \"Permit not found\" });\n      }\n\n      console.log(`Uploading attachment for permit ${permitId}: ${req.file.originalname}`);\n\n      // Determine file type based on mime type\n      let fileType = 'other';\n      if (req.file.mimetype.startsWith('image/')) {\n        fileType = 'image';\n      } else if (req.file.mimetype === 'application/pdf' || \n                 req.file.mimetype.includes('document') ||\n                 req.file.mimetype.includes('text') ||\n                 req.file.mimetype.includes('spreadsheet')) {\n        fileType = 'document';\n      }\n\n      const attachmentData = {\n        permitId,\n        fileName: req.file.filename,\n        originalName: req.file.originalname,\n        fileType,\n        mimeType: req.file.mimetype,\n        fileSize: req.file.size,\n        filePath: req.file.path,\n        uploadedBy: 1, // TODO: Get from session\n        description: req.body.description || null\n      };\n\n      const attachment = await storage.createPermitAttachment(attachmentData);\n      console.log(`Attachment created successfully for permit ${permitId}:`, attachment.id);\n      res.status(201).json(attachment);\n    } catch (error) {\n      console.error(\"Error uploading attachment:\", error);\n      res.status(500).json({ message: \"Failed to upload attachment\" });\n    }\n  });\n\n  app.get(\"/api/attachments/:id/download\", requireAuth, async (req, res) => {\n    try {\n      const attachmentId = parseInt(req.params.id);\n      const attachment = await storage.getAttachmentById(attachmentId);\n      \n      if (!attachment) {\n        return res.status(404).json({ message: \"Attachment not found\" });\n      }\n\n      const filePath = attachment.filePath;\n      if (!fs.existsSync(filePath)) {\n        return res.status(404).json({ message: \"File not found on disk\" });\n      }\n\n      res.setHeader('Content-Type', attachment.mimeType);\n      res.setHeader('Content-Disposition', `attachment; filename=\"${attachment.originalName}\"`);\n      res.sendFile(path.resolve(filePath));\n    } catch (error) {\n      console.error(\"Error downloading attachment:\", error);\n      res.status(500).json({ message: \"Failed to download attachment\" });\n    }\n  });\n\n  app.delete(\"/api/attachments/:id\", requireAuth, async (req, res) => {\n    try {\n      const attachmentId = parseInt(req.params.id);\n      const attachment = await storage.getAttachmentById(attachmentId);\n      \n      if (!attachment) {\n        return res.status(404).json({ message: \"Attachment not found\" });\n      }\n\n      // Delete file from disk\n      if (fs.existsSync(attachment.filePath)) {\n        fs.unlinkSync(attachment.filePath);\n      }\n\n      // Delete from database\n      const deleted = await storage.deletePermitAttachment(attachmentId);\n      \n      if (deleted) {\n        res.json({ message: \"Attachment deleted successfully\" });\n      } else {\n        res.status(500).json({ message: \"Failed to delete attachment\" });\n      }\n    } catch (error) {\n      console.error(\"Error deleting attachment:\", error);\n      res.status(500).json({ message: \"Failed to delete attachment\" });\n    }\n  });\n\n  // Serve documentation file as raw markdown\n  app.get(\"/api/documentation/n8n-integration\", (req, res) => {\n    const filePath = \"n8n-ai-agent-integration.md\";\n    \n    fs.readFile(filePath, 'utf8', (err: any, data: string) => {\n      if (err) {\n        console.error('Error reading documentation file:', err);\n        return res.status(404).json({ message: \"Documentation not found\" });\n      }\n      res.setHeader('Content-Type', 'text/markdown; charset=utf-8');\n      res.setHeader('Content-Disposition', 'inline; filename=\"n8n-ai-agent-integration.md\"');\n      res.send(data);\n    });\n  });\n\n  // System Settings routes\n  app.get(\"/api/system-settings\", requireAuth, async (req, res) => {\n    try {\n      const settings = await storage.getSystemSettings();\n      res.json(settings || { applicationTitle: \"Arbeitserlaubnis\", headerIcon: null });\n    } catch (error) {\n      console.error(\"Error fetching system settings:\", error);\n      res.status(500).json({ message: \"Failed to fetch system settings\" });\n    }\n  });\n\n  app.patch(\"/api/system-settings\", requireAuth, async (req, res) => {\n    try {\n      const updates = req.body;\n      const settings = await storage.updateSystemSettings(updates);\n      res.json(settings);\n    } catch (error) {\n      console.error(\"Error updating system settings:\", error);\n      res.status(500).json({ message: \"Failed to update system settings\" });\n    }\n  });\n\n  app.post(\"/api/system-settings/upload-icon\", requireAuth, iconUpload.single('icon'), async (req, res) => {\n    try {\n      if (!req.file) {\n        return res.status(400).json({ message: \"No file uploaded\" });\n      }\n\n      // Validate file type\n      if (!req.file.mimetype.startsWith('image/')) {\n        return res.status(400).json({ message: \"Only image files are allowed\" });\n      }\n\n      // Convert to base64\n      const base64Icon = `data:${req.file.mimetype};base64,${req.file.buffer.toString('base64')}`;\n\n      // Update system settings with new icon\n      const settings = await storage.updateSystemSettings({ headerIcon: base64Icon });\n      \n      res.json({ \n        message: \"Icon uploaded successfully\",\n        headerIcon: base64Icon,\n        settings \n      });\n    } catch (error) {\n      console.error(\"Error uploading icon:\", error);\n      res.status(500).json({ message: \"Failed to upload icon\" });\n    }\n  });\n\n  // Map Background routes\n  app.get(\"/api/map-backgrounds\", requireAuth, async (req, res) => {\n    try {\n      const backgrounds = await storage.getAllMapBackgrounds();\n      res.json(backgrounds);\n    } catch (error) {\n      log(`Error fetching map backgrounds: ${error}`);\n      res.status(500).json({ message: \"Failed to fetch map backgrounds\" });\n    }\n  });\n\n  app.get(\"/api/map-backgrounds/active\", requireAuth, async (req, res) => {\n    try {\n      const backgrounds = await storage.getActiveMapBackgrounds();\n      res.json(backgrounds);\n    } catch (error) {\n      log(`Error fetching active map backgrounds: ${error}`);\n      res.status(500).json({ message: \"Failed to fetch active map backgrounds\" });\n    }\n  });\n\n  app.post(\"/api/map-backgrounds\", requireAuth, iconUpload.single('image'), async (req, res) => {\n    try {\n      if (!req.file) {\n        return res.status(400).json({ message: \"No image file uploaded\" });\n      }\n\n      // Validate file type\n      if (!req.file.mimetype.startsWith('image/')) {\n        return res.status(400).json({ message: \"Only image files are allowed\" });\n      }\n\n      // Convert to base64\n      const base64Image = `data:${req.file.mimetype};base64,${req.file.buffer.toString('base64')}`;\n\n      const backgroundData = {\n        name: req.body.name || \"Unnamed Map\",\n        description: req.body.description || \"\",\n        imagePath: base64Image,\n        isActive: req.body.isActive === 'true' || true\n      };\n\n      const background = await storage.createMapBackground(backgroundData);\n      res.json(background);\n    } catch (error) {\n      log(`Error creating map background: ${error}`);\n      res.status(500).json({ message: \"Failed to create map background\" });\n    }\n  });\n\n  app.patch(\"/api/map-backgrounds/:id\", requireAuth, async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const background = await storage.updateMapBackground(id, req.body);\n      if (!background) {\n        return res.status(404).json({ message: \"Map background not found\" });\n      }\n      res.json(background);\n    } catch (error) {\n      log(`Error updating map background: ${error}`);\n      res.status(500).json({ message: \"Failed to update map background\" });\n    }\n  });\n\n  app.delete(\"/api/map-backgrounds/:id\", requireAuth, async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const success = await storage.deleteMapBackground(id);\n      if (!success) {\n        return res.status(404).json({ message: \"Map background not found\" });\n      }\n      res.json({ message: \"Map background deleted successfully\" });\n    } catch (error) {\n      log(`Error deleting map background: ${error}`);\n      res.status(500).json({ message: \"Failed to delete map background\" });\n    }\n  });\n\n  // Map operations routes\n\n  app.patch(\"/api/work-locations/:id/position\", requireAuth, async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const { x, y } = req.body;\n      const location = await storage.updateWorkLocationPosition(id, x, y);\n      if (!location) {\n        return res.status(404).json({ message: \"Work location not found\" });\n      }\n      res.json(location);\n    } catch (error) {\n      log(`Error updating work location position: ${error}`);\n      res.status(500).json({ message: \"Failed to update work location position\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":96815},"server/seed.ts":{"content":"import { db } from \"./db\";\nimport { users, permits, systemSettings, workLocations, templates } from \"@shared/schema\";\nimport bcrypt from \"bcrypt\";\n\nasync function seed() {\n  try {\n    console.log(\"Seeding database...\");\n    \n    // Create default users with hashed passwords\n    const defaultUsers = [\n      {\n        username: \"admin\",\n        password: await bcrypt.hash(\"password123\", 10),\n        fullName: \"System Administrator\",\n        department: \"IT\",\n        role: \"admin\"\n      },\n      {\n        username: \"hans.mueller\",\n        password: await bcrypt.hash(\"password123\", 10),\n        fullName: \"Hans Mueller\",\n        department: \"Operations\",\n        role: \"supervisor\"\n      },\n      {\n        username: \"safety.officer\",\n        password: await bcrypt.hash(\"password123\", 10),\n        fullName: \"Dr. Sarah Weber\",\n        department: \"Safety\",\n        role: \"safety_officer\"\n      },\n      {\n        username: \"ops.manager\",\n        password: await bcrypt.hash(\"password123\", 10),\n        fullName: \"Michael Schmidt\",\n        department: \"Operations\",\n        role: \"operations_manager\"\n      },\n      {\n        username: \"employee\",\n        password: await bcrypt.hash(\"password123\", 10),\n        fullName: \"Thomas Bauer\",\n        department: \"Maintenance\",\n        role: \"employee\"\n      },\n      {\n        username: \"supervisor\",\n        password: await bcrypt.hash(\"password123\", 10),\n        fullName: \"Maria Schneider\",\n        department: \"Production\",\n        role: \"supervisor\"\n      }\n    ];\n\n    // Insert users\n    for (const userData of defaultUsers) {\n      await db.insert(users).values(userData).onConflictDoNothing();\n    }\n    \n    // Create default system settings\n    await db.insert(systemSettings).values({\n      applicationTitle: \"Arbeitserlaubnis\",\n      headerIcon: null\n    }).onConflictDoNothing();\n    \n    // Create default work locations\n    const defaultWorkLocations = [\n      { name: \"Produktionshalle A\", description: \"Hauptproduktionsbereich\", isActive: true },\n      { name: \"Produktionshalle B\", description: \"Sekundäre Produktionsstätte\", isActive: true },\n      { name: \"Lagerhalle\", description: \"Hauptlagerbereich\", isActive: true },\n      { name: \"Chemikalienlager\", description: \"Gefahrstofflagerung\", isActive: true },\n      { name: \"Außenbereich\", description: \"Externe Arbeitsplätze\", isActive: true }\n    ];\n    \n    for (const location of defaultWorkLocations) {\n      await db.insert(workLocations).values(location).onConflictDoNothing();\n    }\n\n    // Create sample permits\n    const now = new Date();\n    const tomorrow = new Date(now);\n    tomorrow.setDate(tomorrow.getDate() + 1);\n    \n    const nextWeek = new Date(now);\n    nextWeek.setDate(nextWeek.getDate() + 7);\n\n    const samplePermits = [\n      {\n        permitId: \"CS-2024-001\",\n        type: \"confined_space\",\n        location: \"Tank A-104\",\n        description: \"Inspektion und Reinigung des Lagertanks für Chemikalien\",\n        requestorName: \"Thomas Bauer\",\n        department: \"Maintenance\",\n        contactNumber: \"+49 30 12345678\",\n        emergencyContact: \"+49 30 87654321\",\n        startDate: now,\n        endDate: tomorrow,\n        status: \"pending\",\n        riskLevel: \"high\",\n        safetyOfficer: \"Dr. Sarah Weber\",\n        identifiedHazards: \"Giftige Dämpfe, Sauerstoffmangel, enge Raumverhältnisse\",\n        additionalComments: \"Vollständige Atmosphärenprüfung erforderlich vor Zutritt\",\n        atmosphereTest: true,\n        ventilation: true,\n        ppe: true,\n        emergencyProcedures: true,\n        fireWatch: false,\n        isolationLockout: true,\n        oxygenLevel: \"20.9%\",\n        lelLevel: \"0%\",\n        h2sLevel: \"0 ppm\",\n        supervisorApproval: false,\n        safetyOfficerApproval: false,\n        operationsManagerApproval: false,\n        createdAt: now,\n        updatedAt: now\n      },\n      {\n        permitId: \"HW-2024-002\",\n        type: \"hot_work\",\n        location: \"Produktionshalle B\",\n        description: \"Schweißarbeiten an der Rohrleitungsinstallation\",\n        requestorName: \"Hans Mueller\",\n        department: \"Operations\",\n        contactNumber: \"+49 30 11223344\",\n        emergencyContact: \"+49 30 44332211\",\n        startDate: tomorrow,\n        endDate: nextWeek,\n        status: \"approved\",\n        riskLevel: \"medium\",\n        safetyOfficer: \"Dr. Sarah Weber\",\n        identifiedHazards: \"Brandgefahr, heiße Oberflächen, Schweißrauch\",\n        additionalComments: \"Feuerwache während der gesamten Arbeitszeit erforderlich\",\n        atmosphereTest: false,\n        ventilation: true,\n        ppe: true,\n        emergencyProcedures: true,\n        fireWatch: true,\n        isolationLockout: true,\n        supervisorApproval: true,\n        safetyOfficerApproval: true,\n        operationsManagerApproval: true,\n        supervisorApprovalDate: now,\n        safetyOfficerApprovalDate: now,\n        operationsManagerApprovalDate: now,\n        createdAt: now,\n        updatedAt: now\n      }\n    ];\n\n    // Insert sample permits\n    for (const permitData of samplePermits) {\n      await db.insert(permits).values(permitData).onConflictDoNothing();\n    }\n\n    console.log(\"Database seeded successfully!\");\n  } catch (error) {\n    console.error(\"Error seeding database:\", error);\n  }\n}\n\nseed();","size_bytes":5284},"server/storage.ts":{"content":"import { users, permits, notifications, templates, aiSuggestions, webhookConfig, workLocations, permitAttachments, sessions, systemSettings, mapBackgrounds, type User, type InsertUser, type Permit, type InsertPermit, type Notification, type InsertNotification, type Template, type InsertTemplate, type AiSuggestion, type InsertAiSuggestion, type WebhookConfig, type InsertWebhookConfig, type WorkLocation, type InsertWorkLocation, type PermitAttachment, type InsertPermitAttachment, type Session, type InsertSession, type SystemSettings, type InsertSystemSettings, type MapBackground, type InsertMapBackground } from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, and, desc, like, lt } from \"drizzle-orm\";\nimport bcrypt from \"bcrypt\";\n\nexport interface IStorage {\n  // User operations\n  getUser(id: number): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  getUserByFullName(fullName: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  getAllUsers(): Promise<User[]>;\n  verifyPassword(plainPassword: string, hashedPassword: string): Promise<boolean>;\n\n  // Permit operations\n  getPermit(id: number): Promise<Permit | undefined>;\n  getPermitByPermitId(permitId: string): Promise<Permit | undefined>;\n  getAllPermits(): Promise<Permit[]>;\n  getPermitsByStatus(status: string): Promise<Permit[]>;\n  getPermitsByRequestor(requestorId: number): Promise<Permit[]>;\n  createPermit(permit: InsertPermit): Promise<Permit>;\n  updatePermit(id: number, updates: Partial<Permit>): Promise<Permit | undefined>;\n  deletePermit(id: number): Promise<boolean>;\n  getPermitStats(): Promise<{\n    activePermits: number;\n    pendingApproval: number;\n    expiredToday: number;\n    completed: number;\n  }>;\n\n  // Notification operations\n  getUserNotifications(userId: number): Promise<Notification[]>;\n  getUnreadNotificationCount(userId: number): Promise<number>;\n  createNotification(notification: InsertNotification): Promise<Notification>;\n  markNotificationAsRead(id: number): Promise<boolean>;\n  markAllNotificationsAsRead(userId: number): Promise<boolean>;\n\n  // User role operations\n  updateUserRole(userId: number, role: string): Promise<User | undefined>;\n  updateUser(userId: number, updates: Partial<User>): Promise<User | undefined>;\n\n  // Template operations\n  getAllTemplates(): Promise<Template[]>;\n  createTemplate(template: InsertTemplate): Promise<Template>;\n\n  // AI Suggestions operations\n  getPermitSuggestions(permitId: number): Promise<AiSuggestion[]>;\n  createAiSuggestion(suggestion: InsertAiSuggestion): Promise<AiSuggestion>;\n  updateSuggestionStatus(id: number, status: string): Promise<AiSuggestion | undefined>;\n  applySuggestion(id: number): Promise<boolean>;\n  applyAllSuggestions(permitId: number): Promise<number>;\n  rejectAllSuggestions(permitId: number): Promise<number>;\n  deleteAllSuggestions(permitId: number): Promise<number>;\n\n  // Webhook configuration operations\n  getAllWebhookConfigs(): Promise<WebhookConfig[]>;\n  getActiveWebhookConfig(): Promise<WebhookConfig | undefined>;\n  createWebhookConfig(config: InsertWebhookConfig): Promise<WebhookConfig>;\n  updateWebhookConfig(id: number, updates: Partial<WebhookConfig>): Promise<WebhookConfig | undefined>;\n  deleteWebhookConfig(id: number): Promise<boolean>;\n  testWebhookConnection(id: number): Promise<boolean>;\n\n  // Work Location operations\n  getAllWorkLocations(): Promise<WorkLocation[]>;\n  getActiveWorkLocations(): Promise<WorkLocation[]>;\n  createWorkLocation(location: InsertWorkLocation): Promise<WorkLocation>;\n  updateWorkLocation(id: number, updates: Partial<WorkLocation>): Promise<WorkLocation | undefined>;\n  deleteWorkLocation(id: number): Promise<boolean>;\n\n  // User role filtering operations\n  getUsersByRole(role: string): Promise<User[]>;\n  getDepartmentHeads(): Promise<User[]>;\n  getSafetyOfficers(): Promise<User[]>;\n  getMaintenanceApprovers(): Promise<User[]>;\n\n  // Permit Attachment operations\n  getPermitAttachments(permitId: number): Promise<PermitAttachment[]>;\n  createPermitAttachment(attachment: InsertPermitAttachment): Promise<PermitAttachment>;\n  deletePermitAttachment(id: number): Promise<boolean>;\n  getAttachmentById(id: number): Promise<PermitAttachment | undefined>;\n\n  // Session operations\n  createSession(session: InsertSession): Promise<Session>;\n  getSessionBySessionId(sessionId: string): Promise<Session | undefined>;\n  deleteSession(sessionId: string): Promise<boolean>;\n  cleanupExpiredSessions(): Promise<void>;\n\n  // AI Suggestions cleanup operations\n  cleanupOldSuggestions(): Promise<number>;\n  cleanupSuggestionsForUser(userId: number): Promise<number>;\n\n  // Workflow operations\n  updatePermitStatus(id: number, status: string, userId: number, comment?: string): Promise<Permit | undefined>;\n  addStatusHistoryEntry(permitId: number, status: string, userId: number, comment?: string): Promise<void>;\n\n  // System Settings operations\n  getSystemSettings(): Promise<SystemSettings | undefined>;\n  updateSystemSettings(settings: Partial<SystemSettings>): Promise<SystemSettings | undefined>;\n  createSystemSettings(settings: InsertSystemSettings): Promise<SystemSettings>;\n\n  // Map Background operations\n  getAllMapBackgrounds(): Promise<MapBackground[]>;\n  getActiveMapBackgrounds(): Promise<MapBackground[]>;\n  getMapBackgroundById(id: number): Promise<MapBackground | undefined>;\n  createMapBackground(background: InsertMapBackground): Promise<MapBackground>;\n  updateMapBackground(id: number, updates: Partial<MapBackground>): Promise<MapBackground | undefined>;\n  deleteMapBackground(id: number): Promise<boolean>;\n\n  // Map operations\n  getPermitsForMap(): Promise<Permit[]>;\n  updateWorkLocationPosition(id: number, x: number, y: number): Promise<WorkLocation | undefined>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  private async generatePermitId(type: string): Promise<string> {\n    const typeMap: Record<string, string> = {\n      'confined_space': 'CS',\n      'hot_work': 'HW',\n      'electrical': 'EL',\n      'chemical': 'CH',\n      'height': 'HT'\n    };\n\n    const prefix = typeMap[type] || 'GN';\n    const year = new Date().getFullYear();\n\n    // Find the highest existing permit number for this type and year\n    const existingPermits = await db.select()\n      .from(permits)\n      .where(like(permits.permitId, `${prefix}-${year}-%`));\n\n    let maxNumber = 0;\n    existingPermits.forEach(permit => {\n      const match = permit.permitId.match(new RegExp(`${prefix}-${year}-(\\\\d+)`));\n      if (match) {\n        maxNumber = Math.max(maxNumber, parseInt(match[1], 10));\n      }\n    });\n\n    const nextNumber = (maxNumber + 1).toString().padStart(3, '0');\n    return `${prefix}-${year}-${nextNumber}`;\n  }\n\n  async getUser(id: number): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.username, username));\n    return user || undefined;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    // Hash password if it's not already hashed\n    if (insertUser.password && !insertUser.password.startsWith('$2b$')) {\n      insertUser.password = await bcrypt.hash(insertUser.password, 10);\n    }\n    \n    const [user] = await db\n      .insert(users)\n      .values(insertUser)\n      .returning();\n    return user;\n  }\n\n  async verifyPassword(plainPassword: string, hashedPassword: string): Promise<boolean> {\n    try {\n      return await bcrypt.compare(plainPassword, hashedPassword);\n    } catch (error) {\n      console.error('Password verification error:', error);\n      return false;\n    }\n  }\n\n  async getAllUsers(): Promise<User[]> {\n    return await db.select().from(users);\n  }\n\n  async getUserByFullName(fullName: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.fullName, fullName)).limit(1);\n    return user;\n  }\n\n  async getPermit(id: number): Promise<Permit | undefined> {\n    const [permit] = await db.select().from(permits).where(eq(permits.id, id));\n    return permit || undefined;\n  }\n\n  async getPermitByPermitId(permitId: string): Promise<Permit | undefined> {\n    const [permit] = await db.select().from(permits).where(eq(permits.permitId, permitId));\n    return permit || undefined;\n  }\n\n  async getAllPermits(): Promise<Permit[]> {\n    return await db.select().from(permits).orderBy(permits.createdAt);\n  }\n\n  async getPermitsByStatus(status: string): Promise<Permit[]> {\n    return await db.select().from(permits).where(eq(permits.status, status));\n  }\n\n  async getPermitsByRequestor(requestorId: number): Promise<Permit[]> {\n    return await db.select().from(permits).where(eq(permits.requestorId, requestorId));\n  }\n\n  async createPermit(insertPermit: InsertPermit): Promise<Permit> {\n    const permitId = await this.generatePermitId(insertPermit.type);\n    const now = new Date();\n\n    const [permit] = await db\n      .insert(permits)\n      .values({\n        type: insertPermit.type,\n        location: insertPermit.location,\n        description: insertPermit.description,\n        requestorName: insertPermit.requestorName,\n        department: insertPermit.department,\n        contactNumber: insertPermit.contactNumber,\n        emergencyContact: insertPermit.emergencyContact,\n        permitId,\n        status: insertPermit.status || 'pending',\n        requestorId: insertPermit.requestorId || null,\n        startDate: insertPermit.startDate ? new Date(insertPermit.startDate) : null,\n        endDate: insertPermit.endDate ? new Date(insertPermit.endDate) : null,\n        createdAt: now,\n        updatedAt: now,\n        riskLevel: insertPermit.riskLevel || null,\n        safetyOfficer: insertPermit.safetyOfficer || null,\n        identifiedHazards: insertPermit.identifiedHazards || null,\n        additionalComments: insertPermit.additionalComments || null,\n        selectedHazards: insertPermit.selectedHazards || [],\n        hazardNotes: insertPermit.hazardNotes || '{}',\n        completedMeasures: insertPermit.completedMeasures || [],\n        departmentHead: insertPermit.departmentHead || null,\n        maintenanceApprover: insertPermit.maintenanceApprover || null,\n        // Add missing critical fields\n        immediateActions: insertPermit.immediateActions || null,\n        beforeWorkStarts: insertPermit.beforeWorkStarts || null,\n        complianceNotes: insertPermit.complianceNotes || null,\n        overallRisk: insertPermit.overallRisk || null,\n        performerName: insertPermit.performerName || null,\n        performerSignature: insertPermit.performerSignature || null,\n        workLocationId: insertPermit.workLocationId || null,\n        mapPositionX: insertPermit.mapPositionX || null,\n        mapPositionY: insertPermit.mapPositionY || null,\n        departmentHeadApproval: false,\n        departmentHeadApprovalDate: null,\n        maintenanceApproval: false,\n        maintenanceApprovalDate: null,\n        safetyOfficerApproval: false,\n        safetyOfficerApprovalDate: null,\n      })\n      .returning();\n\n    return permit;\n  }\n\n  async updatePermit(id: number, updates: Partial<Permit>): Promise<Permit | undefined> {\n    const [permit] = await db\n      .update(permits)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(permits.id, id))\n      .returning();\n\n    return permit || undefined;\n  }\n\n  async deletePermit(id: number): Promise<boolean> {\n    try {\n      // Delete all associated data in the correct order to avoid foreign key constraints\n\n      // 1. Delete AI suggestions\n      await db.delete(aiSuggestions).where(eq(aiSuggestions.permitId, id));\n\n      // 2. Delete permit attachments\n      await db.delete(permitAttachments).where(eq(permitAttachments.permitId, id));\n\n      // 3. Delete notifications related to this permit\n      await db.delete(notifications).where(eq(notifications.relatedPermitId, id));\n\n      // 4. Finally delete the permit itself\n      const result = await db.delete(permits).where(eq(permits.id, id));\n\n      console.log(`Deleted permit ${id} and all associated data: suggestions, attachments, notifications`);\n      return (result.rowCount || 0) > 0;\n    } catch (error) {\n      console.error(`Error deleting permit ${id} and associated data:`, error);\n      throw error;\n    }\n  }\n\n  async getPermitStats(): Promise<{\n    activePermits: number;\n    pendingApproval: number;\n    expiredToday: number;\n    completed: number;\n  }> {\n    const allPermits = await db.select().from(permits);\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n    const tomorrow = new Date(today);\n    tomorrow.setDate(tomorrow.getDate() + 1);\n\n    return {\n      activePermits: allPermits.filter(p => p.status === 'active').length,\n      pendingApproval: allPermits.filter(p => p.status === 'pending').length,\n      expiredToday: allPermits.filter(p => {\n        if (!p.endDate) return false;\n        const endDate = new Date(p.endDate);\n        return endDate >= today && endDate < tomorrow && p.status === 'expired';\n      }).length,\n      completed: allPermits.filter(p => p.status === 'completed').length,\n    };\n  }\n\n  // Notification operations\n  async getUserNotifications(userId: number): Promise<Notification[]> {\n    const userNotifications = await db\n      .select()\n      .from(notifications)\n      .where(eq(notifications.userId, userId))\n      .orderBy(desc(notifications.createdAt));\n    return userNotifications;\n  }\n\n  async getUnreadNotificationCount(userId: number): Promise<number> {\n    const unreadNotifications = await db\n      .select()\n      .from(notifications)\n      .where(and(eq(notifications.userId, userId), eq(notifications.isRead, false)));\n    return unreadNotifications.length;\n  }\n\n  async createNotification(insertNotification: InsertNotification): Promise<Notification> {\n    const [notification] = await db\n      .insert(notifications)\n      .values(insertNotification)\n      .returning();\n    return notification;\n  }\n\n  async markNotificationAsRead(id: number): Promise<boolean> {\n    await db\n      .update(notifications)\n      .set({ isRead: true })\n      .where(eq(notifications.id, id));\n    return true;\n  }\n\n  async markAllNotificationsAsRead(userId: number): Promise<boolean> {\n    await db\n      .update(notifications)\n      .set({ isRead: true })\n      .where(eq(notifications.userId, userId));\n    return true;\n  }\n\n  // User role operations\n  async updateUserRole(userId: number, role: string): Promise<User | undefined> {\n    const [user] = await db\n      .update(users)\n      .set({ role })\n      .where(eq(users.id, userId))\n      .returning();\n    return user;\n  }\n\n  async updateUser(userId: number, updates: Partial<User>): Promise<User | undefined> {\n    // Hash password if it's being updated and not already hashed\n    if (updates.password && !updates.password.startsWith('$2b$')) {\n      updates.password = await bcrypt.hash(updates.password, 10);\n    }\n    \n    const [user] = await db\n      .update(users)\n      .set(updates)\n      .where(eq(users.id, userId))\n      .returning();\n    return user;\n  }\n\n  async getAllTemplates(): Promise<Template[]> {\n    return await db.select().from(templates);\n  }\n\n  async createTemplate(insertTemplate: InsertTemplate): Promise<Template> {\n    const [template] = await db\n      .insert(templates)\n      .values(insertTemplate)\n      .returning();\n    return template;\n  }\n\n  // AI Suggestions operations\n  async getPermitSuggestions(permitId: number): Promise<AiSuggestion[]> {\n    return await db\n      .select()\n      .from(aiSuggestions)\n      .where(eq(aiSuggestions.permitId, permitId))\n      .orderBy(desc(aiSuggestions.createdAt));\n  }\n\n  async createAiSuggestion(insertSuggestion: InsertAiSuggestion): Promise<AiSuggestion> {\n    const [suggestion] = await db\n      .insert(aiSuggestions)\n      .values(insertSuggestion)\n      .returning();\n    return suggestion;\n  }\n\n  async updateSuggestionStatus(id: number, status: string): Promise<AiSuggestion | undefined> {\n    const [suggestion] = await db\n      .update(aiSuggestions)\n      .set({ \n        status,\n        appliedAt: status === 'accepted' ? new Date() : null\n      })\n      .where(eq(aiSuggestions.id, id))\n      .returning();\n    return suggestion;\n  }\n\n  async applySuggestion(id: number): Promise<boolean> {\n    try {\n      console.log(`Applying AI suggestion ${id}...`);\n\n      const [suggestion] = await db\n        .select()\n        .from(aiSuggestions)\n        .where(eq(aiSuggestions.id, id))\n        .limit(1);\n\n      if (!suggestion) {\n        console.error(`Suggestion ${id} not found`);\n        return false;\n      }\n\n      const { permitId, fieldName, suggestedValue } = suggestion;\n      console.log(`Suggestion details: permitId=${permitId}, fieldName=${fieldName}, value=${suggestedValue}`);\n\n      if (fieldName && suggestedValue !== null && suggestedValue !== undefined) {\n        // Get current permit data\n        const [currentPermit] = await db\n          .select()\n          .from(permits)\n          .where(eq(permits.id, permitId))\n          .limit(1);\n\n        if (!currentPermit) {\n          console.error(`Permit ${permitId} not found`);\n          return false;\n        }\n\n        // Validate and sanitize the suggested value based on field type\n        const sanitizedValue = this.sanitizeSuggestionValue(fieldName, suggestedValue);\n        console.log(`Sanitized value for ${fieldName}:`, sanitizedValue);\n\n        if (sanitizedValue === null) {\n          console.warn(`Skipping invalid suggestion for field ${fieldName}:`, suggestedValue);\n          return true; // Skip but don't fail\n        }\n\n        // Map camelCase field names to Drizzle schema field names\n        const fieldMapping: Record<string, string> = {\n          // Basic fields\n          'immediateActions': 'immediateActions',\n          'beforeWorkStarts': 'beforeWorkStarts',\n          'preventiveMeasures': 'beforeWorkStarts',  // KORREKTUR: Frontend preventiveMeasures → Backend beforeWorkStarts\n          'complianceNotes': 'complianceNotes',\n          'additionalComments': 'additionalComments',\n          'identifiedHazards': 'identifiedHazards',\n          'overallRisk': 'overallRisk',\n          'selectedHazards': 'selectedHazards',\n          'hazardNotes': 'hazardNotes',\n          'completedMeasures': 'completedMeasures',\n          'requestorName': 'requestorName',\n          'contactNumber': 'contactNumber',\n          'emergencyContact': 'emergencyContact',\n          'startDate': 'startDate',\n          'endDate': 'endDate',\n          'riskLevel': 'riskLevel',\n          'safetyOfficer': 'safetyOfficer',\n          'departmentHead': 'departmentHead',\n          'maintenanceApprover': 'maintenanceApprover',\n          'performerName': 'performerName',\n          'performerSignature': 'performerSignature',\n          // Direct mapping\n          'location': 'location',\n          'description': 'description',\n          'department': 'department',\n          'status': 'status'\n        };\n\n        const schemaFieldName = fieldMapping[fieldName] || fieldName;\n        console.log(`Mapped field ${fieldName} to schema field ${schemaFieldName}`);\n\n        // Special handling for hazard-related fields with direct replacement\n        if (fieldName === 'selectedHazards') {\n          console.log(`Processing selectedHazards with direct replacement`);\n\n          // Parse and apply selectedHazards directly\n          let newSelectedHazards: string[] = [];\n          if (Array.isArray(sanitizedValue)) {\n            newSelectedHazards = sanitizedValue;\n          } else if (typeof sanitizedValue === 'string') {\n            try {\n              newSelectedHazards = JSON.parse(sanitizedValue);\n            } catch {\n              newSelectedHazards = [];\n            }\n          }\n\n          console.log(`Directly updating selectedHazards to:`, newSelectedHazards);\n          console.log(`Type of newSelectedHazards:`, typeof newSelectedHazards, Array.isArray(newSelectedHazards));\n\n          // Ensure it's an array for PostgreSQL array column\n          if (!Array.isArray(newSelectedHazards)) {\n            newSelectedHazards = [];\n          }\n\n          await db\n            .update(permits)\n            .set({\n              selectedHazards: newSelectedHazards,\n              updatedAt: new Date()\n            })\n            .where(eq(permits.id, permitId));\n\n        } else if (fieldName === 'hazardNotes') {\n          console.log(`Processing hazardNotes with direct replacement`);\n\n          // Parse and apply hazardNotes directly\n          let newHazardNotes: Record<string, string> = {};\n          if (typeof sanitizedValue === 'string') {\n            try {\n              newHazardNotes = JSON.parse(sanitizedValue);\n            } catch {\n              newHazardNotes = {};\n            }\n          } else if (typeof sanitizedValue === 'object' && sanitizedValue !== null) {\n            newHazardNotes = sanitizedValue as Record<string, string>;\n          }\n\n          console.log(`Directly updating hazardNotes to:`, newHazardNotes);\n\n          await db\n            .update(permits)\n            .set({\n              hazardNotes: JSON.stringify(newHazardNotes),\n              updatedAt: new Date()\n            })\n            .where(eq(permits.id, permitId));\n\n        } else {\n          // Apply regular field updates using proper Drizzle syntax\n          console.log(`Updating permit ${permitId} with field ${schemaFieldName}:`, sanitizedValue);\n\n          // Create update object with explicit field mapping\n          const updateData: any = {\n            updatedAt: new Date()\n          };\n          updateData[schemaFieldName] = sanitizedValue;\n\n          const result = await db\n            .update(permits)\n            .set(updateData)\n            .where(eq(permits.id, permitId));\n\n          console.log(`Update result successful`);\n        }\n      }\n\n      // Mark suggestion as accepted and applied\n      console.log(`Marking suggestion ${id} as accepted`);\n      await db\n        .update(aiSuggestions)\n        .set({ \n          status: 'accepted',\n          appliedAt: new Date()\n        })\n        .where(eq(aiSuggestions.id, id));\n\n      console.log(`Successfully applied suggestion ${id}`);\n      return true;\n    } catch (error) {\n      console.error('Error applying suggestion:', error);\n      console.error('Suggestion ID:', id);\n      console.error('Error details:', error);\n      return false;\n    }\n  }\n\n  private sanitizeSuggestionValue(fieldName: string, suggestedValue: any): any {\n    try {\n      switch (fieldName) {\n        // Array fields\n        case 'selectedHazards':\n          if (Array.isArray(suggestedValue)) {\n            // Handle array of hazard objects with notes\n            if (suggestedValue.length > 0 && typeof suggestedValue[0] === 'object' && suggestedValue[0].hazardId) {\n              // Extract just the hazard IDs for selectedHazards field\n              return suggestedValue.map(item => item.hazardId);\n            }\n            return suggestedValue;\n          } else if (typeof suggestedValue === 'string') {\n            // Try to parse as JSON array first\n            try {\n              const parsed = JSON.parse(suggestedValue);\n              if (Array.isArray(parsed)) {\n                // Handle array of hazard objects\n                if (parsed.length > 0 && typeof parsed[0] === 'object' && parsed[0].hazardId) {\n                  return parsed.map(item => item.hazardId);\n                }\n                return parsed;\n              }\n            } catch {\n              // Not valid JSON, continue with string parsing\n            }\n\n            // Handle comma-separated string format like \"1-0, 7-1, 8-0, 4-0\"\n            if (suggestedValue.includes(',')) {\n              return suggestedValue.split(',').map(s => s.trim()).filter(s => s);\n            }\n\n            // Single value or space-separated values\n            return suggestedValue.split(/[,\\s]+/).map(s => s.trim()).filter(s => s);\n          }\n          return [];\n\n        case 'completedMeasures':\n          if (Array.isArray(suggestedValue)) {\n            return suggestedValue;\n          } else if (typeof suggestedValue === 'string') {\n            // Try to parse as JSON array first\n            try {\n              const parsed = JSON.parse(suggestedValue);\n              if (Array.isArray(parsed)) {\n                return parsed;\n              }\n            } catch {\n              // Not valid JSON, continue with string parsing\n            }\n\n            // Handle comma-separated string format like \"1-0, 7-1, 8-0, 4-0\"\n            if (suggestedValue.includes(',')) {\n              return suggestedValue.split(',').map(s => s.trim()).filter(s => s);\n            }\n\n            // Single value or space-separated values\n            return suggestedValue.split(/[,\\s]+/).map(s => s.trim()).filter(s => s);\n          }\n          return [];\n\n        case 'hazardNotes':\n          if (typeof suggestedValue === 'object' && suggestedValue !== null) {\n            return JSON.stringify(suggestedValue);\n          } else if (typeof suggestedValue === 'string') {\n            try {\n              JSON.parse(suggestedValue);\n              return suggestedValue;\n            } catch {\n              return JSON.stringify({ general: suggestedValue });\n            }\n          }\n          return '{}';\n\n        case 'startDate':\n        case 'endDate':\n          if (suggestedValue && typeof suggestedValue === 'object' && 'toISOString' in suggestedValue) {\n            return suggestedValue;\n          } else if (typeof suggestedValue === 'string') {\n            const parsedDate = new Date(suggestedValue);\n            if (!isNaN(parsedDate.getTime())) {\n              return parsedDate;\n            }\n          }\n          return null; // Invalid date, skip this suggestion\n\n        case 'requestorId':\n        case 'uploadedBy':\n          const numValue = parseInt(String(suggestedValue));\n          return isNaN(numValue) ? null : numValue;\n\n        case 'immediateActions':\n        case 'beforeWorkStarts':\n        case 'complianceNotes':\n        case 'additionalComments':\n        case 'identifiedHazards':\n        case 'location':\n        case 'description':\n        case 'requestorName':\n        case 'department':\n        case 'contactNumber':\n        case 'emergencyContact':\n        case 'performerName':\n        case 'performerSignature':\n        case 'overallRisk':\n          // Text fields - ensure string format\n          return String(suggestedValue || '');\n\n        case 'departmentHeadApproval':\n        case 'safetyOfficerApproval':\n        case 'maintenanceApproval':\n          // Boolean fields\n          return Boolean(suggestedValue);\n\n        case 'departmentHeadId':\n        case 'safetyOfficerId':\n        case 'maintenanceApproverId':\n        case 'workLocationId':\n          // ID fields - ensure valid number or null\n          const idValue = parseInt(String(suggestedValue));\n          return isNaN(idValue) ? null : idValue;\n\n        default:\n          // For any other text fields, ensure it's a string\n          return String(suggestedValue || '');\n      }\n    } catch (error) {\n      console.error(`Error sanitizing value for ${fieldName}:`, error);\n      return null;\n    }\n  }\n\n  async mapSuggestionToTRBS(suggestion: any, permit: any): Promise<void> {\n    try {\n      const { fieldName, suggestedValue, reasoning, suggestionType } = suggestion;\n\n      let currentSelectedHazards: string[] = [];\n      let currentHazardNotes: Record<string, string> = {};\n\n      try {\n        currentSelectedHazards = permit.selectedHazards ? \n          (Array.isArray(permit.selectedHazards) ? permit.selectedHazards : JSON.parse(permit.selectedHazards)) : [];\n        currentHazardNotes = permit.hazardNotes ? \n          (typeof permit.hazardNotes === 'object' ? permit.hazardNotes : JSON.parse(permit.hazardNotes)) : {};\n      } catch (e) {\n        console.error('Error parsing current hazard data:', e);\n      }\n\n      let hasNewMapping = false;\n\n      // Handle structured hazard data from AI suggestions - this should take priority\n      if (fieldName === 'selectedHazards') {\n        try {\n          let hazardData: any = null;\n\n          // Try to parse suggested value as JSON if it's a string\n          if (typeof suggestedValue === 'string') {\n            try {\n              hazardData = JSON.parse(suggestedValue);\n            } catch {\n              // If not JSON, treat as simple text\n              hazardData = suggestedValue;\n            }\n          } else {\n            hazardData = suggestedValue;\n          }\n\n          console.log('Processing structured hazard data from AI suggestion:', hazardData);\n\n          // Handle array of hazard objects with specific notes\n          if (Array.isArray(hazardData)) {\n            for (const hazardItem of hazardData) {\n              if (hazardItem.hazardId && hazardItem.notes) {\n                const hazardId = hazardItem.hazardId;\n                if (!currentSelectedHazards.includes(hazardId)) {\n                  currentSelectedHazards.push(hazardId);\n                  hasNewMapping = true;\n                }\n                // Use the specific notes from the hazard item\n                currentHazardNotes[hazardId] = hazardItem.notes;\n                hasNewMapping = true;\n                console.log(`Mapped hazard ${hazardId} with specific note: ${hazardItem.notes}`);\n              }\n            }\n\n            // If we found structured data, return early to avoid generic mapping\n            if (hasNewMapping) {\n              console.log(`Updating permit ${permit.id} with structured TRBS mappings:`);\n              console.log(`Selected hazards: ${currentSelectedHazards.join(', ')}`);\n              console.log(`Hazard notes: ${JSON.stringify(currentHazardNotes)}`);\n\n              await db\n                .update(permits)\n                .set({\n                  selectedHazards: currentSelectedHazards,\n                  hazardNotes: JSON.stringify(currentHazardNotes),\n                  updatedAt: new Date()\n                })\n                .where(eq(permits.id, permit.id));\n\n              console.log(`Successfully applied structured AI hazard mapping`);\n              return;\n            }\n          }\n          // Handle object with hazard mappings\n          else if (typeof hazardData === 'object' && hazardData !== null) {\n            for (const [key, value] of Object.entries(hazardData)) {\n              if (key.match(/^\\d+-\\d+$/)) { // TRBS format like \"4-3\"\n                const hazardId = key;\n                if (!currentSelectedHazards.includes(hazardId)) {\n                  currentSelectedHazards.push(hazardId);\n                  hasNewMapping = true;\n                }\n                // Use the specific value as the note\n                currentHazardNotes[hazardId] = String(value);\n                hasNewMapping = true;\n                console.log(`Mapped hazard ${hazardId} with note: ${value}`);\n              }\n            }\n\n            // If we found structured data, return early to avoid generic mapping\n            if (hasNewMapping) {\n              console.log(`Updating permit ${permit.id} with structured TRBS mappings:`);\n              console.log(`Selected hazards: ${currentSelectedHazards.join(', ')}`);\n              console.log(`Hazard notes: ${JSON.stringify(currentHazardNotes)}`);\n\n              await db\n                .update(permits)\n                .set({\n                  selectedHazards: currentSelectedHazards,\n                  hazardNotes: JSON.stringify(currentHazardNotes),\n                  updatedAt: new Date()\n                })\n                .where(eq(permits.id, permit.id));\n\n              console.log(`Successfully applied structured AI hazard mapping`);\n              return;\n            }\n          }\n        } catch (error) {\n          console.error('Error processing structured hazard data:', error);\n        }\n      }\n\n      // Enhanced TRBS hazard category mappings with comprehensive keywords\n      const trbsMapping: Record<string, string[]> = {\n        // Mechanische Gefährdungen\n        'maschine|gerät|werkzeug|schnitt|quetsch|stoß|uncontrolled|beweglich|rotating|sharp': ['0-0', '0-1', '0-2', '0-3', '0-4'],\n\n        // Absturzgefährdungen\n        'absturz|höhe|leiter|gerüst|plattform|fall|sturz|height|ladder|scaffold': ['1-0', '1-1', '1-2', '1-3'],\n\n        // Brand- und Explosionsgefährdungen\n        'brand|feuer|flamm|entzünd|heiß|funken|zündung|fire|ignition|hot|spark': ['2-0', '2-1', '2-2'],\n        'explosion|explosiv|gas|dampf|staub|explosive|vapor|dust|detonation': ['3-0', '3-1', '3-2'],\n\n        // Elektrische Gefährdungen\n        'elektr|strom|spannung|isolation|erdung|kurzschluss|electrical|voltage|current|shock': ['4-0', '4-1', '4-2'],\n\n        // Gefahrstoffe\n        'chemisch|giftig|ätzend|reizend|chemical|toxic|corrosive|irritant|carcinogen': ['5-0', '5-1', '5-2', '5-3'],\n        'ethanol|lösungsmittel|säure|base|solvent|acid|alkali': ['5-0', '5-1'],\n\n        // Biologische Gefährdungen\n        'biologisch|bakterien|viren|pilze|infectious|bacteria|virus|fungi|contamination': ['6-0', '6-1'],\n\n        // Physikalische Einwirkungen\n        'lärm|vibration|strahlung|temperatur|noise|radiation|temperature|heat|cold': ['7-0', '7-1', '7-2'],\n\n        // Ergonomische Gefährdungen\n        'ergonomisch|heben|tragen|haltung|wiederholung|ergonomic|lifting|posture|repetitive': ['8-0', '8-1'],\n\n        // Psychische Faktoren\n        'stress|belastung|zeitdruck|überforderung|psychological|mental|pressure|overload': ['9-0', '9-1'],\n\n        // Atemschutz und Inhalation\n        'atemschutz|inhalation|dämpfe|aerosol|respiratory|breathing|fumes|vapor|inhale': ['5-2', '7-0'],\n\n        // Augenschutz\n        'auge|spritzer|strahlung|eye|splash|radiation|vision': ['5-3', '7-2'],\n\n        // Hautschutz\n        'haut|kontakt|absorption|skin|contact|dermal|gloves': ['5-1', '5-3']\n      };\n\n      // Analyze suggestion content for TRBS category mapping (fallback)\n      const suggestionText = `${suggestedValue} ${reasoning}`.toLowerCase();\n      let mappedHazards: string[] = [];\n\n      console.log(`Analyzing suggestion for TRBS mapping: \"${suggestionText}\"`);\n\n      // Map based on content analysis using regex patterns\n      for (const [keywordPattern, hazardIds] of Object.entries(trbsMapping)) {\n        const regex = new RegExp(keywordPattern, 'i');\n        if (regex.test(suggestionText)) {\n          console.log(`Matched pattern \"${keywordPattern}\" -> hazards: ${hazardIds.join(', ')}`);\n\n          // Add relevant hazard if not already present\n          for (const hazardId of hazardIds) {\n            if (!currentSelectedHazards.includes(hazardId)) {\n              currentSelectedHazards.push(hazardId);\n              mappedHazards.push(hazardId);\n              hasNewMapping = true;\n              console.log(`Added hazard ${hazardId} to selected hazards`);\n            }\n          }\n\n          // Add or update hazard notes with actual suggestion content\n          if (hazardIds.length > 0) {\n            const primaryHazard = hazardIds[0];\n            // Use the actual suggestion content instead of generic text\n            const noteContent = reasoning || suggestedValue || 'Von AI-Analyse erkannt';\n            currentHazardNotes[primaryHazard] = noteContent;\n            hasNewMapping = true;\n            console.log(`Added note for hazard ${primaryHazard}: ${noteContent}`);\n          }\n        }\n      }\n\n      // Specific field-based mapping\n      if (fieldName === 'identifiedHazards' && suggestionType === 'safety_improvement') {\n        // Extract specific hazards from suggested value\n        const hazardKeywords: Record<string, string[]> = {\n          'absturz': ['1-0', '1-1'],\n          'brand': ['2-0'],\n          'explosion': ['3-0'],\n          'elektrisch': ['4-0'],\n          'chemisch': ['5-0'],\n          'biologisch': ['6-0'],\n          'lärm': ['7-0'],\n          'vibration': ['7-1'],\n          'ergonomisch': ['8-0'],\n          'stress': ['9-0']\n        };\n\n        for (const [keyword, hazardIds] of Object.entries(hazardKeywords)) {\n          if (suggestedValue.toLowerCase().includes(keyword)) {\n            for (const hazardId of hazardIds) {\n              if (!currentSelectedHazards.includes(hazardId)) {\n                currentSelectedHazards.push(hazardId);\n                // Use actual suggestion content instead of generic text\n                const noteContent = reasoning || suggestedValue || 'Von AI-Analyse erkannt';\n                currentHazardNotes[hazardId] = noteContent;\n                hasNewMapping = true;\n              }\n            }\n          }\n        }\n      }\n\n      // Update permit with new TRBS mappings if any were added\n      if (hasNewMapping) {\n        console.log(`Updating permit ${permit.id} with new TRBS mappings:`);\n        console.log(`Selected hazards: ${currentSelectedHazards.join(', ')}`);\n        console.log(`Hazard notes: ${JSON.stringify(currentHazardNotes)}`);\n\n        await db\n          .update(permits)\n          .set({\n            selectedHazards: currentSelectedHazards,\n            hazardNotes: JSON.stringify(currentHazardNotes),\n            updatedAt: new Date()\n          })\n          .where(eq(permits.id, permit.id));\n\n        console.log(`Successfully mapped AI suggestion to TRBS categories: ${mappedHazards.join(', ')}`);\n      } else {\n        console.log('No TRBS mappings were added for this suggestion');\n      }\n\n    } catch (error) {\n      console.error('Error mapping suggestion to TRBS:', error);\n    }\n  }\n\n  async applyAllSuggestions(permitId: number): Promise<number> {\n    try {\n      const pendingSuggestions = await db\n        .select()\n        .from(aiSuggestions)\n        .where(and(\n          eq(aiSuggestions.permitId, permitId),\n          eq(aiSuggestions.status, 'pending')\n        ));\n\n      let appliedCount = 0;\n      for (const suggestion of pendingSuggestions) {\n        const success = await this.applySuggestion(suggestion.id);\n        if (success) appliedCount++;\n      }\n\n      return appliedCount;\n    } catch (error) {\n      console.error('Error applying all suggestions:', error);\n      return 0;\n    }\n  }\n\n  async rejectAllSuggestions(permitId: number): Promise<number> {\n    try {\n      const result = await db\n        .update(aiSuggestions)\n        .set({ status: 'rejected' })\n        .where(and(\n          eq(aiSuggestions.permitId, permitId),\n          eq(aiSuggestions.status, 'pending')\n        ));\n\n      return result.rowCount || 0;\n    } catch (error) {\n      console.error('Error rejecting all suggestions:', error);\n      return 0;\n    }\n  }\n\n  async deleteAllSuggestions(permitId: number): Promise<number> {\n    try {\n      const result = await db\n        .delete(aiSuggestions)\n        .where(eq(aiSuggestions.permitId, permitId));\n\n      return result.rowCount || 0;\n    } catch (error) {\n      console.error('Error deleting all suggestions:', error);\n      return 0;\n    }\n  }\n\n  // Webhook configuration operations\n  async getAllWebhookConfigs(): Promise<WebhookConfig[]> {\n    return await db\n      .select()\n      .from(webhookConfig)\n      .orderBy(desc(webhookConfig.createdAt));\n  }\n\n  async getActiveWebhookConfig(): Promise<WebhookConfig | undefined> {\n    const [config] = await db\n      .select()\n      .from(webhookConfig)\n      .where(eq(webhookConfig.isActive, true))\n      .limit(1);\n    return config;\n  }\n\n  async createWebhookConfig(insertConfig: InsertWebhookConfig): Promise<WebhookConfig> {\n    const [config] = await db\n      .insert(webhookConfig)\n      .values(insertConfig)\n      .returning();\n    return config;\n  }\n\n  async updateWebhookConfig(id: number, updates: Partial<WebhookConfig>): Promise<WebhookConfig | undefined> {\n    const [config] = await db\n      .update(webhookConfig)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(webhookConfig.id, id))\n      .returning();\n    return config;\n  }\n\n  async deleteWebhookConfig(id: number): Promise<boolean> {\n    const result = await db\n      .delete(webhookConfig)\n      .where(eq(webhookConfig.id, id));\n    return (result.rowCount || 0) > 0;\n  }\n\n  async testWebhookConnection(id: number): Promise<boolean> {\n    try {\n      const config = await db\n        .select()\n        .from(webhookConfig)\n        .where(eq(webhookConfig.id, id))\n        .limit(1);\n\n      if (!config.length) {\n        console.error('Webhook config not found for id:', id);\n        return false;\n      }\n\n      console.log('Testing webhook connection to:', config[0].webhookUrl);\n\n      const testPayload = {\n        test: true,\n        timestamp: new Date().toISOString(),\n        message: 'Test connection from permit management system'\n      };\n\n      // Create URL with query parameters for GET request\n      const url = new URL(config[0].webhookUrl);\n      url.searchParams.append('test', 'true');\n      url.searchParams.append('timestamp', testPayload.timestamp);\n      url.searchParams.append('message', testPayload.message);\n\n      console.log('Full webhook URL with parameters:', url.toString());\n\n      const response = await fetch(url.toString(), {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        signal: AbortSignal.timeout(10000) // 10 second timeout\n      });\n\n      const success = response.ok;\n\n      if (success) {\n        console.log('Webhook test successful. Response status:', response.status);\n      } else {\n        console.error('Webhook test failed. Response status:', response.status, 'Status text:', response.statusText);\n      }\n\n      // Update test status\n      await this.updateWebhookConfig(id, {\n        lastTestedAt: new Date(),\n        lastTestStatus: success ? 'success' : 'failed'\n      });\n\n      return success;\n    } catch (error) {\n      console.error('Webhook test error for config ID:', id);\n      console.error('Error details:', error);\n\n      // Provide specific error information\n      let errorType = 'Unknown error';\n      if (error instanceof TypeError && error.message.includes('fetch')) {\n        errorType = 'Network connection failed';\n      } else if (error instanceof DOMException && error.name === 'AbortError') {\n        errorType = 'Request timeout (10 seconds)';\n      } else if (error instanceof Error) {\n        errorType = error.message;\n      }\n\n      console.error('Error type:', errorType);\n\n      // Update test status on error\n      await this.updateWebhookConfig(id, {\n        lastTestedAt: new Date(),\n        lastTestStatus: 'failed'\n      });\n      return false;\n    }\n  }\n\n  // Work Location operations\n  async getAllWorkLocations(): Promise<WorkLocation[]> {\n    return await db.select().from(workLocations).orderBy(desc(workLocations.createdAt));\n  }\n\n  async getActiveWorkLocations(): Promise<WorkLocation[]> {\n    return await db.select()\n      .from(workLocations)\n      .where(eq(workLocations.isActive, true))\n      .orderBy(workLocations.name);\n  }\n\n  async createWorkLocation(insertLocation: InsertWorkLocation): Promise<WorkLocation> {\n    const [location] = await db\n      .insert(workLocations)\n      .values(insertLocation)\n      .returning();\n    return location;\n  }\n\n  async updateWorkLocation(id: number, updates: Partial<WorkLocation>): Promise<WorkLocation | undefined> {\n    const [location] = await db\n      .update(workLocations)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(workLocations.id, id))\n      .returning();\n    return location || undefined;\n  }\n\n  async deleteWorkLocation(id: number): Promise<boolean> {\n    const result = await db\n      .delete(workLocations)\n      .where(eq(workLocations.id, id));\n    return (result.rowCount || 0) > 0;\n  }\n\n  // User role filtering operations\n  async getUsersByRole(role: string): Promise<User[]> {\n    return await db.select()\n      .from(users)\n      .where(eq(users.role, role))\n      .orderBy(users.fullName);\n  }\n\n  async getDepartmentHeads(): Promise<User[]> {\n    return await this.getUsersByRole('department_head');\n  }\n\n  async getSafetyOfficers(): Promise<User[]> {\n    return await this.getUsersByRole('safety_officer');\n  }\n\n  async getMaintenanceApprovers(): Promise<User[]> {\n    return await this.getUsersByRole('maintenance');\n  }\n\n  // Permit Attachment operations\n  async getPermitAttachments(permitId: number): Promise<PermitAttachment[]> {\n    return await db\n      .select()\n      .from(permitAttachments)\n      .where(eq(permitAttachments.permitId, permitId))\n      .orderBy(desc(permitAttachments.createdAt));\n  }\n\n  async createPermitAttachment(insertAttachment: InsertPermitAttachment): Promise<PermitAttachment> {\n    const [attachment] = await db\n      .insert(permitAttachments)\n      .values(insertAttachment)\n      .returning();\n    return attachment;\n  }\n\n  async deletePermitAttachment(id: number): Promise<boolean> {\n    const result = await db\n      .delete(permitAttachments)\n      .where(eq(permitAttachments.id, id));\n    return (result.rowCount || 0) > 0;\n  }\n\n  async getAttachmentById(id: number): Promise<PermitAttachment | undefined> {\n    const [attachment] = await db\n      .select()\n      .from(permitAttachments)\n      .where(eq(permitAttachments.id, id))\n      .limit(1);\n    return attachment || undefined;\n  }\n\n  // Session operations\n  async createSession(insertSession: InsertSession): Promise<Session> {\n    const [session] = await db\n      .insert(sessions)\n      .values(insertSession)\n      .returning();\n    return session;\n  }\n\n  async getSessionBySessionId(sessionId: string): Promise<Session | undefined> {\n    const [session] = await db\n      .select()\n      .from(sessions)\n      .where(eq(sessions.sessionId, sessionId))\n      .limit(1);\n    return session || undefined;\n  }\n\n  async deleteSession(sessionId: string): Promise<boolean> {\n    const result = await db\n      .delete(sessions)\n      .where(eq(sessions.sessionId, sessionId));\n    return (result.rowCount || 0) > 0;\n  }\n\n  async cleanupExpiredSessions(): Promise<void> {\n    await db\n      .delete(sessions)\n      .where(lt(sessions.expiresAt, new Date()));\n  }\n\n  // AI Suggestions cleanup operations\n  async cleanupOldSuggestions(): Promise<number> {\n    // Delete suggestions older than 24 hours\n    const oneDayAgo = new Date(Date.now() - 24 * 60 * 60 * 1000);\n    const result = await db\n      .delete(aiSuggestions)\n      .where(lt(aiSuggestions.createdAt, oneDayAgo));\n    return result.rowCount || 0;\n  }\n\n  async cleanupSuggestionsForUser(userId: number): Promise<number> {\n    // Get all permits for this user\n    const userPermits = await db\n      .select({ id: permits.id })\n      .from(permits)\n      .where(eq(permits.requestorId, userId));\n\n    if (userPermits.length === 0) {\n      return 0;\n    }\n\n    const permitIds = userPermits.map(p => p.id);\n    let totalDeleted = 0;\n\n    // Delete suggestions for each permit belonging to this user\n    for (const permitId of permitIds) {\n      const result = await db\n        .delete(aiSuggestions)\n        .where(eq(aiSuggestions.permitId, permitId));\n      totalDeleted += result.rowCount || 0;\n    }\n\n    return totalDeleted;\n  }\n\n  async updatePermitStatus(id: number, status: string, userId: number, comment?: string): Promise<Permit | undefined> {\n    // First add to status history\n    await this.addStatusHistoryEntry(id, status, userId, comment);\n\n    // Prepare update object with status-specific timestamps\n    const updateData: Partial<Permit> = {\n      status,\n      updatedAt: new Date()\n    };\n\n    // Set specific timestamps based on status\n    switch (status) {\n      case 'pending':\n        updateData.submittedAt = new Date();\n        updateData.submittedBy = userId;\n        break;\n      case 'approved':\n        updateData.approvedAt = new Date();\n        break;\n      case 'active':\n        updateData.activatedAt = new Date();\n        break;\n      case 'completed':\n        updateData.completedAt = new Date();\n        break;\n    }\n\n    const [updatedPermit] = await db\n      .update(permits)\n      .set(updateData)\n      .where(eq(permits.id, id))\n      .returning();\n\n    return updatedPermit;\n  }\n\n  async addStatusHistoryEntry(permitId: number, status: string, userId: number, comment?: string): Promise<void> {\n    // Get current permit to read existing history\n    const permit = await this.getPermit(permitId);\n    if (!permit) return;\n\n    // Get user name for history entry\n    const user = await this.getUser(userId);\n    const userName = user?.username || 'Unknown';\n\n    // Parse existing history\n    const existingHistory = permit.statusHistory ? JSON.parse(permit.statusHistory) : [];\n\n    // Add new entry\n    const newEntry = {\n      status,\n      timestamp: new Date().toISOString(),\n      userId,\n      userName,\n      comment\n    };\n\n    const updatedHistory = [...existingHistory, newEntry];\n\n    // Update permit with new history\n    await db\n      .update(permits)\n      .set({ \n        statusHistory: JSON.stringify(updatedHistory),\n        updatedAt: new Date()\n      })\n      .where(eq(permits.id, permitId));\n  }\n\n  // System Settings operations\n  async getSystemSettings(): Promise<SystemSettings | undefined> {\n    const [settings] = await db.select().from(systemSettings).limit(1);\n    return settings || undefined;\n  }\n\n  async updateSystemSettings(updates: Partial<SystemSettings>): Promise<SystemSettings | undefined> {\n    const existing = await this.getSystemSettings();\n    \n    if (!existing) {\n      // Create default settings if none exist\n      const defaultSettings: InsertSystemSettings = {\n        applicationTitle: updates.applicationTitle || \"Arbeitserlaubnis\",\n        headerIcon: updates.headerIcon || null\n      };\n      return await this.createSystemSettings(defaultSettings);\n    }\n\n    const [updated] = await db\n      .update(systemSettings)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(systemSettings.id, existing.id))\n      .returning();\n\n    return updated || undefined;\n  }\n\n  async createSystemSettings(insertSettings: InsertSystemSettings): Promise<SystemSettings> {\n    const [settings] = await db\n      .insert(systemSettings)\n      .values({\n        ...insertSettings,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      })\n      .returning();\n\n    return settings;\n  }\n\n  async getAllMapBackgrounds(): Promise<MapBackground[]> {\n    return await db.select().from(mapBackgrounds).orderBy(desc(mapBackgrounds.createdAt));\n  }\n\n  async getActiveMapBackgrounds(): Promise<MapBackground[]> {\n    return await db.select().from(mapBackgrounds).where(eq(mapBackgrounds.isActive, true)).orderBy(desc(mapBackgrounds.createdAt));\n  }\n\n  async getMapBackgroundById(id: number): Promise<MapBackground | undefined> {\n    const [background] = await db.select().from(mapBackgrounds).where(eq(mapBackgrounds.id, id));\n    return background;\n  }\n\n  async createMapBackground(insertBackground: InsertMapBackground): Promise<MapBackground> {\n    const [background] = await db.insert(mapBackgrounds).values(insertBackground).returning();\n    return background;\n  }\n\n  async updateMapBackground(id: number, updates: Partial<MapBackground>): Promise<MapBackground | undefined> {\n    const [background] = await db.update(mapBackgrounds).set(updates).where(eq(mapBackgrounds.id, id)).returning();\n    return background;\n  }\n\n  async deleteMapBackground(id: number): Promise<boolean> {\n    const result = await db.delete(mapBackgrounds).where(eq(mapBackgrounds.id, id));\n    return result.rowCount > 0;\n  }\n\n  async getPermitsForMap(): Promise<Permit[]> {\n    return await db.select().from(permits).orderBy(desc(permits.createdAt));\n  }\n\n  async updateWorkLocationPosition(id: number, x: number, y: number): Promise<WorkLocation | undefined> {\n    const [location] = await db.update(workLocations).set({\n      mapPositionX: x,\n      mapPositionY: y\n    }).where(eq(workLocations.id, id)).returning();\n    return location;\n  }\n}\n\nexport const storage = new DatabaseStorage();","size_bytes":52053},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2254},"shared/schema.ts":{"content":"import { pgTable, text, serial, integer, boolean, timestamp, jsonb, varchar, real } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Sessions table for authentication\nexport const sessions = pgTable(\"sessions\", {\n  id: serial(\"id\").primaryKey(),\n  sessionId: varchar(\"session_id\", { length: 255 }).notNull().unique(),\n  userId: integer(\"user_id\").references(() => users.id).notNull(),\n  expiresAt: timestamp(\"expires_at\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const users = pgTable(\"users\", {\n  id: serial(\"id\").primaryKey(),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  fullName: text(\"full_name\").notNull(),\n  department: text(\"department\").notNull(),\n  role: text(\"role\").notNull(), // 'admin', 'department_head', 'safety_officer', 'maintenance', 'employee'\n});\n\nexport const permits = pgTable(\"permits\", {\n  id: serial(\"id\").primaryKey(),\n  permitId: text(\"permit_id\").notNull().unique(), // e.g., CS-2024-001\n  type: text(\"type\").notNull(), // 'confined_space', 'hot_work', 'electrical', 'chemical', 'height'\n  location: text(\"location\").notNull(),\n  workLocationId: integer(\"work_location_id\").references(() => workLocations.id),\n  mapPositionX: real(\"map_position_x\"),\n  mapPositionY: real(\"map_position_y\"),\n  description: text(\"description\").notNull(),\n  requestorId: integer(\"requestor_id\").references(() => users.id),\n  requestorName: text(\"requestor_name\").notNull(),\n  department: text(\"department\").notNull(),\n  contactNumber: text(\"contact_number\").notNull(),\n  emergencyContact: text(\"emergency_contact\").notNull(),\n  startDate: timestamp(\"start_date\"),\n  endDate: timestamp(\"end_date\"),\n  status: text(\"status\").notNull().default('pending'), // 'pending', 'approved', 'active', 'completed', 'expired', 'rejected'\n  riskLevel: text(\"risk_level\"), // 'low', 'medium', 'high', 'critical'\n  safetyOfficer: text(\"safety_officer\"),\n  departmentHead: text(\"department_head\"), // Required approver\n  maintenanceApprover: text(\"maintenance_approver\"), // Required approver\n  identifiedHazards: text(\"identified_hazards\"),\n  additionalComments: text(\"additional_comments\"),\n  \n  // TRBS Hazard Assessment - replaces old safety checklist and atmospheric monitoring\n  selectedHazards: text(\"selected_hazards\").array(), // Array of \"categoryId-hazardIndex\" strings\n  hazardNotes: text(\"hazard_notes\"), // JSON string with notes per hazard\n  completedMeasures: text(\"completed_measures\").array(), // Array of completed protective measure IDs\n  \n  // Approval tracking - Required approvals\n  departmentHeadApproval: boolean(\"department_head_approval\").default(false),\n  departmentHeadApprovalDate: timestamp(\"department_head_approval_date\"),\n  maintenanceApproval: boolean(\"maintenance_approval\").default(false),\n  maintenanceApprovalDate: timestamp(\"maintenance_approval_date\"),\n  // Optional additional approvals\n  safetyOfficerApproval: boolean(\"safety_officer_approval\").default(false),\n  safetyOfficerApprovalDate: timestamp(\"safety_officer_approval_date\"),\n  \n  // Performer information - filled after approval\n  performerName: text(\"performer_name\"),\n  performerSignature: text(\"performer_signature\"),\n  workStartedAt: timestamp(\"work_started_at\"),\n  workCompletedAt: timestamp(\"work_completed_at\"),\n  \n  // Safety assessment fields - AI recommendations\n  immediateActions: text(\"immediate_actions\"), // JSON array of immediate actions needed\n  beforeWorkStarts: text(\"before_work_starts\"), // JSON array of actions before work begins\n  complianceNotes: text(\"compliance_notes\"), // Compliance and regulatory notes\n  \n  // Risk assessment fields\n  overallRisk: text(\"overall_risk\"), // low, medium, high, critical\n  \n  // Workflow tracking fields\n  statusHistory: text(\"status_history\"), // JSON array of status changes\n  submittedAt: timestamp(\"submitted_at\"),\n  approvedAt: timestamp(\"approved_at\"),\n  activatedAt: timestamp(\"activated_at\"),\n  completedAt: timestamp(\"completed_at\"),\n  submittedBy: integer(\"submitted_by\").references(() => users.id),\n  \n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const notifications = pgTable(\"notifications\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").references(() => users.id).notNull(),\n  title: text(\"title\").notNull(),\n  message: text(\"message\").notNull(),\n  type: text(\"type\").notNull(), // 'info', 'warning', 'success', 'error'\n  relatedPermitId: integer(\"related_permit_id\").references(() => permits.id),\n  isRead: boolean(\"is_read\").default(false).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const templates = pgTable(\"templates\", {\n  id: serial(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  template: jsonb(\"template\").notNull(),\n  createdBy: integer(\"created_by\").notNull().references(() => users.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const aiSuggestions = pgTable(\"ai_suggestions\", {\n  id: serial(\"id\").primaryKey(),\n  permitId: integer(\"permit_id\").references(() => permits.id).notNull(),\n  suggestionType: text(\"suggestion_type\").notNull(), // 'improvement', 'safety', 'compliance'\n  fieldName: text(\"field_name\"), // Which permit field this suggestion applies to\n  originalValue: text(\"original_value\"),\n  suggestedValue: text(\"suggested_value\").notNull(),\n  reasoning: text(\"reasoning\").notNull(),\n  priority: text(\"priority\").notNull(), // 'low', 'medium', 'high', 'critical'\n  status: text(\"status\").notNull().default('pending'), // 'pending', 'accepted', 'rejected'\n  appliedAt: timestamp(\"applied_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const webhookConfig = pgTable(\"webhook_config\", {\n  id: serial(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  webhookUrl: text(\"webhook_url\").notNull(),\n  isActive: boolean(\"is_active\").default(true).notNull(),\n  lastTestedAt: timestamp(\"last_tested_at\"),\n  lastTestStatus: text(\"last_test_status\"), // 'success', 'failed'\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const workLocations = pgTable(\"work_locations\", {\n  id: serial(\"id\").primaryKey(),\n  name: text(\"name\").notNull().unique(),\n  description: text(\"description\"),\n  building: text(\"building\"),\n  area: text(\"area\"),\n  mapPositionX: integer(\"map_position_x\"),\n  mapPositionY: integer(\"map_position_y\"),\n  mapBackgroundId: integer(\"map_background_id\").references(() => mapBackgrounds.id),\n  isActive: boolean(\"is_active\").default(true).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const permitAttachments = pgTable(\"permit_attachments\", {\n  id: serial(\"id\").primaryKey(),\n  permitId: integer(\"permit_id\").references(() => permits.id).notNull(),\n  fileName: text(\"file_name\").notNull(),\n  originalName: text(\"original_name\").notNull(),\n  fileType: text(\"file_type\").notNull(), // 'image', 'document', 'other'\n  mimeType: text(\"mime_type\").notNull(),\n  fileSize: integer(\"file_size\").notNull(), // in bytes\n  filePath: text(\"file_path\").notNull(),\n  uploadedBy: integer(\"uploaded_by\").references(() => users.id),\n  description: text(\"description\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const mapBackgrounds = pgTable(\"map_backgrounds\", {\n  id: serial(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  imagePath: text(\"image_path\").notNull(),\n  isActive: boolean(\"is_active\").default(true).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const systemSettings = pgTable(\"system_settings\", {\n  id: serial(\"id\").primaryKey(),\n  headerIcon: text(\"header_icon\"), // Base64 encoded image or file path\n  applicationTitle: text(\"application_title\").notNull().default(\"Arbeitserlaubnis\"),\n  defaultMapView: text(\"default_map_view\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n});\n\nexport const insertPermitSchema = createInsertSchema(permits).omit({\n  id: true,\n  permitId: true,\n  createdAt: true,\n  updatedAt: true,\n}).extend({\n  startDate: z.string(),\n  endDate: z.string(),\n  immediateActions: z.string().optional(),\n  beforeWorkStarts: z.string().optional(),\n  complianceNotes: z.string().optional(),\n  overallRisk: z.string().optional(),\n  positionX: z.number().optional(),\n  positionY: z.number().optional(),\n});\n\n// Schema for draft permits with optional fields\nexport const insertDraftPermitSchema = createInsertSchema(permits).omit({\n  id: true,\n  permitId: true,\n  createdAt: true,\n  updatedAt: true,\n}).extend({\n  startDate: z.string().nullable().optional(),\n  endDate: z.string().nullable().optional(),\n  type: z.string().optional(),\n  location: z.string().optional(),\n  description: z.string().optional(),\n  requestorName: z.string().optional(),\n  department: z.string().optional(),\n  contactNumber: z.string().optional(),\n  emergencyContact: z.string().optional(),\n  riskLevel: z.string().optional(),\n  safetyOfficer: z.string().optional(),\n  departmentHead: z.string().optional(),\n  maintenanceApprover: z.string().optional(),\n  identifiedHazards: z.string().optional(),\n  additionalComments: z.string().optional(),\n  selectedHazards: z.array(z.string()).optional(),\n  hazardNotes: z.string().optional(),\n  completedMeasures: z.array(z.string()).optional(),\n  immediateActions: z.string().optional(),\n  beforeWorkStarts: z.string().optional(),\n  complianceNotes: z.string().optional(),\n  overallRisk: z.string().optional(),\n  positionX: z.number().optional(),\n  positionY: z.number().optional(),\n  status: z.string().default(\"draft\"),\n}).partial();\n\nexport const insertNotificationSchema = createInsertSchema(notifications).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertTemplateSchema = createInsertSchema(templates).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertAiSuggestionSchema = createInsertSchema(aiSuggestions).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertWebhookConfigSchema = createInsertSchema(webhookConfig).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertWorkLocationSchema = createInsertSchema(workLocations).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertMapBackgroundSchema = createInsertSchema(mapBackgrounds).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertPermitAttachmentSchema = createInsertSchema(permitAttachments).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertSessionSchema = createInsertSchema(sessions).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertSystemSettingsSchema = createInsertSchema(systemSettings).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type InsertPermit = z.infer<typeof insertPermitSchema>;\nexport type Permit = typeof permits.$inferSelect;\nexport type InsertNotification = z.infer<typeof insertNotificationSchema>;\nexport type Notification = typeof notifications.$inferSelect;\nexport type InsertTemplate = z.infer<typeof insertTemplateSchema>;\nexport type Template = typeof templates.$inferSelect;\nexport type InsertAiSuggestion = z.infer<typeof insertAiSuggestionSchema>;\nexport type AiSuggestion = typeof aiSuggestions.$inferSelect;\nexport type InsertWebhookConfig = z.infer<typeof insertWebhookConfigSchema>;\nexport type WebhookConfig = typeof webhookConfig.$inferSelect;\nexport type InsertWorkLocation = z.infer<typeof insertWorkLocationSchema>;\nexport type WorkLocation = typeof workLocations.$inferSelect;\nexport type InsertPermitAttachment = z.infer<typeof insertPermitAttachmentSchema>;\nexport type PermitAttachment = typeof permitAttachments.$inferSelect;\nexport type InsertSession = z.infer<typeof insertSessionSchema>;\nexport type Session = typeof sessions.$inferSelect;\nexport type InsertSystemSettings = z.infer<typeof insertSystemSettingsSchema>;\nexport type SystemSettings = typeof systemSettings.$inferSelect;\nexport type InsertMapBackground = z.infer<typeof insertMapBackgroundSchema>;\nexport type MapBackground = typeof mapBackgrounds.$inferSelect;\n","size_bytes":12538},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { AuthProvider } from \"@/contexts/AuthContext\";\nimport { ProtectedRoute } from \"@/components/ProtectedRoute\";\nimport Dashboard from \"@/pages/dashboard\";\nimport Permits from \"@/pages/permits\";\nimport Drafts from \"@/pages/drafts\";\nimport Settings from \"@/pages/settings\";\nimport PermitDetails from \"@/pages/permit-details\";\nimport PermitPrint from \"@/pages/permit-print\";\nimport UserManagement from \"@/pages/user-management\";\nimport Approvals from \"@/pages/approvals\";\nimport Login from \"@/pages/login\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/login\">\n        <ProtectedRoute requireAuth={false}>\n          <Login />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/\">\n        <ProtectedRoute>\n          <Dashboard />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/permits\">\n        <ProtectedRoute>\n          <Permits />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/permit/:id\">\n        <ProtectedRoute>\n          <PermitDetails />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/permit/:id/print\">\n        <ProtectedRoute>\n          <PermitPrint />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/approvals\">\n        <ProtectedRoute>\n          <Approvals />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/drafts\">\n        <ProtectedRoute>\n          <Drafts />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/settings\">\n        <ProtectedRoute>\n          <Settings />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/user-management\">\n        <ProtectedRoute>\n          <UserManagement />\n        </ProtectedRoute>\n      </Route>\n      <Route>\n        <ProtectedRoute>\n          <NotFound />\n        </ProtectedRoute>\n      </Route>\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <AuthProvider>\n        <TooltipProvider>\n          <Toaster />\n          <Router />\n        </TooltipProvider>\n      </AuthProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2364},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: 0 0% 100%;\n  --foreground: 20 14.3% 4.1%;\n  --muted: 60 4.8% 95.9%;\n  --muted-foreground: 25 5.3% 44.7%;\n  --popover: 0 0% 100%;\n  --popover-foreground: 20 14.3% 4.1%;\n  --card: 0 0% 100%;\n  --card-foreground: 20 14.3% 4.1%;\n  --border: 20 5.9% 90%;\n  --input: 20 5.9% 90%;\n  --primary: 207 90% 54%;\n  --primary-foreground: 211 100% 99%;\n  --secondary: 60 4.8% 95.9%;\n  --secondary-foreground: 24 9.8% 10%;\n  --accent: 60 4.8% 95.9%;\n  --accent-foreground: 24 9.8% 10%;\n  --destructive: 0 84.2% 60.2%;\n  --destructive-foreground: 60 9.1% 97.8%;\n  --ring: 20 14.3% 4.1%;\n  --radius: 0.5rem;\n  \n  /* Industrial color palette */\n  --safety-blue: 207 90% 54%; /* #1565C0 */\n  --warning-orange: 28 84% 56%; /* #FFA726 */\n  --safety-green: 122 39% 49%; /* #2E7D32 */\n  --alert-red: 358 75% 46%; /* #C62828 */\n  --caution-orange: 35 100% 47%; /* #F57C00 */\n  --industrial-gray: 204 26% 27%; /* #37474F */\n  --secondary-gray: 200 18% 46%; /* #546E7A */\n  --light-gray: 206 18% 62%; /* #90A4AE */\n}\n\n/* Print styles */\n@media print {\n  /* Hide non-essential elements during print */\n  .print-hide,\n  button:not(.print-show),\n  nav,\n  .navigation-header,\n  .sticky {\n    display: none !important;\n  }\n  \n  /* Optimize page layout for print */\n  body {\n    -webkit-print-color-adjust: exact;\n    print-color-adjust: exact;\n  }\n  \n  .min-h-screen {\n    min-height: auto;\n  }\n  \n  /* Ensure proper page breaks */\n  .print-page-break {\n    page-break-before: always;\n  }\n  \n  .print-avoid-break {\n    page-break-inside: avoid;\n  }\n  \n  /* Adjust margins and spacing for print */\n  .max-w-7xl {\n    max-width: 100%;\n    margin: 0;\n    padding: 1rem;\n  }\n  \n  /* Style headers for print */\n  h1, h2, h3 {\n    color: #000 !important;\n  }\n  \n  /* Ensure backgrounds and borders show in print */\n  .bg-gray-50,\n  .bg-white {\n    background-color: white !important;\n  }\n  \n  .border,\n  .border-b,\n  .border-gray-200 {\n    border-color: #000 !important;\n  }\n  \n  /* Make text readable in print */\n  .text-secondary-gray,\n  .text-industrial-gray {\n    color: #000 !important;\n  }\n}\n\n.dark {\n  --background: 240 10% 3.9%;\n  --foreground: 0 0% 98%;\n  --muted: 240 3.7% 15.9%;\n  --muted-foreground: 240 5% 64.9%;\n  --popover: 240 10% 3.9%;\n  --popover-foreground: 0 0% 98%;\n  --card: 240 10% 3.9%;\n  --card-foreground: 0 0% 98%;\n  --border: 240 3.7% 15.9%;\n  --input: 240 3.7% 15.9%;\n  --primary: 207 90% 54%;\n  --primary-foreground: 211 100% 99%;\n  --secondary: 240 3.7% 15.9%;\n  --secondary-foreground: 0 0% 98%;\n  --accent: 240 3.7% 15.9%;\n  --accent-foreground: 0 0% 98%;\n  --destructive: 0 62.8% 30.6%;\n  --destructive-foreground: 0 0% 98%;\n  --ring: 240 4.9% 83.9%;\n  --radius: 0.5rem;\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    font-family: 'Inter', ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n  }\n}\n\n@layer utilities {\n  .text-safety-blue {\n    color: hsl(var(--safety-blue));\n  }\n  \n  .bg-safety-blue {\n    background-color: hsl(var(--safety-blue));\n  }\n  \n  .text-warning-orange {\n    color: hsl(var(--warning-orange));\n  }\n  \n  .bg-warning-orange {\n    background-color: hsl(var(--warning-orange));\n  }\n  \n  .text-safety-green {\n    color: hsl(var(--safety-green));\n  }\n  \n  .bg-safety-green {\n    background-color: hsl(var(--safety-green));\n  }\n  \n  .text-alert-red {\n    color: hsl(var(--alert-red));\n  }\n  \n  .bg-alert-red {\n    background-color: hsl(var(--alert-red));\n  }\n  \n  .text-caution-orange {\n    color: hsl(var(--caution-orange));\n  }\n  \n  .bg-caution-orange {\n    background-color: hsl(var(--caution-orange));\n  }\n  \n  .text-industrial-gray {\n    color: hsl(var(--industrial-gray));\n  }\n  \n  .bg-industrial-gray {\n    background-color: hsl(var(--industrial-gray));\n  }\n  \n  .text-secondary-gray {\n    color: hsl(var(--secondary-gray));\n  }\n  \n  .bg-secondary-gray {\n    background-color: hsl(var(--secondary-gray));\n  }\n  \n  .text-light-gray {\n    color: hsl(var(--light-gray));\n  }\n  \n  .bg-light-gray {\n    background-color: hsl(var(--light-gray));\n  }\n\n  /* Mobile-specific utility classes */\n  .mobile-scroll {\n    overflow-x: auto;\n    -webkit-overflow-scrolling: touch;\n  }\n\n  .mobile-safe-area {\n    padding-bottom: env(safe-area-inset-bottom);\n  }\n\n  .mobile-touch-target {\n    min-height: 44px;\n    min-width: 44px;\n  }\n\n  @media (max-width: 768px) {\n    .mobile-full-screen {\n      min-height: 100vh;\n      min-height: 100dvh;\n    }\n    \n    .mobile-padding {\n      padding: 1rem;\n    }\n    \n    .mobile-text-responsive {\n      font-size: 0.875rem;\n      line-height: 1.25rem;\n    }\n    \n    .mobile-card-spacing {\n      margin-bottom: 1rem;\n    }\n    \n    .mobile-button-stack {\n      flex-direction: column;\n      gap: 0.5rem;\n    }\n    \n    .mobile-button-stack > * {\n      width: 100%;\n    }\n    \n    .mobile-form-spacing {\n      margin-bottom: 1rem;\n    }\n    \n    .mobile-dialog-content {\n      margin: 0;\n      width: 100%;\n      max-width: 100%;\n      height: 100%;\n      max-height: 100%;\n      border-radius: 0;\n    }\n    \n    .mobile-table-hide {\n      display: none;\n    }\n    \n    .mobile-card-show {\n      display: block;\n    }\n  }\n}\n","size_bytes":5279},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\n// Global error handler to catch unhandled promise rejections\nwindow.addEventListener('unhandledrejection', (event) => {\n  console.error('Unhandled promise rejection:', event.reason);\n  console.error('Promise:', event.promise);\n  console.error('Stack trace:', event.reason?.stack);\n  \n  // Prevent the default browser behavior that might cause navigation\n  event.preventDefault();\n});\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":543},"client/src/components/ProtectedRoute.tsx":{"content":"import { ReactNode } from \"react\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { useLocation } from \"wouter\";\nimport { useEffect } from \"react\";\n\ninterface ProtectedRouteProps {\n  children: ReactNode;\n  requireAuth?: boolean;\n}\n\nexport function ProtectedRoute({ children, requireAuth = true }: ProtectedRouteProps) {\n  const { isAuthenticated, isLoading } = useAuth();\n  const [, setLocation] = useLocation();\n\n  useEffect(() => {\n    if (!isLoading && requireAuth && !isAuthenticated) {\n      setLocation(\"/login\");\n    }\n  }, [isAuthenticated, isLoading, requireAuth, setLocation]);\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-safety-blue mx-auto mb-4\"></div>\n          <p className=\"text-secondary-gray\">Lade...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (requireAuth && !isAuthenticated) {\n    return null; // Will redirect to login\n  }\n\n  return <>{children}</>;\n}","size_bytes":1076},"client/src/components/ai-suggestions.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from \"@/components/ui/dialog\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { \n  Bot, \n  ThumbsUp, \n  ThumbsDown, \n  CheckCircle, \n  XCircle,\n  AlertTriangle,\n  Trash2,\n  Lightbulb,\n  Send,\n  Loader2\n} from \"lucide-react\";\n\ninterface AiSuggestion {\n  id: number;\n  permitId: number;\n  suggestionType: string;\n  fieldName?: string;\n  originalValue?: string;\n  suggestedValue: string;\n  reasoning: string;\n  priority: string;\n  status: string;\n  appliedAt?: string;\n  createdAt: string;\n}\n\ninterface AiSuggestionsProps {\n  permitId: number;\n  disabled?: boolean;\n}\n\nexport function AiSuggestions({ permitId, disabled = false }: AiSuggestionsProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [isAnalyzing, setIsAnalyzing] = useState(false);\n  const [analysisDialogOpen, setAnalysisDialogOpen] = useState(false);\n  const [resultDialogOpen, setResultDialogOpen] = useState(false);\n  const [resultMessage, setResultMessage] = useState('');\n  const [resultType, setResultType] = useState<'success' | 'error'>('success');\n  const [analysisStage, setAnalysisStage] = useState('checking');\n\n\n\n  const { data: allSuggestions = [], isLoading, error } = useQuery<AiSuggestion[]>({\n    queryKey: [`/api/permits/${permitId}/suggestions`],\n    refetchInterval: 5000, // Auto-refresh every 5 seconds\n  });\n\n\n\n  // Filter suggestions for current permit and pending status\n  const suggestions = allSuggestions.filter(suggestion => \n    suggestion.status === 'pending' && suggestion.permitId === permitId\n  );\n\n  const analyzeMutation = useMutation({\n    mutationFn: async () => {\n      setAnalysisStage('checking');\n\n      // Check if webhook is configured before starting analysis\n      const response = await fetch('/api/webhook-configs');\n      const webhookConfigs = await response.json();\n      const activeWebhook = webhookConfigs.find((config: any) => config.isActive);\n\n      if (!activeWebhook) {\n        throw new Error('Keine aktive Webhook-Konfiguration gefunden. Bitte konfigurieren Sie eine n8n Webhook-URL in den Einstellungen.');\n      }\n\n      setAnalysisStage('analyzing');\n      return apiRequest(`/api/permits/${permitId}/analyze`, \"POST\");\n    },\n    onMutate: () => {\n      setAnalysisDialogOpen(true);\n      setIsAnalyzing(true);\n    },\n    onSuccess: () => {\n      // Poll for new suggestions with proper completion detection\n      const pollInterval = setInterval(async () => {\n        queryClient.invalidateQueries({ queryKey: [`/api/permits/${permitId}/suggestions`] });\n\n        // Check if suggestions have been received\n        const currentSuggestions = queryClient.getQueryData([`/api/permits/${permitId}/suggestions`]) as any[];\n        if (currentSuggestions && currentSuggestions.length > 0) {\n          clearInterval(pollInterval);\n          setIsAnalyzing(false);\n          setAnalysisDialogOpen(false);\n          setResultType('success');\n          setResultMessage(`AI-Analyse abgeschlossen. ${currentSuggestions.length} Verbesserungsvorschläge erhalten.`);\n          setResultDialogOpen(true);\n        }\n      }, 3000);\n\n      // Stop polling after 3 minutes with timeout message\n      setTimeout(() => {\n        clearInterval(pollInterval);\n        if (isAnalyzing) {\n          setIsAnalyzing(false);\n          setAnalysisDialogOpen(false);\n          setResultType('error');\n          setResultMessage('AI-Analyse-Timeout. Bitte versuchen Sie es erneut.');\n          setResultDialogOpen(true);\n        }\n      }, 180000);\n    },\n    onError: (error: any) => {\n      setIsAnalyzing(false);\n      setAnalysisDialogOpen(false);\n      setResultType('error');\n      setResultMessage(error.message || \"Die AI-Analyse konnte nicht gestartet werden.\");\n      setResultDialogOpen(true);\n    },\n  });\n\n  const applySuggestionMutation = useMutation({\n    mutationFn: async (suggestionId: number) => {\n      console.log(`Applying suggestion ${suggestionId} with React Query`);\n      const response = await apiRequest(`/api/suggestions/${suggestionId}/apply`, 'POST');\n      return await response.json();\n    },\n    onSuccess: (data) => {\n      console.log(\"Client: onSuccess called with:\", data);\n      \n      // LÖSUNG 2: Erweiterte Query-Invalidierung für AI-Vorschläge\n      // Invalidiere alle relevanten Queries um State-Synchronisation zu gewährleisten\n      queryClient.invalidateQueries({ queryKey: [`/api/permits/${permitId}/suggestions`] });\n      queryClient.invalidateQueries({ queryKey: [`/api/permits/${permitId}`] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/permits\"] });\n\n      // Force refetch permit data immediately to trigger React effect updates\n      queryClient.refetchQueries({ queryKey: [`/api/permits/${permitId}`] });\n      \n      // Zusätzliche Invalidierung für bessere State-Synchronisation\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n      \n      console.log(\"AI-Suggestions: Cache invalidated, permit data will be refetched\");\n\n      toast({\n        title: \"Vorschlag übernommen\",\n        description: data?.message || \"Der AI-Vorschlag wurde erfolgreich in die Genehmigung übernommen.\",\n      });\n    },\n    onError: (error: any) => {\n      console.error(\"Client: onError called with:\", error);\n      console.error(\"Client: Error type:\", typeof error);\n      console.error(\"Client: Error constructor:\", error?.constructor?.name);\n      const errorMessage = error?.message || String(error) || \"Der Vorschlag konnte nicht übernommen werden.\";\n      toast({\n        title: \"Fehler\",\n        description: errorMessage,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateStatusMutation = useMutation({\n    mutationFn: ({ suggestionId, status }: { suggestionId: number; status: string }) => {\n      return fetch(`/api/suggestions/${suggestionId}/status`, {\n        method: \"PATCH\",\n        headers: { \"Content-Type\": \"application/json\" },\n        credentials: \"include\",\n        body: JSON.stringify({ status }),\n      })\n      .then(async (response) => {\n        if (!response.ok) {\n          const errorText = await response.text();\n          throw new Error(`API Error: ${response.status} - ${errorText}`);\n        }\n        return await response.json();\n      })\n      .catch((error) => {\n        throw new Error(`Network Error: ${error.message}`);\n      });\n    },\n    onSuccess: (data, variables) => {\n      queryClient.invalidateQueries({ queryKey: [`/api/permits/${permitId}/suggestions`] });\n      toast({\n        title: variables.status === 'accepted' ? 'Vorschlag akzeptiert' : 'Vorschlag abgelehnt',\n        description: variables.status === 'accepted' ? 'Änderung wurde akzeptiert.' : 'Änderung wurde abgelehnt.',\n      });\n    },\n    onError: (error: any) => {\n      console.error(\"Status update error:\", error);\n      const errorMessage = error?.message || String(error) || \"Fehler beim Aktualisieren des Vorschlags.\";\n      toast({\n        title: \"Fehler\",\n        description: errorMessage,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleApplyAll = () => {\n    console.log(`Applying all suggestions for permit ${permitId} via iframe`);\n\n    toast({\n      title: \"Alle Vorschläge werden übernommen...\",\n      description: \"Bitte warten Sie einen Moment.\",\n    });\n\n    // Create hidden iframe to make the request without leaving the page\n    const iframe = document.createElement('iframe');\n    iframe.style.display = 'none';\n    iframe.src = `/api/permits/${permitId}/suggestions/apply-all?redirect=/success`;\n\n    iframe.onload = () => {\n      // LÖSUNG 2: Erweiterte Query-Invalidierung für \"Alle anwenden\"\n      queryClient.invalidateQueries({ queryKey: [`/api/permits/${permitId}/suggestions`] });\n      queryClient.invalidateQueries({ queryKey: [`/api/permits/${permitId}`] });\n      queryClient.invalidateQueries({ queryKey: ['/api/permits'] });\n      \n      // Force refetch permit data immediately to trigger React effect updates\n      queryClient.refetchQueries({ queryKey: [`/api/permits/${permitId}`] });\n      \n      console.log(\"AI-Suggestions: Cache invalidated after applying all suggestions\");\n\n      toast({\n        title: \"Alle Vorschläge übernommen\",\n        description: \"Alle AI-Vorschläge wurden erfolgreich übernommen.\",\n      });\n\n      // Clean up\n      document.body.removeChild(iframe);\n    };\n\n    iframe.onerror = () => {\n      toast({\n        title: \"Fehler\",\n        description: \"Fehler beim Übernehmen aller Vorschläge.\",\n        variant: \"destructive\",\n      });\n      document.body.removeChild(iframe);\n    };\n\n    document.body.appendChild(iframe);\n  };\n\n  const applyAllMutation = useMutation({\n    mutationFn: async () => {\n      // This is kept for backward compatibility but will be replaced with navigation\n      const response = await apiRequest(`/api/permits/${permitId}/suggestions/apply-all`, 'POST');\n      return await response.json();\n    },\n    onSuccess: (data: any) => {\n      // LÖSUNG 2: Erweiterte Query-Invalidierung für applyAllMutation\n      queryClient.invalidateQueries({ queryKey: [`/api/permits/${permitId}/suggestions`] });\n      queryClient.invalidateQueries({ queryKey: [`/api/permits/${permitId}`] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/permits\"] });\n      \n      // Force refetch permit data immediately\n      queryClient.refetchQueries({ queryKey: [`/api/permits/${permitId}`] });\n      \n      toast({\n        title: \"Alle Vorschläge übernommen\",\n        description: data?.message || 'Alle Vorschläge wurden erfolgreich übernommen.',\n      });\n    },\n    onError: (error: any) => {\n      console.error(\"Apply all error:\", error);\n      const errorMessage = error?.message || String(error) || \"Fehler beim Übernehmen aller Vorschläge.\";\n      toast({\n        title: \"Fehler\",\n        description: errorMessage,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const rejectAllMutation = useMutation({\n    mutationFn: () => {\n      return fetch(`/api/permits/${permitId}/suggestions/reject-all`, {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        credentials: \"include\",\n      })\n      .then(async (response) => {\n        if (!response.ok) {\n          const errorText = await response.text();\n          throw new Error(`API Error: ${response.status} - ${errorText}`);\n        }\n        return await response.json();\n      })\n      .catch((error) => {\n        throw new Error(`Network Error: ${error.message}`);\n      });\n    },\n    onSuccess: (data: any) => {\n      queryClient.invalidateQueries({ queryKey: [`/api/permits/${permitId}/suggestions`] });\n      toast({\n        title: \"Alle Vorschläge abgelehnt\",\n        description: data?.message || 'Alle Vorschläge wurden abgelehnt.',\n      });\n    },\n    onError: (error: any) => {\n      console.error(\"Reject all error:\", error);\n      const errorMessage = error?.message || String(error) || \"Fehler beim Ablehnen aller Vorschläge.\";\n      toast({\n        title: \"Fehler\",\n        description: errorMessage,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteAllMutation = useMutation({\n    mutationFn: () => {\n      return fetch(`/api/permits/${permitId}/suggestions`, {\n        method: \"DELETE\",\n        headers: { \"Content-Type\": \"application/json\" },\n        credentials: \"include\",\n      })\n      .then(async (response) => {\n        if (!response.ok) {\n          const errorText = await response.text();\n          throw new Error(`API Error: ${response.status} - ${errorText}`);\n        }\n        return await response.json();\n      })\n      .catch((error) => {\n        throw new Error(`Network Error: ${error.message}`);\n      });\n    },\n    onSuccess: (data: any) => {\n      queryClient.invalidateQueries({ queryKey: [`/api/permits/${permitId}/suggestions`] });\n      toast({\n        title: \"Alle Vorschläge gelöscht\",\n        description: data?.message || 'Alle Vorschläge wurden erfolgreich gelöscht.',\n      });\n    },\n    onError: (error: any) => {\n      console.error(\"Delete all error:\", error);\n      const errorMessage = error?.message || String(error) || \"Fehler beim Löschen aller Vorschläge.\";\n      toast({\n        title: \"Fehler\",\n        description: errorMessage,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleApplySuggestion = async (suggestionId: number) => {\n    console.log(`Applying suggestion ${suggestionId} via iframe`);\n\n    toast({\n      title: \"Vorschlag wird übernommen...\",\n      description: \"Bitte warten Sie einen Moment.\",\n    });\n\n    // Create hidden iframe to make the request without leaving the page\n    const iframe = document.createElement('iframe');\n    iframe.style.display = 'none';\n    iframe.src = `/api/suggestions/${suggestionId}/apply?redirect=/success`;\n\n    iframe.onload = () => {\n      // Request completed, refresh the suggestions and permit data\n      queryClient.invalidateQueries({ queryKey: [`/api/permits/${permitId}/suggestions`] });\n      queryClient.invalidateQueries({ queryKey: [`/api/permits/${permitId}`] });\n      queryClient.invalidateQueries({ queryKey: ['/api/permits'] });\n\n      toast({\n        title: \"Vorschlag übernommen\",\n        description: \"Der AI-Vorschlag wurde erfolgreich in die Genehmigung übernommen.\",\n      });\n\n      // Clean up\n      document.body.removeChild(iframe);\n    };\n\n    iframe.onerror = () => {\n      toast({\n        title: \"Fehler\",\n        description: \"Fehler beim Übernehmen des Vorschlags.\",\n        variant: \"destructive\",\n      });\n      document.body.removeChild(iframe);\n    };\n\n    document.body.appendChild(iframe);\n  };\n\n  const handleAcceptSuggestion = (suggestionId: number) => {\n    updateStatusMutation.mutate({ suggestionId, status: 'accepted' });\n  };\n\n  const handleRejectSuggestion = (suggestionId: number) => {\n    updateStatusMutation.mutate({ suggestionId, status: 'rejected' });\n  };\n\n  const getPriorityColor = (priority: string | undefined) => {\n    if (!priority) return 'bg-gray-100 text-gray-800 border-gray-200';\n    switch (priority) {\n      case 'critical': return 'bg-red-100 text-red-800 border-red-200';\n      case 'high': return 'bg-orange-100 text-orange-800 border-orange-200';\n      case 'medium': return 'bg-yellow-100 text-yellow-800 border-yellow-200';\n      case 'low': return 'bg-blue-100 text-blue-800 border-blue-200';\n      default: return 'bg-gray-100 text-gray-800 border-gray-200';\n    }\n  };\n\n  const getPriorityIcon = (priority: string | undefined) => {\n    if (!priority) return <Lightbulb className=\"h-4 w-4\" />;\n    switch (priority) {\n      case 'critical': return <AlertTriangle className=\"h-4 w-4\" />;\n      case 'high': return <AlertTriangle className=\"h-4 w-4\" />;\n      case 'medium': return <Lightbulb className=\"h-4 w-4\" />;\n      case 'low': return <Lightbulb className=\"h-4 w-4\" />;\n      default: return <Lightbulb className=\"h-4 w-4\" />;\n    }\n  };\n\n  const getTypeLabel = (type: string) => {\n    switch (type) {\n      case 'improvement': return 'Verbesserung';\n      case 'safety': return 'Sicherheit';\n      case 'compliance': return 'Compliance';\n      default: return type;\n    }\n  };\n\n  const getFieldLabel = (fieldName: string) => {\n    switch (fieldName) {\n      case 'preventiveMeasures': return 'Maßnahmen vor Arbeitsbeginn';\n      case 'beforeWorkStarts': return 'Maßnahmen vor Arbeitsbeginn';\n      case 'immediateActions': return 'Sofortmaßnahmen';\n      case 'additionalComments': return 'Zusätzliche Sicherheitshinweise';\n      case 'selectedHazards': return 'Ausgewählte Gefährdungen';\n      case 'hazardNotes': return 'Gefährdungsnotizen';\n      case 'overallRisk': return 'Gesamtrisiko';\n      case 'identifiedHazards': return 'Identifizierte Gefährdungen';\n      case 'riskLevel': return 'Risikostufe';\n      case 'complianceNotes': return 'Compliance-Hinweise';\n      case 'performerName': return 'Durchführende Person';\n      case 'emergencyContact': return 'Notfallkontakt';\n      case 'completedMeasures': return 'Abgeschlossene Maßnahmen';\n      default: return fieldName;\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <div className=\"flex items-center gap-2\">\n          <Bot className=\"h-5 w-5 text-blue-600\" />\n        </div>\n        <Button\n          onClick={() => analyzeMutation.mutate()}\n          disabled={analyzeMutation.isPending || isAnalyzing}\n          size=\"sm\"\n          className=\"bg-blue-600 hover:bg-blue-700\"\n        >\n          {analyzeMutation.isPending || isAnalyzing ? (\n            <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n          ) : (\n            <Send className=\"h-4 w-4 mr-2\" />\n          )}\n          {isAnalyzing ? 'Analysiert...' : 'AI-Analyse starten'}\n        </Button>\n      </div>\n\n      {suggestions.length > 0 && (\n        <div className=\"flex gap-2 flex-wrap\">\n          <Button\n            onClick={handleApplyAll}\n            size=\"sm\"\n            variant=\"outline\"\n            className=\"text-green-600 border-green-600 hover:bg-green-50\"\n          >\n            <CheckCircle className=\"h-4 w-4 mr-2\" />\n            Alle übernehmen\n          </Button>\n\n          <Button\n            onClick={() => rejectAllMutation.mutate()}\n            disabled={rejectAllMutation.isPending}\n            size=\"sm\"\n            variant=\"outline\"\n            className=\"text-orange-600 border-orange-600 hover:bg-orange-50\"\n          >\n            {rejectAllMutation.isPending ? (\n              <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n            ) : (\n              <XCircle className=\"h-4 w-4 mr-2\" />\n            )}\n            Alle ablehnen\n          </Button>\n\n          <Button\n            onClick={() => deleteAllMutation.mutate()}\n            disabled={deleteAllMutation.isPending}\n            size=\"sm\"\n            variant=\"outline\"\n            className=\"text-red-600 border-red-600 hover:bg-red-50\"\n          >\n            {deleteAllMutation.isPending ? (\n              <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n            ) : (\n              <Trash2 className=\"h-4 w-4 mr-2\" />\n            )}\n            Alle löschen\n          </Button>\n        </div>\n      )}\n\n      <div>\n        {isLoading ? (\n          <div className=\"text-center py-8\">\n            <Loader2 className=\"h-8 w-8 mx-auto animate-spin text-blue-600 mb-4\" />\n            <p className=\"text-secondary-gray\">Lade AI-Vorschläge...</p>\n          </div>\n        ) : suggestions.length === 0 ? (\n          <div className=\"text-center py-8 text-secondary-gray\">\n            <Bot className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n            <p className=\"font-medium\">Keine AI-Vorschläge verfügbar</p>\n            <p className=\"text-sm\">Starten Sie eine AI-Analyse, um Verbesserungsvorschläge zu erhalten</p>\n          </div>\n        ) : (\n          <div className=\"space-y-4\">\n            {suggestions.map((suggestion) => (\n              <div key={suggestion.id} className=\"border rounded-lg p-4 space-y-3\">\n                {/* Header */}\n                <div className=\"flex items-start justify-between\">\n                  <div className=\"flex items-center gap-3 flex-wrap\">\n                    <Badge \n                      variant=\"outline\" \n                      className={getPriorityColor(suggestion.priority)}\n                    >\n                      {getPriorityIcon(suggestion.priority)}\n                      <span className=\"ml-1\">{suggestion.priority ? suggestion.priority.charAt(0).toUpperCase() + suggestion.priority.slice(1) : 'Unbekannt'}</span>\n                    </Badge>\n                    <Badge variant=\"secondary\">\n                      {getTypeLabel(suggestion.suggestionType)}\n                    </Badge>\n                    {suggestion.fieldName && (\n                      <Badge variant=\"outline\" className=\"bg-purple-50 text-purple-700 border-purple-200\">\n                        {getFieldLabel(suggestion.fieldName)}\n                      </Badge>\n                    )}\n                    {suggestion.status === 'accepted' && (\n                      <Badge variant=\"default\" className=\"bg-green-100 text-green-800\">\n                        <CheckCircle className=\"h-3 w-3 mr-1\" />\n                        Übernommen\n                      </Badge>\n                    )}\n                    {suggestion.status === 'rejected' && (\n                      <Badge variant=\"destructive\">\n                        <XCircle className=\"h-3 w-3 mr-1\" />\n                        Abgelehnt\n                      </Badge>\n                    )}\n                  </div>\n                  <span className=\"text-xs text-secondary-gray\">\n                    {new Date(suggestion.createdAt).toLocaleString('de-DE')}\n                  </span>\n                </div>\n\n                {/* Content */}\n                <div className=\"space-y-2\">\n                  {suggestion.fieldName && suggestion.originalValue && (\n                    <div className=\"bg-gray-50 p-3 rounded\">\n                      <p className=\"text-sm font-medium text-gray-700 mb-1\">Aktueller Wert:</p>\n                      <p className=\"text-sm text-gray-600 font-mono\">{suggestion.originalValue}</p>\n                    </div>\n                  )}\n\n                  <div className=\"bg-blue-50 p-3 rounded\">\n                    <p className=\"text-sm font-medium text-blue-700 mb-1\">Vorgeschlagene Verbesserung:</p>\n                    <p className=\"text-sm text-blue-600\">{suggestion.suggestedValue}</p>\n                  </div>\n\n                  <div className=\"bg-yellow-50 p-3 rounded\">\n                    <p className=\"text-sm font-medium text-yellow-700 mb-1\">Begründung:</p>\n                    <p className=\"text-sm text-yellow-600\">{suggestion.reasoning}</p>\n                  </div>\n                </div>\n\n                {/* Actions */}\n                {suggestion.status === 'pending' && (\n                  <>\n                    <Separator />\n                    <div className=\"flex items-center gap-2\">\n                      <Button\n                        size=\"sm\"\n                        onClick={() => handleApplySuggestion(suggestion.id)}\n                        disabled={applySuggestionMutation.isPending}\n                        className=\"bg-green-600 hover:bg-green-700\"\n                      >\n                        <CheckCircle className=\"h-4 w-4 mr-1\" />\n                        Übernehmen\n                      </Button>\n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        onClick={() => handleRejectSuggestion(suggestion.id)}\n                        disabled={updateStatusMutation.isPending}\n                        className=\"text-red-600 border-red-600 hover:bg-red-50\"\n                      >\n                        <ThumbsDown className=\"h-4 w-4 mr-1\" />\n                        Ablehnen\n                      </Button>\n                    </div>\n                  </>\n                )}\n\n                {suggestion.appliedAt && (\n                  <div className=\"text-xs text-green-600 bg-green-50 p-2 rounded\">\n                    Automatisch übernommen am {new Date(suggestion.appliedAt).toLocaleString('de-DE')}\n                  </div>\n                )}\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n\n      {/* Analysis Progress Dialog */}\n      <Dialog open={analysisDialogOpen} onOpenChange={setAnalysisDialogOpen}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>AI-Analyse läuft</DialogTitle>\n            <DialogDescription>\n              Die Genehmigung wird analysiert, um Verbesserungsvorschläge zu finden.\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"flex items-center justify-center py-8\">\n            <div className=\"text-center space-y-4\">\n              <Loader2 className=\"h-12 w-12 mx-auto animate-spin text-blue-600\" />\n              <div className=\"space-y-2\">\n                {analysisStage === 'checking' && (\n                  <>\n                    <p className=\"text-lg font-medium\">Prüfe Webhook-Konfiguration...</p>\n                    <p className=\"text-sm text-gray-600\">Überprüfe AI-System Verfügbarkeit</p>\n                  </>\n                )}\n                {analysisStage === 'testing' && (\n                  <>\n                    <p className=\"text-lg font-medium\">Teste Verbindung...</p>\n                    <p className=\"text-sm text-gray-600\">Verbinde mit n8n Webhook</p>\n                  </>\n                )}\n                {analysisStage === 'analyzing' && (\n                  <>\n                    <p className=\"text-lg font-medium\">Analysiere Genehmigung...</p>\n                    <p className=\"text-sm text-gray-600\">Denke nach über mögliche Verbesserungen</p>\n                  </>\n                )}\n              </div>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Result Dialog */}\n      <Dialog open={resultDialogOpen} onOpenChange={setResultDialogOpen}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center gap-2\">\n              {resultType === 'success' ? (\n                <CheckCircle className=\"h-5 w-5 text-green-600\" />\n              ) : (\n                <XCircle className=\"h-5 w-5 text-red-600\" />\n              )}\n              {resultType === 'success' ? 'Erfolgreich' : 'Fehler'}\n            </DialogTitle>\n            <DialogDescription>\n              {resultType === 'success' \n                ? 'Die Aktion wurde erfolgreich ausgeführt.' \n                : 'Bei der Ausführung ist ein Fehler aufgetreten.'\n              }\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"py-4\">\n            <p className=\"text-gray-700\">{resultMessage}</p>\n          </div>\n          <div className=\"flex justify-end\">\n            <Button onClick={() => setResultDialogOpen(false)}>\n              OK\n            </Button>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":26559},"client/src/components/create-ai-suggestions.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from \"@/components/ui/dialog\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { \n  Bot, \n  ThumbsUp, \n  ThumbsDown, \n  CheckCircle, \n  XCircle,\n  AlertTriangle,\n  Trash2,\n  Lightbulb,\n  Send,\n  Loader2\n} from \"lucide-react\";\n\ninterface AiSuggestion {\n  id: number;\n  permitId: number;\n  suggestionType: string;\n  fieldName?: string;\n  originalValue?: string;\n  suggestedValue: string;\n  reasoning: string;\n  priority: string;\n  status: string;\n  appliedAt?: string;\n  createdAt: string;\n}\n\ninterface CreateAiSuggestionsProps {\n  temporaryPermitId?: number;\n  onAnalysisStart: () => Promise<number>; // Returns the created permit ID\n}\n\nexport function CreateAiSuggestions({ temporaryPermitId, onAnalysisStart }: CreateAiSuggestionsProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [isAnalyzing, setIsAnalyzing] = useState(false);\n  const [analysisDialogOpen, setAnalysisDialogOpen] = useState(false);\n  const [resultDialogOpen, setResultDialogOpen] = useState(false);\n  const [resultMessage, setResultMessage] = useState('');\n  const [resultType, setResultType] = useState<'success' | 'error'>('success');\n  const [analysisStage, setAnalysisStage] = useState('checking');\n  const [activePermitId, setActivePermitId] = useState<number | undefined>(temporaryPermitId);\n\n  // Fetch suggestions if we have an active permit\n  const { data: suggestions = [], isLoading, refetch } = useQuery<AiSuggestion[]>({\n    queryKey: [`/api/permits/${activePermitId}/suggestions`],\n    enabled: !!activePermitId,\n  });\n\n  const startAnalysisMutation = useMutation({\n    mutationFn: async () => {\n      // Create temporary permit first\n      const permitId = await onAnalysisStart();\n      setActivePermitId(permitId);\n      \n      // Start analysis\n      const response = await fetch(`/api/permits/${permitId}/analyze`, {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        credentials: \"include\",\n        body: JSON.stringify({})\n      });\n      \n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(`AI-Analyse fehlgeschlagen: ${response.status} - ${errorText}`);\n      }\n      \n      return permitId;\n    },\n    onMutate: () => {\n      setIsAnalyzing(true);\n      setAnalysisDialogOpen(true);\n      setAnalysisStage('checking');\n    },\n    onSuccess: (permitId) => {\n      console.log(\"Analysis started for permit:\", permitId);\n      \n      // Start polling for results\n      const pollInterval = setInterval(async () => {\n        try {\n          const response = await fetch(`/api/permits/${permitId}/suggestions`, {\n            credentials: \"include\"\n          });\n          if (response.ok) {\n            const suggestions = await response.json();\n            if (suggestions.length > 0) {\n              clearInterval(pollInterval);\n              setIsAnalyzing(false);\n              setAnalysisDialogOpen(false);\n              setResultType('success');\n              setResultMessage(`AI-Analyse abgeschlossen. ${suggestions.length} Verbesserungsvorschläge erhalten.`);\n              setResultDialogOpen(true);\n              refetch();\n            }\n          }\n        } catch (error) {\n          console.error(\"Polling error:\", error);\n        }\n      }, 3000);\n\n      // Stop polling after 3 minutes\n      setTimeout(() => {\n        clearInterval(pollInterval);\n        if (isAnalyzing) {\n          setIsAnalyzing(false);\n          setAnalysisDialogOpen(false);\n          setResultType('error');\n          setResultMessage('AI-Analyse-Timeout. Bitte versuchen Sie es erneut.');\n          setResultDialogOpen(true);\n        }\n      }, 180000);\n    },\n    onError: (error: any) => {\n      setIsAnalyzing(false);\n      setAnalysisDialogOpen(false);\n      setResultType('error');\n      setResultMessage(error.message || \"Die AI-Analyse konnte nicht gestartet werden.\");\n      setResultDialogOpen(true);\n    },\n  });\n\n  const applySuggestionMutation = useMutation({\n    mutationFn: async (suggestionId: number) => {\n      const response = await apiRequest(`/api/suggestions/${suggestionId}/apply`, 'POST');\n      return await response.json();\n    },\n    onSuccess: (data) => {\n      if (activePermitId) {\n        queryClient.invalidateQueries({ queryKey: [`/api/permits/${activePermitId}/suggestions`] });\n        queryClient.invalidateQueries({ queryKey: [`/api/permits/${activePermitId}`] });\n        queryClient.invalidateQueries({ queryKey: [\"/api/permits\"] });\n        queryClient.refetchQueries({ queryKey: [`/api/permits/${activePermitId}`] });\n      }\n      \n      toast({\n        title: \"Vorschlag übernommen\",\n        description: data?.message || \"Der AI-Vorschlag wurde erfolgreich übernommen.\",\n      });\n    },\n    onError: (error: any) => {\n      const errorMessage = error?.message || String(error) || \"Der Vorschlag konnte nicht übernommen werden.\";\n      toast({\n        title: \"Fehler\",\n        description: errorMessage,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateStatusMutation = useMutation({\n    mutationFn: ({ suggestionId, status }: { suggestionId: number; status: string }) => {\n      return fetch(`/api/suggestions/${suggestionId}/status`, {\n        method: \"PATCH\",\n        headers: { \"Content-Type\": \"application/json\" },\n        credentials: \"include\",\n        body: JSON.stringify({ status }),\n      }).then(async (response) => {\n        if (!response.ok) {\n          const errorText = await response.text();\n          throw new Error(`API Error: ${response.status} - ${errorText}`);\n        }\n        return await response.json();\n      });\n    },\n    onSuccess: (data, variables) => {\n      if (activePermitId) {\n        queryClient.invalidateQueries({ queryKey: [`/api/permits/${activePermitId}/suggestions`] });\n      }\n      toast({\n        title: variables.status === 'accepted' ? 'Vorschlag akzeptiert' : 'Vorschlag abgelehnt',\n        description: variables.status === 'accepted' ? 'Änderung wurde akzeptiert.' : 'Änderung wurde abgelehnt.',\n      });\n    },\n    onError: (error: any) => {\n      const errorMessage = error?.message || String(error) || \"Fehler beim Aktualisieren des Vorschlags.\";\n      toast({\n        title: \"Fehler\",\n        description: errorMessage,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleApplyAll = () => {\n    if (!activePermitId) return;\n    \n    toast({\n      title: \"Alle Vorschläge werden übernommen...\",\n      description: \"Bitte warten Sie einen Moment.\",\n    });\n\n    fetch(`/api/permits/${activePermitId}/suggestions/apply-all`, {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      credentials: \"include\",\n    })\n    .then(async (response) => {\n      if (response.ok) {\n        const data = await response.json();\n        queryClient.invalidateQueries({ queryKey: [`/api/permits/${activePermitId}/suggestions`] });\n        queryClient.invalidateQueries({ queryKey: [`/api/permits/${activePermitId}`] });\n        queryClient.invalidateQueries({ queryKey: [\"/api/permits\"] });\n        queryClient.refetchQueries({ queryKey: [`/api/permits/${activePermitId}`] });\n        \n        toast({\n          title: \"Alle Vorschläge übernommen\",\n          description: `${data.applied || 0} Vorschläge wurden erfolgreich übernommen.`,\n        });\n      } else {\n        throw new Error(\"Fehler beim Übernehmen aller Vorschläge\");\n      }\n    })\n    .catch((error) => {\n      toast({\n        title: \"Fehler\",\n        description: error.message || \"Fehler beim Übernehmen aller Vorschläge.\",\n        variant: \"destructive\",\n      });\n    });\n  };\n\n  const handleRejectAll = () => {\n    if (!activePermitId) return;\n    \n    fetch(`/api/permits/${activePermitId}/suggestions/reject-all`, {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      credentials: \"include\",\n    })\n    .then(async (response) => {\n      if (response.ok) {\n        const data = await response.json();\n        queryClient.invalidateQueries({ queryKey: [`/api/permits/${activePermitId}/suggestions`] });\n        \n        toast({\n          title: \"Alle Vorschläge abgelehnt\",\n          description: `${data.rejected || 0} Vorschläge wurden abgelehnt.`,\n        });\n      } else {\n        throw new Error(\"Fehler beim Ablehnen aller Vorschläge\");\n      }\n    })\n    .catch((error) => {\n      toast({\n        title: \"Fehler\",\n        description: error.message || \"Fehler beim Ablehnen aller Vorschläge.\",\n        variant: \"destructive\",\n      });\n    });\n  };\n\n  const handleDeleteAll = () => {\n    if (!activePermitId) return;\n    \n    fetch(`/api/permits/${activePermitId}/suggestions/delete-all`, {\n      method: \"DELETE\",\n      headers: { \"Content-Type\": \"application/json\" },\n      credentials: \"include\",\n    })\n    .then(async (response) => {\n      if (response.ok) {\n        const data = await response.json();\n        queryClient.invalidateQueries({ queryKey: [`/api/permits/${activePermitId}/suggestions`] });\n        \n        toast({\n          title: \"Alle Vorschläge gelöscht\",\n          description: `${data.deleted || 0} Vorschläge wurden gelöscht.`,\n        });\n      } else {\n        throw new Error(\"Fehler beim Löschen aller Vorschläge\");\n      }\n    })\n    .catch((error) => {\n      toast({\n        title: \"Fehler\",\n        description: error.message || \"Fehler beim Löschen aller Vorschläge.\",\n        variant: \"destructive\",\n      });\n    });\n  };\n\n  const getPriorityBadgeVariant = (priority: string) => {\n    switch (priority.toLowerCase()) {\n      case 'high': return 'destructive';\n      case 'medium': return 'default';\n      case 'low': return 'secondary';\n      default: return 'outline';\n    }\n  };\n\n  const getStatusBadgeVariant = (status: string) => {\n    switch (status.toLowerCase()) {\n      case 'pending': return 'outline';\n      case 'accepted': return 'default';\n      case 'rejected': return 'secondary';\n      case 'applied': return 'default';\n      default: return 'outline';\n    }\n  };\n\n  if (!activePermitId) {\n    return (\n      <div className=\"space-y-4\">\n        <div className=\"flex items-center justify-between\">\n          <h3 className=\"text-lg font-medium\">KI-Verbesserungsvorschläge</h3>\n          <Button \n            onClick={() => startAnalysisMutation.mutate()}\n            disabled={startAnalysisMutation.isPending}\n            className=\"flex items-center gap-2\"\n          >\n            <Send className=\"h-4 w-4\" />\n            AI-Analyse starten\n          </Button>\n        </div>\n        \n        <div className=\"text-center py-8\">\n          <Bot className=\"h-12 w-12 mx-auto text-muted-foreground mb-4\" />\n          <p className=\"text-muted-foreground mb-4\">Keine AI-Vorschläge verfügbar</p>\n          <p className=\"text-sm text-muted-foreground\">\n            Starten Sie eine AI-Analyse, um Verbesserungsvorschläge zu erhalten\n          </p>\n        </div>\n\n        {/* Analysis Progress Dialog */}\n        <Dialog open={analysisDialogOpen} onOpenChange={setAnalysisDialogOpen}>\n          <DialogContent className=\"sm:max-w-md\">\n            <DialogHeader>\n              <DialogTitle>AI-Analyse läuft</DialogTitle>\n              <DialogDescription>\n                Die Genehmigung wird analysiert, um Verbesserungsvorschläge zu finden.\n              </DialogDescription>\n            </DialogHeader>\n            <div className=\"flex flex-col items-center space-y-4 py-4\">\n              <Loader2 className=\"h-8 w-8 animate-spin text-blue-600\" />\n              <p className=\"text-sm text-center\">Analysiere Genehmigung...</p>\n              <p className=\"text-xs text-muted-foreground text-center\">\n                Denke nach über mögliche Verbesserungen\n              </p>\n            </div>\n          </DialogContent>\n        </Dialog>\n\n        {/* Results Dialog */}\n        <Dialog open={resultDialogOpen} onOpenChange={setResultDialogOpen}>\n          <DialogContent className=\"sm:max-w-md\">\n            <DialogHeader>\n              <DialogTitle className=\"flex items-center gap-2\">\n                {resultType === 'success' ? (\n                  <CheckCircle className=\"h-5 w-5 text-green-600\" />\n                ) : (\n                  <XCircle className=\"h-5 w-5 text-red-600\" />\n                )}\n                {resultType === 'success' ? 'Erfolgreich' : 'Fehler'}\n              </DialogTitle>\n              <DialogDescription>\n                Die Aktion wurde erfolgreich ausgeführt.\n              </DialogDescription>\n            </DialogHeader>\n            <div className=\"py-4\">\n              <p className=\"text-sm\">{resultMessage}</p>\n            </div>\n            <div className=\"flex justify-end\">\n              <Button onClick={() => setResultDialogOpen(false)}>\n                OK\n              </Button>\n            </div>\n          </DialogContent>\n        </Dialog>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"flex items-center justify-between\">\n        <h3 className=\"text-lg font-medium\">KI-Verbesserungsvorschläge</h3>\n        <Button \n          onClick={() => startAnalysisMutation.mutate()}\n          disabled={startAnalysisMutation.isPending}\n          className=\"flex items-center gap-2\"\n        >\n          <Send className=\"h-4 w-4\" />\n          AI-Analyse starten\n        </Button>\n      </div>\n\n      {suggestions.length > 0 && (\n        <div className=\"flex flex-wrap gap-2 mb-4\">\n          <Button \n            variant=\"outline\" \n            size=\"sm\" \n            onClick={handleApplyAll}\n            className=\"flex items-center gap-1\"\n          >\n            <CheckCircle className=\"h-4 w-4\" />\n            Alle übernehmen\n          </Button>\n          <Button \n            variant=\"outline\" \n            size=\"sm\" \n            onClick={handleRejectAll}\n            className=\"flex items-center gap-1\"\n          >\n            <XCircle className=\"h-4 w-4\" />\n            Alle ablehnen\n          </Button>\n          <Button \n            variant=\"outline\" \n            size=\"sm\" \n            onClick={handleDeleteAll}\n            className=\"flex items-center gap-1\"\n          >\n            <Trash2 className=\"h-4 w-4\" />\n            Alle löschen\n          </Button>\n        </div>\n      )}\n\n      {isLoading ? (\n        <div className=\"text-center py-4\">\n          <Loader2 className=\"h-6 w-6 animate-spin mx-auto\" />\n          <p className=\"text-sm text-muted-foreground mt-2\">Lade AI-Vorschläge...</p>\n        </div>\n      ) : suggestions.length === 0 ? (\n        <div className=\"text-center py-8\">\n          <Bot className=\"h-12 w-12 mx-auto text-muted-foreground mb-4\" />\n          <p className=\"text-muted-foreground mb-4\">Keine AI-Vorschläge verfügbar</p>\n          <p className=\"text-sm text-muted-foreground\">\n            Starten Sie eine AI-Analyse, um Verbesserungsvorschläge zu erhalten\n          </p>\n        </div>\n      ) : (\n        <div className=\"space-y-4\">\n          {suggestions.map((suggestion) => (\n            <Card key={suggestion.id} className=\"border-l-4 border-l-blue-500\">\n              <CardHeader className=\"pb-3\">\n                <div className=\"flex items-start justify-between\">\n                  <div className=\"flex items-center gap-2\">\n                    <AlertTriangle className=\"h-4 w-4 text-yellow-600\" />\n                    <Badge variant={getPriorityBadgeVariant(suggestion.priority)}>\n                      {suggestion.priority === 'high' ? 'High' : \n                       suggestion.priority === 'medium' ? 'Medium' : 'Low'}\n                    </Badge>\n                    <Badge variant=\"outline\">\n                      {suggestion.suggestionType === 'hazard_replacement' ? 'Ausgewählte Gefährdungen' :\n                       suggestion.suggestionType === 'hazard_notes' ? 'Gefährdungsnotizen' :\n                       suggestion.suggestionType === 'field_improvement' ? 'Feldverbesserung' :\n                       suggestion.suggestionType}\n                    </Badge>\n                    <span className=\"text-xs text-muted-foreground\">\n                      {new Date(suggestion.createdAt).toLocaleString('de-DE')}\n                    </span>\n                  </div>\n                </div>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                {suggestion.originalValue && (\n                  <div>\n                    <p className=\"text-sm font-medium mb-1\">Aktueller Wert:</p>\n                    <p className=\"text-sm text-muted-foreground font-mono bg-gray-50 p-2 rounded\">\n                      {typeof suggestion.originalValue === 'string' && suggestion.originalValue.startsWith('[') ? \n                        JSON.parse(suggestion.originalValue).join(', ') : \n                        suggestion.originalValue}\n                    </p>\n                  </div>\n                )}\n\n                <div>\n                  <p className=\"text-sm font-medium mb-1 text-blue-600\">Vorgeschlagene Verbesserung:</p>\n                  <p className=\"text-sm bg-blue-50 p-2 rounded font-mono\">\n                    {typeof suggestion.suggestedValue === 'string' && suggestion.suggestedValue.startsWith('[') ? \n                      JSON.parse(suggestion.suggestedValue).join(', ') : \n                      suggestion.suggestedValue}\n                  </p>\n                </div>\n\n                <div>\n                  <p className=\"text-sm font-medium mb-1 text-amber-600\">Begründung:</p>\n                  <p className=\"text-sm bg-amber-50 p-2 rounded\">\n                    {suggestion.reasoning}\n                  </p>\n                </div>\n\n                <Separator />\n\n                <div className=\"flex items-center justify-between\">\n                  <Badge variant={getStatusBadgeVariant(suggestion.status)}>\n                    {suggestion.status === 'pending' ? 'Ausstehend' :\n                     suggestion.status === 'accepted' ? 'Akzeptiert' :\n                     suggestion.status === 'rejected' ? 'Abgelehnt' :\n                     suggestion.status === 'applied' ? 'Angewendet' :\n                     suggestion.status}\n                  </Badge>\n\n                  {suggestion.status === 'pending' && (\n                    <div className=\"flex gap-2\">\n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        onClick={() => applySuggestionMutation.mutate(suggestion.id)}\n                        disabled={applySuggestionMutation.isPending}\n                        className=\"flex items-center gap-1\"\n                      >\n                        <ThumbsUp className=\"h-3 w-3\" />\n                        Übernehmen\n                      </Button>\n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        onClick={() => updateStatusMutation.mutate({ \n                          suggestionId: suggestion.id, \n                          status: 'rejected' \n                        })}\n                        disabled={updateStatusMutation.isPending}\n                        className=\"flex items-center gap-1\"\n                      >\n                        <ThumbsDown className=\"h-3 w-3\" />\n                        Ablehnen\n                      </Button>\n                    </div>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      )}\n\n      {/* Analysis Progress Dialog */}\n      <Dialog open={analysisDialogOpen} onOpenChange={setAnalysisDialogOpen}>\n        <DialogContent className=\"sm:max-w-md\">\n          <DialogHeader>\n            <DialogTitle>AI-Analyse läuft</DialogTitle>\n            <DialogDescription>\n              Die Genehmigung wird analysiert, um Verbesserungsvorschläge zu finden.\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"flex flex-col items-center space-y-4 py-4\">\n            <Loader2 className=\"h-8 w-8 animate-spin text-blue-600\" />\n            <p className=\"text-sm text-center\">Analysiere Genehmigung...</p>\n            <p className=\"text-xs text-muted-foreground text-center\">\n              Denke nach über mögliche Verbesserungen\n            </p>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Results Dialog */}\n      <Dialog open={resultDialogOpen} onOpenChange={setResultDialogOpen}>\n        <DialogContent className=\"sm:max-w-md\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center gap-2\">\n              {resultType === 'success' ? (\n                <CheckCircle className=\"h-5 w-5 text-green-600\" />\n              ) : (\n                <XCircle className=\"h-5 w-5 text-red-600\" />\n              )}\n              {resultType === 'success' ? 'Erfolgreich' : 'Fehler'}\n            </DialogTitle>\n            <DialogDescription>\n              Die Aktion wurde erfolgreich ausgeführt.\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"py-4\">\n            <p className=\"text-sm\">{resultMessage}</p>\n          </div>\n          <div className=\"flex justify-end\">\n            <Button onClick={() => setResultDialogOpen(false)}>\n              OK\n            </Button>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":21762},"client/src/components/edit-permit-modal-unified.tsx":{"content":"\nimport React, { useState, useEffect } from \"react\";\nimport { useMutation, useQueryClient, useQuery } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogDescription,\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\n\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { Permit, User, WorkLocation } from \"@shared/schema\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { AiSuggestions } from \"@/components/ai-suggestions\";\nimport { SignaturePad } from \"@/components/signature-pad\";\nimport { PermitAttachments } from \"@/components/permit-attachments\";\nimport { StatusIndicator } from \"@/components/status-indicator\";\nimport { StatusTimeline } from \"@/components/status-timeline\";\nimport { WorkflowVisualization } from \"@/components/workflow-visualization\";\nimport { WorkflowButtons } from \"@/components/workflow-buttons\";\nimport trbsData from \"@/data/trbs_complete_hazards.json\";\nimport { WORKFLOW_CONFIG } from \"@/lib/workflow-config\";\nimport { canEditPermit } from \"@/lib/permissions\";\nimport { AlertTriangle, Info, Save, Activity, FileText, Users, Settings, Brain, GitBranch } from \"lucide-react\";\n\ninterface EditPermitModalUnifiedProps {\n  permit: Permit | null;\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  mode?: 'edit' | 'create';\n  mapClickPosition?: { x: number, y: number } | null;\n  onMapReset?: () => void;\n}\n\nconst permitSchema = z.object({\n  type: z.string().min(1, \"Arbeitstyp ist erforderlich\"),\n  workDescription: z.string().min(1, \"Arbeitsumfang ist erforderlich\"),\n  location: z.string().optional(),\n  workLocationId: z.string().optional(),\n  requestedBy: z.string().min(1, \"Antragsteller ist erforderlich\"),\n  department: z.string().min(1, \"Abteilung ist erforderlich\"),\n  contactNumber: z.string().optional(),\n  plannedStartDate: z.string().min(1, \"Geplanter Beginn ist erforderlich\"),\n  plannedEndDate: z.string().min(1, \"Geplantes Ende ist erforderlich\"),\n  emergencyContact: z.string().optional(),\n  performerName: z.string().optional(),\n  departmentHeadId: z.number().optional(),\n  safetyOfficerId: z.number().optional(),\n  maintenanceApproverId: z.number().optional(),\n  identifiedHazards: z.string().optional(),\n  selectedHazards: z.array(z.string()).optional(),\n  hazardNotes: z.string().optional(),\n  completedMeasures: z.array(z.string()).optional(),\n  status: z.string().optional(),\n  performerSignature: z.string().optional(),\n  workStartedAt: z.string().optional(),\n  workCompletedAt: z.string().optional(),\n  additionalComments: z.string().optional(),\n  immediateActions: z.string().optional(),\n  beforeWorkStarts: z.string().optional(),\n  complianceNotes: z.string().optional(),\n  overallRisk: z.string().optional(),\n  positionX: z.number().optional(),\n  positionY: z.number().optional(),\n});\n\ntype PermitFormData = z.infer<typeof permitSchema>;\n\nexport function EditPermitModalUnified({ permit, open, onOpenChange, mode = 'edit', mapClickPosition, onMapReset }: EditPermitModalUnifiedProps) {\n  const { toast } = useToast();\n  const { user } = useAuth();\n  const queryClient = useQueryClient();\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [selectedCategory, setSelectedCategory] = useState<number | null>(null);\n  const [hazardNotes, setHazardNotes] = useState<{ [key: string]: string }>({});\n  const [selectedHazards, setSelectedHazards] = useState<string[]>([]);\n\n\n  // Dropdown data queries\n  const { data: workLocations = [] } = useQuery<WorkLocation[]>({\n    queryKey: [\"/api/work-locations/active\"],\n  });\n\n  const { data: departmentHeads = [] } = useQuery<User[]>({\n    queryKey: [\"/api/users/department-heads\"],\n  });\n\n  const { data: safetyOfficers = [] } = useQuery<User[]>({\n    queryKey: [\"/api/users/safety-officers\"],\n  });\n\n  const { data: maintenanceApprovers = [] } = useQuery<User[]>({\n    queryKey: [\"/api/users/maintenance-approvers\"],\n  });\n\n  const { data: allUsers = [] } = useQuery<User[]>({\n    queryKey: [\"/api/users\"],\n  });\n\n  // Get current permit data for edit mode with optimized refresh\n  const { data: currentPermit } = useQuery<Permit>({\n    queryKey: [`/api/permits/${permit?.id}`],\n    enabled: !!permit?.id && mode === 'edit',\n    refetchOnWindowFocus: true,\n    refetchInterval: 10000, // Refresh every 10 seconds - optimized for performance\n  });\n\n  const form = useForm<PermitFormData>({\n    resolver: zodResolver(permitSchema),\n    defaultValues: {\n      type: \"\",\n      workDescription: \"\",\n      location: \"\",\n      workLocationId: \"\",\n      requestedBy: \"\",\n      department: \"\",\n      plannedStartDate: \"\",\n      plannedEndDate: \"\",\n      emergencyContact: \"\",\n      performerName: \"\",\n      departmentHeadId: undefined,\n      safetyOfficerId: undefined,\n      maintenanceApproverId: undefined,\n      identifiedHazards: \"\",\n      selectedHazards: [],\n      hazardNotes: \"\",\n      completedMeasures: [],\n      status: \"draft\",\n      performerSignature: \"\",\n      workStartedAt: \"\",\n      workCompletedAt: \"\",\n      additionalComments: \"\",\n      immediateActions: \"\",\n      beforeWorkStarts: \"\",\n      complianceNotes: \"\",\n      overallRisk: \"\",\n      positionX: mapClickPosition?.x,\n      positionY: mapClickPosition?.y,\n    },\n  });\n\n  // Update form when map position changes\n  useEffect(() => {\n    if (mapClickPosition && mode === 'create') {\n      form.setValue('positionX', mapClickPosition.x);\n      form.setValue('positionY', mapClickPosition.y);\n    }\n  }, [mapClickPosition, mode, form]);\n\n  // Create/Update mutation\n  const submitMutation = useMutation({\n    mutationFn: async (data: PermitFormData) => {\n      console.log(\"Processing submit data:\", data);\n      \n      const submitData = {\n        type: data.type,\n        description: data.workDescription,\n        location: data.location || \"\",\n        workLocationId: data.workLocationId ? parseInt(data.workLocationId) : undefined,\n        requestorName: data.requestedBy,\n        department: data.department,\n        contactNumber: data.contactNumber || \"\",\n        startDate: data.plannedStartDate,\n        endDate: data.plannedEndDate,\n        emergencyContact: data.emergencyContact || \"\",\n        identifiedHazards: data.identifiedHazards || \"\",\n        additionalComments: data.additionalComments || \"\",\n        immediateActions: data.immediateActions || \"\",\n        beforeWorkStarts: data.beforeWorkStarts || \"\",\n        complianceNotes: data.complianceNotes || \"\",\n        overallRisk: data.overallRisk || \"\",\n        selectedHazards: selectedHazards,\n        hazardNotes: JSON.stringify(hazardNotes),\n        completedMeasures: data.completedMeasures || [],\n        performerName: data.performerName || \"\",\n        departmentHead: departmentHeads.find(head => head.id === data.departmentHeadId)?.fullName || \"\",\n        safetyOfficer: safetyOfficers.find(officer => officer.id === data.safetyOfficerId)?.fullName || \"\",\n        maintenanceApprover: maintenanceApprovers.find(approver => approver.id === data.maintenanceApproverId)?.fullName || \"\",\n        performerSignature: data.performerSignature || \"\",\n        workStartedAt: data.workStartedAt || null,\n        workCompletedAt: data.workCompletedAt || null,\n        status: mode === 'create' ? \"draft\" : data.status,\n        positionX: data.positionX,\n        positionY: data.positionY,\n      };\n\n      console.log(\"Final submit data:\", submitData);\n\n      if (mode === 'create') {\n        return apiRequest(\"/api/permits\", \"POST\", submitData);\n      } else {\n        if (!permit?.id) throw new Error(\"Permit ID fehlt\");\n        return apiRequest(`/api/permits/${permit.id}`, \"PATCH\", submitData);\n      }\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/permits\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/permits/map\"] });\n      if (mode === 'edit' && permit?.id) {\n        queryClient.invalidateQueries({ queryKey: [`/api/permits/${permit.id}`] });\n      }\n      toast({\n        title: \"Erfolg\",\n        description: mode === 'create' \n          ? \"Arbeitserlaubnis wurde erfolgreich erstellt.\" \n          : \"Arbeitserlaubnis wurde erfolgreich aktualisiert.\",\n      });\n      onOpenChange(false);\n      if (mode === 'create') {\n        form.reset();\n        setHazardNotes({});\n        setSelectedHazards([]);\n        onMapReset?.();\n      }\n    },\n    onError: (error: Error) => {\n      const errorMessage = error.message || (mode === 'create' \n        ? \"Unbekannter Fehler beim Erstellen der Arbeitserlaubnis.\"\n        : \"Unbekannter Fehler beim Aktualisieren der Arbeitserlaubnis.\");\n      toast({\n        title: \"Fehler\",\n        description: errorMessage,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Workflow mutation for edit mode\n  const workflowMutation = useMutation({\n    mutationFn: async ({ actionId, nextStatus }: { actionId: string; nextStatus: string }) => {\n      const targetPermit = mode === 'edit' ? currentPermit : permit;\n      if (!targetPermit) throw new Error(\"No permit selected\");\n      return apiRequest(`/api/permits/${targetPermit.id}/workflow`, \"POST\", { action: actionId, nextStatus });\n    },\n    onSuccess: () => {\n      const targetPermit = mode === 'edit' ? currentPermit : permit;\n      if (targetPermit) {\n        queryClient.invalidateQueries({ queryKey: [`/api/permits/${targetPermit.id}`] });\n        queryClient.invalidateQueries({ queryKey: [\"/api/permits\"] });\n      }\n      toast({\n        title: \"Erfolg\",\n        description: \"Status erfolgreich aktualisiert.\",\n      });\n      // Don't close modal automatically to allow confirmation dialogs to work\n    },\n    onError: (error: Error) => {\n      const errorMessage = error.message || \"Fehler beim Status-Update.\";\n      toast({\n        title: \"Fehler\",\n        description: errorMessage,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Check if permit can be edited\n  const canEdit = mode === 'create' || (currentPermit?.status === 'draft');\n  const canEditExecution = currentPermit?.status === 'active'; // Only active permits can edit execution\n  const canStartAiAnalysis = mode === 'create' || (currentPermit?.status === 'draft'); // AI analysis only for drafts\n  const isLoading = submitMutation.isPending || workflowMutation.isPending;\n\n  // Sync form with permit data in edit mode\n  React.useEffect(() => {\n    if (mode === 'edit' && currentPermit && open && !workflowMutation.isPending) {\n      console.log(\"Syncing form with latest permit data:\", currentPermit.id);\n\n      const formatDate = (date: string | Date | null): string => {\n        if (!date) return \"\";\n        if (typeof date === 'string') {\n          const dateObj = new Date(date);\n          return dateObj.toISOString().slice(0, 16);\n        }\n        return date.toISOString().slice(0, 16);\n      };\n\n      const findUserIdByName = (fullName: string | null, userList: any[]): number | undefined => {\n        if (!fullName) return undefined;\n        const user = userList.find(u => u.fullName === fullName || u.username === fullName);\n        return user?.id;\n      };\n\n      // Ensure workLocationId is properly formatted as string\n      const workLocationIdStr = currentPermit.workLocationId ? currentPermit.workLocationId.toString() : \"\";\n\n      const formData = {\n        type: currentPermit.type || \"\",\n        workDescription: currentPermit.description || \"\",\n        location: currentPermit.location || \"\",\n        workLocationId: workLocationIdStr,\n        requestedBy: currentPermit.requestorName || \"\",\n        department: currentPermit.department || \"\",\n        contactNumber: currentPermit.contactNumber || \"\",\n        plannedStartDate: formatDate(currentPermit.startDate),\n        plannedEndDate: formatDate(currentPermit.endDate),\n        emergencyContact: currentPermit.emergencyContact || \"\",\n        performerName: currentPermit.performerName || \"\",\n        departmentHeadId: findUserIdByName(currentPermit.departmentHead, departmentHeads),\n        safetyOfficerId: findUserIdByName(currentPermit.safetyOfficer, safetyOfficers),\n        maintenanceApproverId: findUserIdByName(currentPermit.maintenanceApprover, maintenanceApprovers),\n        identifiedHazards: currentPermit.identifiedHazards || \"\",\n        selectedHazards: currentPermit.selectedHazards || [],\n        hazardNotes: currentPermit.hazardNotes || \"\",\n        completedMeasures: currentPermit.completedMeasures || [],\n        status: currentPermit.status || \"draft\",\n        performerSignature: currentPermit.performerSignature || \"\",\n        workStartedAt: formatDate(currentPermit.workStartedAt),\n        workCompletedAt: formatDate(currentPermit.workCompletedAt),\n        additionalComments: currentPermit.additionalComments || \"\",\n        immediateActions: currentPermit.immediateActions || \"\",\n        beforeWorkStarts: currentPermit.beforeWorkStarts || \"\",\n        complianceNotes: currentPermit.complianceNotes || \"\",\n        overallRisk: currentPermit.overallRisk || \"\",\n      };\n\n      console.log(\"Form data being set:\", {\n        type: formData.type,\n        workLocationId: formData.workLocationId,\n        overallRisk: formData.overallRisk\n      });\n\n      form.reset(formData);\n\n      setSelectedHazards(currentPermit.selectedHazards || []);\n\n      if (currentPermit.hazardNotes) {\n        try {\n          const notes = typeof currentPermit.hazardNotes === 'string' \n            ? JSON.parse(currentPermit.hazardNotes) \n            : currentPermit.hazardNotes;\n          setHazardNotes(notes);\n        } catch (e) {\n          console.warn(\"Could not parse hazard notes:\", currentPermit.hazardNotes);\n          setHazardNotes({});\n        }\n      }\n    }\n  }, [currentPermit, open, form, departmentHeads, safetyOfficers, maintenanceApprovers, mode]);\n\n  // LÖSUNG 1: Zusätzliche State-Synchronisation für AI-Vorschläge\n  // Synchronisiert selectedHazards und hazardNotes wenn sich currentPermit ändert\n  React.useEffect(() => {\n    if (currentPermit && mode === 'edit') {\n      console.log(\"AI-Suggestions: Syncing TRBS states with updated permit data\");\n      console.log(\"Current permit selectedHazards:\", currentPermit.selectedHazards);\n      console.log(\"Current permit hazardNotes:\", currentPermit.hazardNotes);\n      \n      // Sync selectedHazards - auch wenn es ein leeres Array ist\n      if (currentPermit.selectedHazards !== undefined) {\n        const newSelectedHazards = Array.isArray(currentPermit.selectedHazards) \n          ? currentPermit.selectedHazards \n          : [];\n        console.log(\"AI-Suggestions: Updating selectedHazards:\", newSelectedHazards);\n        setSelectedHazards(newSelectedHazards);\n      } else {\n        // If undefined, reset to empty array\n        console.log(\"AI-Suggestions: Resetting selectedHazards to empty array\");\n        setSelectedHazards([]);\n      }\n      \n      // Sync hazardNotes\n      if (currentPermit.hazardNotes) {\n        try {\n          const parsedNotes = typeof currentPermit.hazardNotes === 'string' \n            ? JSON.parse(currentPermit.hazardNotes) \n            : currentPermit.hazardNotes;\n          console.log(\"AI-Suggestions: Updating hazardNotes:\", parsedNotes);\n          setHazardNotes(parsedNotes);\n        } catch (e) {\n          console.warn(\"AI-Suggestions: Could not parse hazard notes:\", currentPermit.hazardNotes);\n          setHazardNotes({});\n        }\n      } else {\n        // Reset hazardNotes if empty\n        setHazardNotes({});\n      }\n    }\n  }, [currentPermit, mode]); // Vereinfachte Dependency - watch das gesamte currentPermit Objekt\n\n  const onSubmit = (data: PermitFormData) => {\n    console.log(\"Form submission data:\", data);\n    console.log(\"Selected hazards:\", selectedHazards);\n    console.log(\"Hazard notes:\", hazardNotes);\n    submitMutation.mutate(data);\n  };\n\n  const toggleHazard = (hazardId: string) => {\n    setSelectedHazards(prev => \n      prev.includes(hazardId) \n        ? prev.filter(id => id !== hazardId)\n        : [...prev, hazardId]\n    );\n  };\n\n  const updateHazardNote = (hazardId: string, note: string) => {\n    setHazardNotes(prev => ({\n      ...prev,\n      [hazardId]: note\n    }));\n  };\n\n  const handleWorkflowAction = async (actionId: string, nextStatus: string) => {\n    console.log(\"Modal: Handling workflow action:\", actionId, nextStatus);\n    \n    // Execute all actions directly without confirmation\n    await workflowMutation.mutateAsync({ actionId, nextStatus });\n  };\n\n\n\n  if (mode === 'edit' && !permit) return null;\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-6xl max-h-[90vh] w-full sm:w-[95vw] md:w-auto mobile-dialog-content\">\n        <DialogHeader>\n          <DialogTitle className=\"text-industrial-gray flex items-center gap-2 text-lg sm:text-xl\">\n            <Activity className=\"h-5 w-5\" />\n            {mode === 'create' ? 'Neue Arbeitserlaubnis erstellen' : `Arbeitserlaubnis bearbeiten - ${permit?.permitId}`}\n          </DialogTitle>\n          <DialogDescription className=\"text-sm sm:text-base\">\n            {mode === 'create' \n              ? 'Erstellen Sie eine neue Arbeitserlaubnis mit vollständiger TRBS-Gefährdungsbeurteilung.'\n              : 'Bearbeiten Sie die Arbeitserlaubnis mit vollständiger TRBS-Gefährdungsbeurteilung und Status-Management.'\n            }\n          </DialogDescription>\n        </DialogHeader>\n\n        <div className=\"flex-1 overflow-y-auto pr-2\" style={{ maxHeight: 'calc(90vh - 140px)' }}>\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"h-full\">\n            <Tabs defaultValue=\"basic\" className=\"h-full flex flex-col\">\n              <TabsList className=\"grid w-full grid-cols-7\">\n                <TabsTrigger value=\"basic\" className=\"flex items-center gap-2\">\n                  <FileText className=\"h-4 w-4\" />\n                  Grunddaten\n                </TabsTrigger>\n                <TabsTrigger value=\"hazards\" className=\"flex items-center gap-2\">\n                  <AlertTriangle className=\"h-4 w-4\" />\n                  Gefährdungen\n                </TabsTrigger>\n                <TabsTrigger value=\"approvals\" className=\"flex items-center gap-2\">\n                  <Users className=\"h-4 w-4\" />\n                  Genehmigungen\n                </TabsTrigger>\n                <TabsTrigger value=\"execution\" className=\"flex items-center gap-2\">\n                  <Settings className=\"h-4 w-4\" />\n                  Durchführung\n                </TabsTrigger>\n                <TabsTrigger value=\"ai-suggestions\" className=\"flex items-center gap-2\">\n                  <Brain className=\"h-4 w-4\" />\n                  KI-Vorschläge\n                </TabsTrigger>\n                <TabsTrigger value=\"attachments\" className=\"flex items-center gap-2\">\n                  <FileText className=\"h-4 w-4\" />\n                  Anhänge\n                </TabsTrigger>\n                <TabsTrigger value=\"workflow\" className=\"flex items-center gap-2\">\n                  <GitBranch className=\"h-4 w-4\" />\n                  Status\n                </TabsTrigger>\n              </TabsList>\n\n              <div className=\"flex-1 overflow-y-auto p-6\">\n                <TabsContent value=\"basic\" className=\"space-y-6 mt-0\">\n                  <Card>\n                    <CardHeader>\n                      <CardTitle>Grundinformationen</CardTitle>\n                    </CardHeader>\n                    <CardContent className=\"space-y-4\">\n                      <div className=\"grid grid-cols-2 gap-4\">\n                        <FormField\n                          control={form.control}\n                          name=\"type\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Arbeitstyp</FormLabel>\n                              <Select onValueChange={field.onChange} value={field.value} disabled={!canEdit}>\n                                <FormControl>\n                                  <SelectTrigger>\n                                    <SelectValue placeholder=\"Arbeitstyp auswählen...\" />\n                                  </SelectTrigger>\n                                </FormControl>\n                                <SelectContent>\n                                  <SelectItem value=\"general\">Allgemeiner Erlaubnisschein</SelectItem>\n                                  <SelectItem value=\"hot_work\">Heißarbeiten (Schweißen, Schneiden, Löten)</SelectItem>\n                                  <SelectItem value=\"height_work\">Arbeiten in der Höhe (&gt;2m Absturzgefahr)</SelectItem>\n                                  <SelectItem value=\"confined_space\">Arbeiten in engen Räumen/Behältern</SelectItem>\n                                  <SelectItem value=\"electrical_work\">Elektrische Arbeiten (Schaltanlagen, Kabel)</SelectItem>\n                                  <SelectItem value=\"chemical_work\">Arbeiten mit Gefahrstoffen</SelectItem>\n                                  <SelectItem value=\"machinery_work\">Arbeiten an Maschinen/Anlagen</SelectItem>\n                                  <SelectItem value=\"excavation\">Erdarbeiten/Grabungen</SelectItem>\n                                  <SelectItem value=\"maintenance\">Instandhaltungsarbeiten</SelectItem>\n                                  <SelectItem value=\"cleaning\">Reinigungs-/Wartungsarbeiten</SelectItem>\n                                  <SelectItem value=\"other\">Sonstige Arbeiten</SelectItem>\n                                </SelectContent>\n                              </Select>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <FormField\n                          control={form.control}\n                          name=\"workLocationId\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Arbeitsort</FormLabel>\n                              <Select onValueChange={field.onChange} value={field.value} disabled={!canEdit}>\n                                <FormControl>\n                                  <SelectTrigger>\n                                    <SelectValue placeholder=\"Arbeitsort auswählen...\" />\n                                  </SelectTrigger>\n                                </FormControl>\n                                <SelectContent>\n                                  {workLocations.map((location) => (\n                                    <SelectItem key={location.id} value={location.id.toString()}>\n                                      {location.name} - {location.description}\n                                    </SelectItem>\n                                  ))}\n                                </SelectContent>\n                              </Select>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n\n                      <FormField\n                        control={form.control}\n                        name=\"location\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Spezifischer Arbeitsort</FormLabel>\n                            <FormControl>\n                              <Input \n                                placeholder=\"z.B. Tank 3, Halle A, Dach Gebäude B...\"\n                                disabled={!canEdit}\n                                {...field}\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name=\"workDescription\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Arbeitsumfang</FormLabel>\n                            <FormControl>\n                              <Textarea \n                                placeholder=\"Detaillierte Beschreibung der durchzuführenden Arbeiten...\"\n                                className=\"min-h-[100px]\"\n                                disabled={!canEdit}\n                                {...field}\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <div className=\"grid grid-cols-2 gap-4\">\n                        <FormField\n                          control={form.control}\n                          name=\"plannedStartDate\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Geplanter Beginn</FormLabel>\n                              <FormControl>\n                                <Input \n                                  type=\"datetime-local\"\n                                  disabled={!canEdit}\n                                  {...field}\n                                />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <FormField\n                          control={form.control}\n                          name=\"plannedEndDate\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Geplantes Ende</FormLabel>\n                              <FormControl>\n                                <Input \n                                  type=\"datetime-local\"\n                                  disabled={!canEdit}\n                                  {...field}\n                                />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n\n                      <div className=\"grid grid-cols-2 gap-4\">\n                        <FormField\n                          control={form.control}\n                          name=\"requestedBy\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Antragsteller</FormLabel>\n                              <Select onValueChange={field.onChange} value={field.value} disabled={!canEdit}>\n                                <FormControl>\n                                  <SelectTrigger>\n                                    <SelectValue placeholder=\"Antragsteller auswählen...\" />\n                                  </SelectTrigger>\n                                </FormControl>\n                                <SelectContent>\n                                  {allUsers.map((user) => (\n                                    <SelectItem key={user.id} value={user.fullName}>\n                                      {user.fullName} ({user.department})\n                                    </SelectItem>\n                                  ))}\n                                </SelectContent>\n                              </Select>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <FormField\n                          control={form.control}\n                          name=\"department\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Abteilung</FormLabel>\n                              <Select onValueChange={field.onChange} value={field.value} disabled={!canEdit}>\n                                <FormControl>\n                                  <SelectTrigger>\n                                    <SelectValue placeholder=\"Abteilung auswählen...\" />\n                                  </SelectTrigger>\n                                </FormControl>\n                                <SelectContent>\n                                  <SelectItem value=\"Engineering\">Engineering</SelectItem>\n                                  <SelectItem value=\"Maintenance\">Instandhaltung</SelectItem>\n                                  <SelectItem value=\"Production\">Produktion</SelectItem>\n                                  <SelectItem value=\"Quality\">Qualitätssicherung</SelectItem>\n                                  <SelectItem value=\"Safety\">Arbeitssicherheit</SelectItem>\n                                  <SelectItem value=\"External\">Externe Firma</SelectItem>\n                                </SelectContent>\n                              </Select>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n\n                      <FormField\n                        control={form.control}\n                        name=\"contactNumber\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Kontaktnummer</FormLabel>\n                            <FormControl>\n                              <Input \n                                placeholder=\"Telefonnummer für Rückfragen...\"\n                                disabled={!canEdit}\n                                {...field}\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name=\"emergencyContact\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Notfallkontakt</FormLabel>\n                            <FormControl>\n                              <Textarea \n                                placeholder=\"Notfallkontakte mit Telefonnummern (24h erreichbar)...\"\n                                className=\"min-h-[80px]\"\n                                disabled={!canEdit}\n                                {...field}\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name=\"performerName\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Ausführende Person(en)</FormLabel>\n                            <FormControl>\n                              <Input \n                                placeholder=\"Name(n) der ausführenden Person(en)...\"\n                                disabled={!canEdit}\n                                {...field}\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </CardContent>\n                  </Card>\n                </TabsContent>\n\n                <TabsContent value=\"hazards\" className=\"space-y-6 mt-0\">\n                  <Card>\n                    <CardHeader>\n                      <CardTitle>TRBS-konforme Gefährdungsbeurteilung</CardTitle>\n                      <Alert>\n                        <Info className=\"h-4 w-4\" />\n                        <AlertDescription>\n                          Wählen Sie alle zutreffenden Gefährdungen aus den TRBS-Kategorien aus und dokumentieren Sie spezifische Schutzmaßnahmen.\n                        </AlertDescription>\n                      </Alert>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-4\">\n                        <div>\n                          <Input\n                            placeholder=\"Gefährdungen suchen...\"\n                            value={searchQuery}\n                            onChange={(e) => setSearchQuery(e.target.value)}\n                            className=\"mt-1\"\n                          />\n                        </div>\n                        <div>\n                          <Select onValueChange={(value) => setSelectedCategory(value === \"all\" ? null : Number(value))}>\n                            <SelectTrigger className=\"mt-1\">\n                              <SelectValue placeholder=\"Alle Kategorien\" />\n                            </SelectTrigger>\n                            <SelectContent>\n                              <SelectItem value=\"all\">Alle Kategorien</SelectItem>\n                              {trbsData.categories.map((category, index) => (\n                                <SelectItem key={category.id} value={index.toString()}>\n                                  {category.category}\n                                </SelectItem>\n                              ))}\n                            </SelectContent>\n                          </Select>\n                        </div>\n                      </div>\n\n                      {trbsData.categories\n                        .filter((category, index) => {\n                          if (selectedCategory !== null && index !== selectedCategory) return false;\n                          if (!searchQuery) return true;\n                          return category.category.toLowerCase().includes(searchQuery.toLowerCase()) ||\n                                 category.hazards.some(h => h.hazard.toLowerCase().includes(searchQuery.toLowerCase()));\n                        })\n                        .map((category) => (\n                        <Card key={category.id} className=\"mb-4\">\n                          <CardHeader className=\"pb-3\">\n                            <CardTitle className=\"text-lg text-blue-700\">\n                              {category.id}. {category.category}\n                            </CardTitle>\n                          </CardHeader>\n                          <CardContent>\n                            <div className=\"space-y-3\">\n                              {category.hazards\n                                .filter(hazard => !searchQuery || \n                                  hazard.hazard.toLowerCase().includes(searchQuery.toLowerCase()))\n                                .map((hazard, hazardIndex) => {\n                                const hazardId = `${category.id}-${hazardIndex}`;\n                                const isSelected = selectedHazards.includes(hazardId);\n                                \n                                // Debug logging removed - AI suggestions now working correctly\n                                \n                                return (\n                                  <div key={hazardIndex} className=\"border rounded-lg p-4\">\n                                    <div className=\"flex items-start space-x-3\">\n                                      <Checkbox\n                                        checked={isSelected}\n                                        disabled={!canEdit}\n                                        onCheckedChange={() => canEdit && toggleHazard(hazardId)}\n                                        className=\"mt-1\"\n                                      />\n                                      <div className=\"flex-1 space-y-2\">\n                                        <div>\n                                          <span className=\"font-medium text-gray-900\">{hazard.hazard}</span>\n                                        </div>\n                                        \n                                        {isSelected && (\n                                          <div className=\"mt-3\">\n                                            <Textarea\n                                              placeholder=\"Spezifische Anmerkungen zu dieser Gefährdung...\"\n                                              value={hazardNotes[hazardId] || \"\"}\n                                              disabled={!canEdit}\n                                              onChange={(e) => canEdit && updateHazardNote(hazardId, e.target.value)}\n                                              className=\"w-full\"\n                                              rows={2}\n                                            />\n                                          </div>\n                                        )}\n                                      </div>\n                                    </div>\n                                  </div>\n                                );\n                              })}\n                            </div>\n                          </CardContent>\n                        </Card>\n                      ))}\n                      \n                      <div className=\"space-y-4 mt-6\">\n                        <h4 className=\"text-lg font-semibold text-gray-900\">Allgemeine Sicherheitsmaßnahmen</h4>\n                        \n                        <FormField\n                          control={form.control}\n                          name=\"immediateActions\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Sofortmaßnahmen</FormLabel>\n                              <FormControl>\n                                <Textarea \n                                  placeholder=\"Beschreiben Sie Sofortmaßnahmen, die bei Gefahr oder Notfall einzuleiten sind...\"\n                                  className=\"min-h-[100px]\"\n                                  disabled={!canEdit}\n                                  {...field}\n                                />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <FormField\n                          control={form.control}\n                          name=\"beforeWorkStarts\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Maßnahmen vor Arbeitsbeginn</FormLabel>\n                              <FormControl>\n                                <Textarea \n                                  placeholder=\"Beschreiben Sie spezifische Maßnahmen, die vor Arbeitsbeginn durchzuführen sind...\"\n                                  className=\"min-h-[100px]\"\n                                  disabled={!canEdit}\n                                  {...field}\n                                />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  <Card>\n                    <CardHeader>\n                      <CardTitle>Risikobewertung und zusätzliche Informationen</CardTitle>\n                    </CardHeader>\n                    <CardContent className=\"space-y-4\">\n                      <FormField\n                        control={form.control}\n                        name=\"overallRisk\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Risikokategorie</FormLabel>\n                            <Select onValueChange={field.onChange} value={field.value || \"\"} disabled={!canEdit}>\n                              <FormControl>\n                                <SelectTrigger>\n                                  <SelectValue placeholder=\"Risikokategorie auswählen...\" />\n                                </SelectTrigger>\n                              </FormControl>\n                              <SelectContent>\n                                <SelectItem value=\"niedrig\">Niedrig - Routine-Arbeiten mit geringem Gefährdungspotential</SelectItem>\n                                <SelectItem value=\"mittel\">Mittel - Arbeiten mit moderatem Risiko, erhöhte Aufmerksamkeit erforderlich</SelectItem>\n                                <SelectItem value=\"hoch\">Hoch - Arbeiten mit erheblichem Risiko, besondere Schutzmaßnahmen erforderlich</SelectItem>\n                                <SelectItem value=\"kritisch\">Kritisch - Arbeiten mit sehr hohem Risiko, umfassende Sicherheitsvorkehrungen</SelectItem>\n                              </SelectContent>\n                            </Select>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name=\"identifiedHazards\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Zusätzliche Gefahren und Kommentare</FormLabel>\n                            <FormControl>\n                              <Textarea \n                                placeholder=\"Beschreiben Sie weitere identifizierte Gefahren, spezielle Bedingungen oder wichtige Kommentare...\"\n                                className=\"min-h-[120px]\"\n                                disabled={!canEdit}\n                                {...field}\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name=\"additionalComments\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Weitere Anmerkungen</FormLabel>\n                            <FormControl>\n                              <Textarea \n                                placeholder=\"Zusätzliche Anmerkungen, besondere Hinweise oder Auflagen...\"\n                                className=\"min-h-[100px]\"\n                                disabled={!canEdit}\n                                {...field}\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name=\"complianceNotes\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Relevante Vorschriften und Normen</FormLabel>\n                            <FormControl>\n                              <Textarea \n                                placeholder=\"z.B. TRBS 2152-2 (Behälter), DGUV 113-004 (Schweißen), ATEX 153...\"\n                                className=\"min-h-[80px]\"\n                                disabled={!canEdit}\n                                {...field}\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </CardContent>\n                  </Card>\n                </TabsContent>\n\n                <TabsContent value=\"approvals\" className=\"space-y-6 mt-0\">\n                  <Card>\n                    <CardHeader>\n                      <CardTitle>Genehmigungsverantwortliche</CardTitle>\n                    </CardHeader>\n                    <CardContent className=\"space-y-4\">\n                      <FormField\n                        control={form.control}\n                        name=\"departmentHeadId\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Abteilungsleiter</FormLabel>\n                            <Select onValueChange={(value) => field.onChange(parseInt(value))} value={field.value?.toString() || \"\"} disabled={!canEdit}>\n                              <FormControl>\n                                <SelectTrigger>\n                                  <SelectValue placeholder=\"Abteilungsleiter auswählen...\" />\n                                </SelectTrigger>\n                              </FormControl>\n                              <SelectContent>\n                                {departmentHeads.map((head) => (\n                                  <SelectItem key={head.id} value={head.id.toString()}>\n                                    {head.fullName} ({head.username})\n                                  </SelectItem>\n                                ))}\n                              </SelectContent>\n                            </Select>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name=\"safetyOfficerId\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Sicherheitsfachkraft</FormLabel>\n                            <Select onValueChange={(value) => field.onChange(parseInt(value))} value={field.value?.toString() || \"\"} disabled={!canEdit}>\n                              <FormControl>\n                                <SelectTrigger>\n                                  <SelectValue placeholder=\"Sicherheitsfachkraft auswählen...\" />\n                                </SelectTrigger>\n                              </FormControl>\n                              <SelectContent>\n                                {safetyOfficers.map((officer) => (\n                                  <SelectItem key={officer.id} value={officer.id.toString()}>\n                                    {officer.fullName} ({officer.username})\n                                  </SelectItem>\n                                ))}\n                              </SelectContent>\n                            </Select>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name=\"maintenanceApproverId\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Instandhaltungs-/Engineering-Genehmiger</FormLabel>\n                            <Select onValueChange={(value) => field.onChange(parseInt(value))} value={field.value?.toString() || \"\"} disabled={!canEdit}>\n                              <FormControl>\n                                <SelectTrigger>\n                                  <SelectValue placeholder=\"Genehmiger auswählen...\" />\n                                </SelectTrigger>\n                              </FormControl>\n                              <SelectContent>\n                                {maintenanceApprovers.map((approver) => (\n                                  <SelectItem key={approver.id} value={approver.id.toString()}>\n                                    {approver.fullName} ({approver.username})\n                                  </SelectItem>\n                                ))}\n                              </SelectContent>\n                            </Select>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </CardContent>\n                  </Card>\n                </TabsContent>\n\n                <TabsContent value=\"execution\" className=\"space-y-6 mt-0\">\n                  <Card>\n                    <CardHeader>\n                      <CardTitle>Arbeitsdurchführung</CardTitle>\n                    </CardHeader>\n                    <CardContent className=\"space-y-4\">\n                      {canEditExecution ? (\n                        <>\n                          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                            <FormField\n                              control={form.control}\n                              name=\"workStartedAt\"\n                              render={({ field }) => (\n                                <FormItem>\n                                  <FormLabel>Arbeit begonnen am</FormLabel>\n                                  <FormControl>\n                                    <Input type=\"datetime-local\" disabled={!canEditExecution} {...field} />\n                                  </FormControl>\n                                  <FormMessage />\n                                </FormItem>\n                              )}\n                            />\n\n                            <FormField\n                              control={form.control}\n                              name=\"workCompletedAt\"\n                              render={({ field }) => (\n                                <FormItem>\n                                  <FormLabel>Arbeit abgeschlossen am</FormLabel>\n                                  <FormControl>\n                                    <Input type=\"datetime-local\" disabled={!canEditExecution} {...field} />\n                                  </FormControl>\n                                  <FormMessage />\n                                </FormItem>\n                              )}\n                            />\n                          </div>\n\n                          <SignaturePad\n                            onSignatureChange={(signature) => form.setValue(\"performerSignature\", signature)}\n                            existingSignature={form.watch(\"performerSignature\")}\n                            disabled={!canEditExecution}\n                          />\n\n                          <Alert>\n                            <AlertTriangle className=\"h-4 w-4\" />\n                            <AlertDescription>\n                              Die digitale Unterschrift wird auf dem gedruckten Arbeitserlaubnis angezeigt. \n                              Stellen Sie sicher, dass alle Informationen korrekt sind, bevor Sie unterschreiben.\n                            </AlertDescription>\n                          </Alert>\n                        </>\n                      ) : (\n                        <Alert>\n                          <Info className=\"h-4 w-4\" />\n                          <AlertDescription>\n                            Die Durchführungsdetails können nur bei aktiven Arbeitserlaubnissen bearbeitet werden.\n                          </AlertDescription>\n                        </Alert>\n                      )}\n                    </CardContent>\n                  </Card>\n                </TabsContent>\n\n                <TabsContent value=\"ai-suggestions\" className=\"space-y-6 mt-0\">\n                  <Card>\n                    <CardHeader>\n                      <CardTitle className=\"flex items-center gap-2\">\n                        <AlertTriangle className=\"h-5 w-5\" />\n                        KI-Verbesserungsvorschläge\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      {!canEdit && mode === 'edit' && (\n                        <Alert className=\"mb-4\">\n                          <Info className=\"h-4 w-4\" />\n                          <AlertDescription>\n                            KI-Analyse ist nur bei Genehmigungen im Entwurfsstatus verfügbar. \n                            Setzen Sie die Genehmigung zurück auf \"Entwurf\", um Änderungen vorzunehmen.\n                          </AlertDescription>\n                        </Alert>\n                      )}\n                      {mode === 'edit' && permit && (\n                        <AiSuggestions permitId={permit.id} disabled={!canStartAiAnalysis} />\n                      )}\n                    </CardContent>\n                  </Card>\n                </TabsContent>\n\n                <TabsContent value=\"attachments\" className=\"space-y-6 mt-0\">\n                  <Card>\n                    <CardHeader>\n                      <CardTitle className=\"flex items-center gap-2\">\n                        <FileText className=\"h-5 w-5\" />\n                        Datei-Anhänge\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      {mode === 'edit' && permit && (\n                        <PermitAttachments permitId={permit.id} />\n                      )}\n                    </CardContent>\n                  </Card>\n                </TabsContent>\n\n                <TabsContent value=\"workflow\" className=\"space-y-6 mt-0\">\n                  <Card>\n                    <CardHeader>\n                      <CardTitle className=\"flex items-center gap-2\">\n                        <Activity className=\"h-5 w-5\" />\n                        Status-Management\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent className=\"space-y-6\">\n                      {mode === 'edit' && permit && (\n                        <>\n                          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                            <div>\n                              <h4 className=\"font-semibold mb-3\">Aktueller Status</h4>\n                              <StatusIndicator status={currentPermit?.status || permit.status} />\n                            </div>\n\n                            <div>\n                              <h4 className=\"font-semibold mb-3\">Verfügbare Aktionen</h4>\n                              <WorkflowButtons \n                                permit={currentPermit || permit} \n                                currentUser={user} \n                                onAction={handleWorkflowAction}\n                                isLoading={workflowMutation.isPending}\n                              />\n                            </div>\n                          </div>\n\n                          <div>\n                            <h4 className=\"font-semibold mb-3\">Workflow-Visualisierung</h4>\n                            <WorkflowVisualization \n                              currentStatus={currentPermit?.status || permit.status} \n                              permitType={permit.type}\n                            />\n                          </div>\n\n                          <div>\n                            <h4 className=\"font-semibold mb-3\">Status-Verlauf</h4>\n                            <StatusTimeline permitId={permit.id} />\n                          </div>\n                        </>\n                      )}\n                    </CardContent>\n                  </Card>\n                </TabsContent>\n              </div>\n\n              <div className=\"flex justify-end gap-3 pt-3 border-t\">\n                <Button variant=\"outline\" onClick={() => onOpenChange(false)}>\n                  Abbrechen\n                </Button>\n\n                <Button\n                  type=\"submit\"\n                  disabled={(!canEdit && !canEditExecution) || isLoading}\n                  className=\"bg-industrial-gray hover:bg-industrial-gray/90 disabled:opacity-50\"\n                  title={(!canEdit && !canEditExecution) ? \"Kann nur bei Entwürfen oder aktiven Genehmigungen (Durchführung) bearbeitet werden\" : \"\"}\n                >\n                  <Save className=\"h-4 w-4 mr-2\" />\n                  {mode === 'create' ? 'Erstellen' : 'Speichern'}\n                </Button>\n              </div>\n\n              {!canEdit && !canEditExecution && mode === 'edit' && (\n                <Alert className=\"mt-4\">\n                  <Info className=\"h-4 w-4\" />\n                  <AlertDescription>\n                    Diese Genehmigung kann nicht vollständig bearbeitet werden. \n                    Entwürfe können vollständig bearbeitet werden, aktive Genehmigungen nur im Durchführung-Tab.\n                    Verwenden Sie die Workflow-Aktionen, um den Status zu ändern.\n                  </AlertDescription>\n                </Alert>\n              )}\n            </Tabs>\n          </form>\n        </Form>\n        </div>\n      </DialogContent>\n\n    </Dialog>\n  );\n}\n","size_bytes":57255},"client/src/components/navigation-header.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { HardHat, ChevronDown, Menu, X } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { NotificationDropdown } from \"@/components/notification-dropdown\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useState } from \"react\";\n\nexport function NavigationHeader() {\n  const [location, setLocation] = useLocation();\n  const { user, logout } = useAuth();\n  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);\n\n  // Fetch system settings for customizable title and icon\n  const { data: systemSettings } = useQuery({\n    queryKey: [\"/api/system-settings\"]\n  });\n\n  const isActive = (path: string) => {\n    if (path === \"/\" && location === \"/\") return true;\n    if (path !== \"/\" && location.startsWith(path)) return true;\n    return false;\n  };\n\n  const handleProfileClick = () => {\n    console.log(\"Profile clicked\");\n    // In a real app, this would open a profile modal or navigate to profile page\n  };\n\n  const handleLogout = async () => {\n    try {\n      await logout();\n      console.log(\"User logged out\");\n      setLocation(\"/login\");\n    } catch (error) {\n      console.error(\"Logout failed:\", error);\n      setLocation(\"/login\");\n    }\n  };\n\n  const getInitials = (fullName: string) => {\n    return fullName\n      .split(\" \")\n      .map(name => name.charAt(0))\n      .join(\"\")\n      .toUpperCase()\n      .slice(0, 2);\n  };\n\n  return (\n    <header className=\"bg-white shadow-sm border-b border-gray-200\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between items-center h-16\">\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"flex items-center space-x-2\">\n              {(systemSettings as any)?.headerIcon ? (\n                <img \n                  src={(systemSettings as any).headerIcon} \n                  alt=\"Header Icon\" \n                  className=\"w-8 h-8 object-contain\"\n                />\n              ) : (\n                <HardHat className=\"text-safety-blue text-2xl\" />\n              )}\n              <h1 className=\"text-lg sm:text-xl font-bold text-industrial-gray\">\n                {(systemSettings as any)?.applicationTitle || \"Arbeitserlaubnis\"}\n              </h1>\n            </div>\n            {/* Desktop Navigation */}\n            <nav className=\"hidden md:flex space-x-6\">\n              <Link href=\"/\" className={`font-medium pb-2 border-b-2 ${\n                isActive(\"/\") \n                  ? \"text-safety-blue border-safety-blue\" \n                  : \"text-secondary-gray border-transparent hover:text-industrial-gray\"\n              }`}>\n                Dashboard\n              </Link>\n              <Link href=\"/permits\" className={`font-medium pb-2 border-b-2 ${\n                isActive(\"/permits\") \n                  ? \"text-safety-blue border-safety-blue\" \n                  : \"text-secondary-gray border-transparent hover:text-industrial-gray\"\n              }`}>\n                Genehmigungen\n              </Link>\n              <Link href=\"/approvals\" className={`font-medium pb-2 border-b-2 ${\n                isActive(\"/approvals\") \n                  ? \"text-safety-blue border-safety-blue\" \n                  : \"text-secondary-gray border-transparent hover:text-industrial-gray\"\n              }`}>\n                Freigaben\n              </Link>\n              <Link href=\"/drafts\" className={`font-medium pb-2 border-b-2 ${\n                isActive(\"/drafts\") \n                  ? \"text-safety-blue border-safety-blue\" \n                  : \"text-secondary-gray border-transparent hover:text-industrial-gray\"\n              }`}>\n                Entwürfe\n              </Link>\n            </nav>\n          </div>\n          \n          {/* Desktop Right Side */}\n          <div className=\"hidden md:flex items-center space-x-4\">\n            <NotificationDropdown />\n            <DropdownMenu>\n              <DropdownMenuTrigger asChild>\n                <Button variant=\"ghost\" className=\"flex items-center space-x-2\">\n                  <Avatar className=\"h-8 w-8\">\n                    <AvatarImage src=\"\" />\n                    <AvatarFallback>\n                      {user?.fullName ? getInitials(user.fullName) : \"U\"}\n                    </AvatarFallback>\n                  </Avatar>\n                  <span className=\"text-sm font-medium text-industrial-gray\">\n                    {user?.fullName || \"Benutzer\"}\n                  </span>\n                  <ChevronDown className=\"h-4 w-4 text-secondary-gray\" />\n                </Button>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent>\n                <DropdownMenuItem onClick={() => setLocation(\"/settings\")}>Einstellungen</DropdownMenuItem>\n                <DropdownMenuItem onClick={handleLogout}>Abmelden</DropdownMenuItem>\n              </DropdownMenuContent>\n            </DropdownMenu>\n          </div>\n\n          {/* Mobile Right Side */}\n          <div className=\"md:hidden flex items-center space-x-2\">\n            <NotificationDropdown />\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => setMobileMenuOpen(!mobileMenuOpen)}\n              className=\"p-2\"\n            >\n              {mobileMenuOpen ? (\n                <X className=\"h-5 w-5\" />\n              ) : (\n                <Menu className=\"h-5 w-5\" />\n              )}\n            </Button>\n          </div>\n        </div>\n\n        {/* Mobile Menu */}\n        {mobileMenuOpen && (\n          <div className=\"md:hidden absolute top-16 left-0 right-0 bg-white border-b border-gray-200 shadow-lg z-50\">\n            <nav className=\"px-4 py-2 space-y-1\">\n              <Link \n                href=\"/\" \n                className={`block px-3 py-2 rounded-md text-base font-medium ${\n                  isActive(\"/\") \n                    ? \"text-safety-blue bg-blue-50\" \n                    : \"text-secondary-gray hover:text-industrial-gray hover:bg-gray-50\"\n                }`}\n                onClick={() => setMobileMenuOpen(false)}\n              >\n                Dashboard\n              </Link>\n              <Link \n                href=\"/permits\" \n                className={`block px-3 py-2 rounded-md text-base font-medium ${\n                  isActive(\"/permits\") \n                    ? \"text-safety-blue bg-blue-50\" \n                    : \"text-secondary-gray hover:text-industrial-gray hover:bg-gray-50\"\n                }`}\n                onClick={() => setMobileMenuOpen(false)}\n              >\n                Genehmigungen\n              </Link>\n              <Link \n                href=\"/approvals\" \n                className={`block px-3 py-2 rounded-md text-base font-medium ${\n                  isActive(\"/approvals\") \n                    ? \"text-safety-blue bg-blue-50\" \n                    : \"text-secondary-gray hover:text-industrial-gray hover:bg-gray-50\"\n                }`}\n                onClick={() => setMobileMenuOpen(false)}\n              >\n                Freigaben\n              </Link>\n              <Link \n                href=\"/drafts\" \n                className={`block px-3 py-2 rounded-md text-base font-medium ${\n                  isActive(\"/drafts\") \n                    ? \"text-safety-blue bg-blue-50\" \n                    : \"text-secondary-gray hover:text-industrial-gray hover:bg-gray-50\"\n                }`}\n                onClick={() => setMobileMenuOpen(false)}\n              >\n                Entwürfe\n              </Link>\n              <div className=\"border-t border-gray-200 pt-2\">\n                <div className=\"flex items-center px-3 py-2\">\n                  <Avatar className=\"h-8 w-8\">\n                    <AvatarImage src=\"\" />\n                    <AvatarFallback>\n                      {user?.fullName ? getInitials(user.fullName) : \"U\"}\n                    </AvatarFallback>\n                  </Avatar>\n                  <span className=\"ml-3 text-sm font-medium text-industrial-gray\">\n                    {user?.fullName || \"Benutzer\"}\n                  </span>\n                </div>\n                <button \n                  onClick={() => { setLocation(\"/settings\"); setMobileMenuOpen(false); }}\n                  className=\"block w-full text-left px-3 py-2 text-base font-medium text-secondary-gray hover:text-industrial-gray hover:bg-gray-50\"\n                >\n                  Einstellungen\n                </button>\n                <button \n                  onClick={() => { handleLogout(); setMobileMenuOpen(false); }}\n                  className=\"block w-full text-left px-3 py-2 text-base font-medium text-secondary-gray hover:text-industrial-gray hover:bg-gray-50\"\n                >\n                  Abmelden\n                </button>\n              </div>\n            </nav>\n          </div>\n        )}\n      </div>\n    </header>\n  );\n}\n","size_bytes":9093},"client/src/components/notification-dropdown.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Bell, Check, AlertTriangle, Info, CheckCircle } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport type { Notification } from \"@shared/schema\";\n\ninterface NotificationDropdownProps {\n  className?: string;\n}\n\nexport function NotificationDropdown({ className }: NotificationDropdownProps) {\n  const queryClient = useQueryClient();\n\n  const { data: notifications = [], isLoading } = useQuery<Notification[]>({\n    queryKey: [\"/api/notifications\"],\n  });\n\n  const { data: unreadCountData } = useQuery<{ count: number }>({\n    queryKey: [\"/api/notifications/unread-count\"],\n  });\n\n  const markAsReadMutation = useMutation({\n    mutationFn: async (notificationId: number) => {\n      const response = await fetch(`/api/notifications/${notificationId}/read`, {\n        method: \"PATCH\",\n      });\n      if (!response.ok) throw new Error(\"Failed to mark as read\");\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/notifications\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/notifications/unread-count\"] });\n    },\n  });\n\n  const markAllAsReadMutation = useMutation({\n    mutationFn: async () => {\n      const response = await fetch(\"/api/notifications/read-all\", {\n        method: \"PATCH\",\n      });\n      if (!response.ok) throw new Error(\"Failed to mark all as read\");\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/notifications\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/notifications/unread-count\"] });\n    },\n  });\n\n  const unreadCount = unreadCountData?.count || 0;\n\n  const getNotificationIcon = (type: string) => {\n    switch (type) {\n      case \"warning\":\n        return <AlertTriangle className=\"w-4 h-4 text-warning-orange\" />;\n      case \"success\":\n        return <CheckCircle className=\"w-4 h-4 text-safety-green\" />;\n      case \"error\":\n        return <AlertTriangle className=\"w-4 h-4 text-danger-red\" />;\n      default:\n        return <Info className=\"w-4 h-4 text-safety-blue\" />;\n    }\n  };\n\n  const formatTime = (date: Date | string) => {\n    const d = new Date(date);\n    const now = new Date();\n    const diffInHours = Math.floor((now.getTime() - d.getTime()) / (1000 * 60 * 60));\n    \n    if (diffInHours < 1) return \"Gerade eben\";\n    if (diffInHours < 24) return `vor ${diffInHours}h`;\n    const diffInDays = Math.floor(diffInHours / 24);\n    if (diffInDays < 7) return `vor ${diffInDays}d`;\n    return d.toLocaleDateString('de-DE');\n  };\n\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <Button variant=\"ghost\" size=\"icon\" className={`relative ${className}`}>\n          <Bell className=\"h-5 w-5 text-secondary-gray\" />\n          {unreadCount > 0 && (\n            <Badge \n              className=\"absolute -top-1 -right-1 h-5 w-5 text-xs bg-danger-red text-white rounded-full flex items-center justify-center p-0\"\n            >\n              {unreadCount > 9 ? \"9+\" : unreadCount}\n            </Badge>\n          )}\n        </Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent align=\"end\" className=\"w-80\">\n        <div className=\"flex items-center justify-between p-4 border-b\">\n          <h3 className=\"font-semibold text-industrial-gray\">Benachrichtigungen</h3>\n          {unreadCount > 0 && (\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => markAllAsReadMutation.mutate()}\n              disabled={markAllAsReadMutation.isPending}\n              className=\"text-xs text-safety-blue hover:text-blue-700\"\n            >\n              Alle als gelesen\n            </Button>\n          )}\n        </div>\n        \n        <ScrollArea className=\"max-h-96\">\n          {isLoading ? (\n            <div className=\"p-4 text-center text-secondary-gray\">\n              Benachrichtigungen werden geladen...\n            </div>\n          ) : notifications.length === 0 ? (\n            <div className=\"p-4 text-center text-secondary-gray\">\n              Keine Benachrichtigungen vorhanden\n            </div>\n          ) : (\n            <div className=\"py-2\">\n              {notifications.map((notification) => (\n                <DropdownMenuItem\n                  key={notification.id}\n                  className={`p-4 cursor-pointer transition-colors ${\n                    !notification.isRead ? \"bg-blue-50 border-l-4 border-l-safety-blue\" : \"\"\n                  }`}\n                  onClick={() => {\n                    if (!notification.isRead) {\n                      markAsReadMutation.mutate(notification.id);\n                    }\n                  }}\n                >\n                  <div className=\"flex items-start gap-3 w-full\">\n                    <div className=\"flex-shrink-0 mt-0.5\">\n                      {getNotificationIcon(notification.type)}\n                    </div>\n                    <div className=\"flex-1 min-w-0\">\n                      <p className={`text-sm font-medium ${\n                        !notification.isRead ? \"text-industrial-gray\" : \"text-secondary-gray\"\n                      }`}>\n                        {notification.title}\n                      </p>\n                      <p className=\"text-xs text-secondary-gray mt-1 line-clamp-2\">\n                        {notification.message}\n                      </p>\n                      <p className=\"text-xs text-secondary-gray mt-2\">\n                        {formatTime(notification.createdAt)}\n                      </p>\n                    </div>\n                    {!notification.isRead && (\n                      <div className=\"w-2 h-2 bg-safety-blue rounded-full flex-shrink-0 mt-2\"></div>\n                    )}\n                  </div>\n                </DropdownMenuItem>\n              ))}\n            </div>\n          )}\n        </ScrollArea>\n        \n        {notifications.length > 0 && (\n          <>\n            <DropdownMenuSeparator />\n            <div className=\"p-2\">\n              <Button variant=\"ghost\" className=\"w-full text-xs text-safety-blue hover:text-blue-700\">\n                Alle Benachrichtigungen anzeigen\n              </Button>\n            </div>\n          </>\n        )}\n      </DropdownMenuContent>\n    </DropdownMenu>\n  );\n}","size_bytes":6625},"client/src/components/permit-attachments.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { \n  Upload, \n  Camera, \n  File, \n  Image, \n  Download, \n  Trash2, \n  FileText,\n  AlertCircle,\n  Paperclip\n} from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface PermitAttachment {\n  id: number;\n  permitId: number;\n  fileName: string;\n  originalName: string;\n  fileType: string;\n  mimeType: string;\n  fileSize: number;\n  filePath: string;\n  uploadedBy: number;\n  description?: string;\n  createdAt: string;\n}\n\ninterface PermitAttachmentsProps {\n  permitId: number;\n  readonly?: boolean;\n}\n\nexport function PermitAttachments({ permitId, readonly = false }: PermitAttachmentsProps) {\n  const [uploading, setUploading] = useState(false);\n  const [description, setDescription] = useState(\"\");\n  const [triggerFileSelect, setTriggerFileSelect] = useState(false);\n  const [triggerCameraSelect, setTriggerCameraSelect] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  console.log('PermitAttachments rendered with permitId:', permitId);\n\n  // Fetch attachments for this permit\n  const { data: attachments = [], isLoading, error } = useQuery<PermitAttachment[]>({\n    queryKey: [`attachments-${permitId}`],\n    queryFn: async () => {\n      console.log(`Fetching attachments for permit ${permitId}`);\n      const response = await fetch(`/api/permits/${permitId}/attachments`, {\n        credentials: \"include\",\n      });\n      if (!response.ok) {\n        throw new Error('Failed to fetch attachments');\n      }\n      const data = await response.json();\n      console.log(`Received ${data.length} attachments for permit ${permitId}:`, data);\n      return data as PermitAttachment[];\n    },\n    enabled: !!permitId,\n    staleTime: 0,\n  });\n\n  console.log('Attachments query result:', { \n    permitId, \n    attachments: attachments.length, \n    isLoading, \n    error,\n    attachmentsData: attachments.slice(0, 2) // Only show first 2 for debugging\n  });\n\n  // Upload mutation\n  const uploadMutation = useMutation({\n    mutationFn: async (formData: FormData) => {\n      console.log(`Starting upload for permit ${permitId}`);\n      \n      try {\n        const response = await fetch(`/api/permits/${permitId}/attachments`, {\n          method: 'POST',\n          body: formData,\n        });\n        \n        console.log(`Upload response status: ${response.status}`);\n        \n        if (!response.ok) {\n          const error = await response.json();\n          console.error('Upload failed:', error);\n          throw new Error(error.message || 'Upload failed');\n        }\n        \n        const result = await response.json();\n        console.log('Upload successful:', result);\n        return result;\n      } catch (error) {\n        console.error('Upload error:', error);\n        throw error;\n      }\n    },\n    onSuccess: (data) => {\n      queryClient.invalidateQueries({ queryKey: [`attachments-${permitId}`] });\n      setDescription(\"\");\n      console.log('File uploaded successfully:', data);\n      toast({\n        title: \"Erfolg\",\n        description: \"Datei erfolgreich hochgeladen\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Fehler\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Delete mutation\n  const deleteMutation = useMutation({\n    mutationFn: async (attachmentId: number) => {\n      const response = await fetch(`/api/attachments/${attachmentId}`, {\n        method: 'DELETE',\n      });\n      \n      if (!response.ok) {\n        throw new Error('Failed to delete attachment');\n      }\n      \n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/permits\", permitId, \"attachments\"] });\n      toast({\n        title: \"Erfolg\",\n        description: \"Datei erfolgreich gelöscht\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Fehler\",\n        description: \"Fehler beim Löschen der Datei\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleFileUpload = async (files: FileList | null) => {\n    if (!files || files.length === 0) {\n      console.log('No files selected');\n      return;\n    }\n\n    const file = files[0];\n    console.log(`Preparing to upload file for permit ${permitId}:`, {\n      name: file.name,\n      type: file.type,\n      size: file.size\n    });\n    \n    // Validate file size (10MB limit)\n    if (file.size > 10 * 1024 * 1024) {\n      toast({\n        title: \"Fehler\",\n        description: \"Datei ist zu groß. Maximum 10MB erlaubt.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Validate permitId\n    if (!permitId || isNaN(permitId)) {\n      console.error('Invalid permit ID:', permitId);\n      toast({\n        title: \"Fehler\",\n        description: \"Ungültige Genehmigungsnummer\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const formData = new FormData();\n    formData.append('file', file);\n    if (description.trim()) {\n      formData.append('description', description.trim());\n    }\n\n    setUploading(true);\n    try {\n      const result = await uploadMutation.mutateAsync(formData);\n      console.log(`File uploaded successfully for permit ${permitId}:`, result);\n    } catch (error) {\n      console.error(`Failed to upload file for permit ${permitId}:`, error);\n    } finally {\n      setUploading(false);\n    }\n  };\n\n  const handleFileInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    console.log('File input changed:', event.target.files?.length || 0, 'files');\n    handleFileUpload(event.target.files);\n    event.target.value = '';\n  };\n\n  const handleCameraCapture = async (event: React.ChangeEvent<HTMLInputElement>) => {\n    const files = event.target.files;\n    if (files && files.length > 0) {\n      console.log('Camera captured file:', files[0].name, files[0].type);\n      await handleFileUpload(files);\n    }\n    event.target.value = '';\n  };\n\n  const handleDownload = (attachment: PermitAttachment) => {\n    const link = document.createElement('a');\n    link.href = `/api/attachments/${attachment.id}/download`;\n    link.download = attachment.originalName;\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  };\n\n  const handleDelete = (attachmentId: number) => {\n    if (confirm('Sind Sie sicher, dass Sie diese Datei löschen möchten?')) {\n      deleteMutation.mutate(attachmentId);\n    }\n  };\n\n  const formatFileSize = (bytes: number) => {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  };\n\n  const getFileIcon = (fileType: string, mimeType: string) => {\n    if (fileType === 'image') {\n      return <Image className=\"h-4 w-4\" />;\n    } else if (mimeType === 'application/pdf') {\n      return <FileText className=\"h-4 w-4\" />;\n    } else {\n      return <File className=\"h-4 w-4\" />;\n    }\n  };\n\n  const getFileTypeBadge = (fileType: string) => {\n    const variants: Record<string, any> = {\n      image: \"default\",\n      document: \"secondary\",\n      other: \"outline\"\n    };\n    \n    const labels: Record<string, string> = {\n      image: \"Bild\",\n      document: \"Dokument\",\n      other: \"Datei\"\n    };\n\n    return (\n      <Badge variant={variants[fileType] || \"outline\"}>\n        {labels[fileType] || \"Unbekannt\"}\n      </Badge>\n    );\n  };\n\n  if (isLoading) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Paperclip className=\"h-5 w-5\" />\n            Anhänge\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"text-center py-4\">Lädt Anhänge...</div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <Paperclip className=\"h-5 w-5\" />\n          Anhänge ({attachments.length})\n        </CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        {/* Upload Section */}\n        {!readonly && (\n          <div className=\"space-y-4 p-4 border rounded-lg bg-gray-50\">\n            <div className=\"grid gap-4\">\n              <div>\n                <Label htmlFor=\"description\">Beschreibung (optional)</Label>\n                <Textarea\n                  id=\"description\"\n                  placeholder=\"Beschreibung der Datei...\"\n                  value={description}\n                  onChange={(e) => setDescription(e.target.value)}\n                  rows={2}\n                />\n              </div>\n              \n              <div className=\"flex gap-2\">\n                <label className=\"cursor-pointer\">\n                  <Button\n                    variant=\"outline\"\n                    disabled={uploading}\n                    className=\"flex items-center gap-2\"\n                    asChild\n                  >\n                    <span>\n                      <Upload className=\"h-4 w-4\" />\n                      Datei hochladen\n                    </span>\n                  </Button>\n                  <input\n                    type=\"file\"\n                    onChange={handleFileInputChange}\n                    accept=\".jpg,.jpeg,.png,.gif,.pdf,.doc,.docx,.txt,.xls,.xlsx\"\n                    className=\"hidden\"\n                  />\n                </label>\n                \n                <label className=\"cursor-pointer\">\n                  <Button\n                    variant=\"outline\"\n                    disabled={uploading}\n                    className=\"flex items-center gap-2\"\n                    asChild\n                  >\n                    <span>\n                      <Camera className=\"h-4 w-4\" />\n                      Foto aufnehmen\n                    </span>\n                  </Button>\n                  <input\n                    type=\"file\"\n                    onChange={handleCameraCapture}\n                    accept=\"image/*\"\n                    capture=\"environment\"\n                    className=\"hidden\"\n                  />\n                </label>\n              </div>\n              \n              {uploading && (\n                <Alert>\n                  <AlertCircle className=\"h-4 w-4\" />\n                  <AlertDescription>\n                    Datei wird hochgeladen...\n                  </AlertDescription>\n                </Alert>\n              )}\n            </div>\n\n\n          </div>\n        )}\n\n        {/* Attachments List */}\n        {attachments.length === 0 ? (\n          <div className=\"text-center py-8 text-muted-foreground\">\n            <Paperclip className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n            <p>Keine Anhänge vorhanden</p>\n            {!readonly && (\n              <p className=\"text-sm mt-2\">\n                Fügen Sie Dokumente oder Bilder zu dieser Genehmigung hinzu\n              </p>\n            )}\n          </div>\n        ) : (\n          <div className=\"space-y-3\">\n            {attachments.map((attachment) => (\n              <div\n                key={attachment.id}\n                className=\"flex items-center justify-between p-3 border rounded-lg hover:bg-gray-50\"\n              >\n                <div className=\"flex items-center gap-3 flex-1\">\n                  {getFileIcon(attachment.fileType, attachment.mimeType)}\n                  <div className=\"flex-1 min-w-0\">\n                    <div className=\"flex items-center gap-2 mb-1\">\n                      <span className=\"font-medium truncate\">\n                        {attachment.originalName}\n                      </span>\n                      {getFileTypeBadge(attachment.fileType)}\n                    </div>\n                    <div className=\"text-sm text-muted-foreground\">\n                      {formatFileSize(attachment.fileSize)} • {new Date(attachment.createdAt).toLocaleDateString('de-DE')}\n                    </div>\n                    {attachment.description && (\n                      <div className=\"text-sm text-muted-foreground mt-1\">\n                        {attachment.description}\n                      </div>\n                    )}\n                  </div>\n                </div>\n                \n                <div className=\"flex items-center gap-2\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => handleDownload(attachment)}\n                    className=\"flex items-center gap-1\"\n                  >\n                    <Download className=\"h-3 w-3\" />\n                    Download\n                  </Button>\n                  \n                  {!readonly && (\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => handleDelete(attachment.id)}\n                      className=\"flex items-center gap-1 text-red-600 hover:text-red-700\"\n                    >\n                      <Trash2 className=\"h-3 w-3\" />\n                      Löschen\n                    </Button>\n                  )}\n                </div>\n              </div>\n            ))}\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":13762},"client/src/components/permit-status-badge.tsx":{"content":"import { Badge } from \"@/components/ui/badge\";\nimport { getStatusConfig } from '@/utils/status-config';\n\ninterface PermitStatusBadgeProps {\n  status: string;\n}\n\nexport function PermitStatusBadge({ status }: PermitStatusBadgeProps) {\n  const config = getStatusConfig(status);\n\n  return (\n    <Badge variant=\"secondary\" className={config.badgeClassName}>\n      {config.label}\n    </Badge>\n  );\n}\n","size_bytes":394},"client/src/components/permit-table-clean.tsx":{"content":"import { useLocation } from \"wouter\";\nimport { Eye, Edit, Printer, Trash2, MapPin, User as UserIcon, Clock } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { PermitStatusBadge } from \"@/components/permit-status-badge\";\nimport { Permit, User } from \"@shared/schema\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface PermitTableProps {\n  permits: Permit[];\n  isLoading?: boolean;\n  onEdit?: (permit: Permit) => void;\n  onDelete?: (permitId: number) => void;\n  isAdmin?: boolean;\n  currentUser?: User;\n}\n\nfunction formatDateTime(dateString: string | null): string {\n  if (!dateString) return 'Nicht festgelegt';\n  const date = new Date(dateString);\n  return date.toLocaleDateString('de-DE', {\n    day: '2-digit',\n    month: '2-digit',\n    year: 'numeric',\n    hour: '2-digit',\n    minute: '2-digit'\n  });\n}\n\nfunction getPermitTypeLabel(type: string): string {\n  const typeLabels: Record<string, string> = {\n    'hot_work': 'Heißarbeiten',\n    'confined_space': 'Enger Raum',\n    'electrical': 'Elektrische Arbeiten',\n    'chemical': 'Chemische Arbeiten',\n    'maintenance': 'Wartungsarbeiten',\n    'general': 'Allgemeine Genehmigung'\n  };\n  return typeLabels[type] || type;\n}\n\nexport function PermitTable({ permits, isLoading, onEdit, onDelete, isAdmin, currentUser }: PermitTableProps) {\n  const [, setLocation] = useLocation();\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n\n\n  const handleView = (permit: Permit) => {\n    setLocation(`/permit/${permit.id}`);\n  };\n\n\n\n  const handleEdit = (permit: Permit) => {\n    console.log('Editing permit:', permit.permitId);\n    setLocation(`/permit/${permit.id}`);\n  };\n\n  const handlePrint = (permit: Permit) => {\n    setLocation(`/permit/${permit.id}/print`);\n  };\n\n  const handleDelete = (permit: Permit) => {\n    if (onDelete && window.confirm(`Sind Sie sicher, dass Sie die Genehmigung ${permit.permitId} löschen möchten?`)) {\n      onDelete(permit.id);\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center py-8\">\n        <div className=\"text-secondary-gray\">Lade Genehmigungen...</div>\n      </div>\n    );\n  }\n\n  return (\n    <>\n      {/* Desktop Table View */}\n      <div className=\"hidden md:block bg-white rounded-lg shadow-sm border border-primary-blue/10\">\n        <Table>\n          <TableHeader>\n            <TableRow className=\"border-b border-primary-blue/10 bg-gradient-to-r from-primary-blue/5 to-safety-blue/5\">\n              <TableHead className=\"text-xs font-medium text-secondary-gray uppercase tracking-wider\">\n                Genehmigungsnummer\n              </TableHead>\n              <TableHead className=\"text-xs font-medium text-secondary-gray uppercase tracking-wider\">\n                Typ\n              </TableHead>\n              <TableHead className=\"text-xs font-medium text-secondary-gray uppercase tracking-wider\">\n                Abteilung\n              </TableHead>\n              <TableHead className=\"text-xs font-medium text-secondary-gray uppercase tracking-wider\">\n                Antragsteller\n              </TableHead>\n              <TableHead className=\"text-xs font-medium text-secondary-gray uppercase tracking-wider\">\n                Status\n              </TableHead>\n              <TableHead className=\"text-xs font-medium text-secondary-gray uppercase tracking-wider\">\n                Gültig bis\n              </TableHead>\n              <TableHead className=\"text-xs font-medium text-secondary-gray uppercase tracking-wider\">\n                Aktionen\n              </TableHead>\n            </TableRow>\n          </TableHeader>\n          <TableBody>\n            {permits.length === 0 ? (\n              <TableRow>\n                <TableCell colSpan={7} className=\"text-center py-8 text-secondary-gray\">\n                  Keine Genehmigungen gefunden. Erstellen Sie Ihre erste Genehmigung, um zu beginnen.\n                </TableCell>\n              </TableRow>\n            ) : (\n              permits.map((permit) => (\n                <TableRow key={permit.id}>\n                  <TableCell className=\"font-medium text-safety-blue\">\n                    #{permit.permitId}\n                  </TableCell>\n                  <TableCell className=\"text-industrial-gray\">\n                    {getPermitTypeLabel(permit.type)}\n                  </TableCell>\n                  <TableCell className=\"text-industrial-gray\">\n                    {permit.department}\n                  </TableCell>\n                  <TableCell className=\"text-industrial-gray\">\n                    {permit.requestorName}\n                  </TableCell>\n                  <TableCell>\n                    <PermitStatusBadge status={permit.status} />\n                  </TableCell>\n                  <TableCell className=\"text-industrial-gray\">\n                    {formatDateTime(permit.endDate)}\n                  </TableCell>\n                  <TableCell>\n                    <div className=\"flex items-center justify-between gap-2\">\n                      {/* Standard Action Buttons */}\n                      <div className=\"flex gap-1\">\n                        <Button \n                          variant=\"ghost\" \n                          size=\"icon\" \n                          className=\"h-8 w-8\"\n                          onClick={() => handleView(permit)}\n                          title=\"Anzeigen\"\n                        >\n                          <Eye className=\"h-4 w-4 text-safety-blue\" />\n                        </Button>\n                        <Button \n                          variant=\"ghost\" \n                          size=\"icon\" \n                          className=\"h-8 w-8\"\n                          onClick={() => handleEdit(permit)}\n                          title=\"Bearbeiten\"\n                        >\n                          <Edit className=\"h-4 w-4 text-secondary-gray\" />\n                        </Button>\n                        <Button \n                          variant=\"ghost\" \n                          size=\"icon\" \n                          className=\"h-8 w-8\"\n                          onClick={() => handlePrint(permit)}\n                          title=\"Drucken\"\n                        >\n                          <Printer className=\"h-4 w-4 text-secondary-gray\" />\n                        </Button>\n                        {isAdmin && onDelete && (\n                          <Button \n                            variant=\"ghost\" \n                            size=\"icon\" \n                            className=\"h-8 w-8\"\n                            onClick={() => handleDelete(permit)}\n                            title=\"Löschen\"\n                          >\n                            <Trash2 className=\"h-4 w-4 text-red-500\" />\n                          </Button>\n                        )}\n                      </div>\n\n                    </div>\n                  </TableCell>\n                </TableRow>\n              ))\n            )}\n          </TableBody>\n        </Table>\n      </div>\n\n      {/* Mobile Card View */}\n      <div className=\"md:hidden space-y-4\">\n        {permits.length === 0 ? (\n          <div className=\"text-center py-8 text-secondary-gray\">\n            Keine Genehmigungen gefunden. Erstellen Sie Ihre erste Genehmigung, um zu beginnen.\n          </div>\n        ) : (\n          permits.map((permit) => (\n            <Card key={permit.id} className=\"border border-gray-200 shadow-sm\">\n              <CardContent className=\"p-4\">\n                <div className=\"flex flex-col space-y-3\">\n                  {/* Header with ID and Status */}\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"font-medium text-safety-blue text-lg\">\n                      #{permit.permitId}\n                    </div>\n                    <PermitStatusBadge status={permit.status} />\n                  </div>\n                  \n                  {/* Type and Department */}\n                  <div className=\"flex flex-col space-y-2\">\n                    <div className=\"flex items-center text-sm text-industrial-gray\">\n                      <span className=\"font-medium\">Typ:</span>\n                      <span className=\"ml-2\">{getPermitTypeLabel(permit.type)}</span>\n                    </div>\n                    <div className=\"flex items-center text-sm text-industrial-gray\">\n                      <span className=\"font-medium\">Abteilung:</span>\n                      <span className=\"ml-2\">{permit.department}</span>\n                    </div>\n                  </div>\n\n                  {/* Requestor and Location */}\n                  <div className=\"flex flex-col space-y-2\">\n                    <div className=\"flex items-center text-sm text-industrial-gray\">\n                      <UserIcon className=\"h-4 w-4 mr-2\" />\n                      <span className=\"font-medium\">Antragsteller:</span>\n                      <span className=\"ml-2\">{permit.requestorName}</span>\n                    </div>\n                    <div className=\"flex items-center text-sm text-industrial-gray\">\n                      <MapPin className=\"h-4 w-4 mr-2\" />\n                      <span className=\"font-medium\">Standort:</span>\n                      <span className=\"ml-2\">{permit.location}</span>\n                    </div>\n                  </div>\n\n                  {/* Valid Until */}\n                  <div className=\"flex items-center text-sm text-industrial-gray\">\n                    <Clock className=\"h-4 w-4 mr-2\" />\n                    <span className=\"font-medium\">Gültig bis:</span>\n                    <span className=\"ml-2\">{formatDateTime(permit.endDate)}</span>\n                  </div>\n\n                  {/* Action Buttons */}\n                  <div className=\"flex items-center justify-between pt-3 border-t border-gray-200\">\n                    <div className=\"flex gap-2\">\n                      <Button \n                        variant=\"ghost\" \n                        size=\"sm\" \n                        className=\"flex items-center gap-1\"\n                        onClick={() => handleView(permit)}\n                      >\n                        <Eye className=\"h-4 w-4 text-safety-blue\" />\n                        <span className=\"text-xs\">Anzeigen</span>\n                      </Button>\n                      <Button \n                        variant=\"ghost\" \n                        size=\"sm\" \n                        className=\"flex items-center gap-1\"\n                        onClick={() => handleEdit(permit)}\n                      >\n                        <Edit className=\"h-4 w-4 text-secondary-gray\" />\n                        <span className=\"text-xs\">Bearbeiten</span>\n                      </Button>\n                      <Button \n                        variant=\"ghost\" \n                        size=\"sm\" \n                        className=\"flex items-center gap-1\"\n                        onClick={() => handlePrint(permit)}\n                      >\n                        <Printer className=\"h-4 w-4 text-secondary-gray\" />\n                        <span className=\"text-xs\">Drucken</span>\n                      </Button>\n                    </div>\n                    {isAdmin && onDelete && (\n                      <Button \n                        variant=\"ghost\" \n                        size=\"sm\" \n                        className=\"flex items-center gap-1\"\n                        onClick={() => handleDelete(permit)}\n                      >\n                        <Trash2 className=\"h-4 w-4 text-red-500\" />\n                        <span className=\"text-xs\">Löschen</span>\n                      </Button>\n                    )}\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))\n        )}\n      </div>\n\n    </>\n  );\n}","size_bytes":12057},"client/src/components/signature-pad.tsx":{"content":"import { useRef, useEffect, useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Trash2, Download, CheckCircle } from \"lucide-react\";\n\ninterface SignaturePadProps {\n  onSignatureChange: (signature: string) => void;\n  existingSignature?: string;\n  disabled?: boolean;\n}\n\nexport function SignaturePad({ onSignatureChange, existingSignature, disabled = false }: SignaturePadProps) {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const [isDrawing, setIsDrawing] = useState(false);\n  const [hasSignature, setHasSignature] = useState(false);\n  const [lastX, setLastX] = useState(0);\n  const [lastY, setLastY] = useState(0);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n\n    // Set canvas size\n    canvas.width = 400;\n    canvas.height = 200;\n    \n    // Set drawing styles\n    ctx.strokeStyle = '#000000';\n    ctx.lineWidth = 2;\n    ctx.lineCap = 'round';\n    ctx.lineJoin = 'round';\n\n    // Clear canvas\n    ctx.fillStyle = 'white';\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n    // Load existing signature if provided\n    if (existingSignature) {\n      const img = new Image();\n      img.onload = () => {\n        ctx.drawImage(img, 0, 0);\n        setHasSignature(true);\n      };\n      img.src = existingSignature;\n    }\n  }, [existingSignature]);\n\n  const startDrawing = (e: React.MouseEvent<HTMLCanvasElement>) => {\n    if (disabled) return;\n    \n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const rect = canvas.getBoundingClientRect();\n    const x = e.clientX - rect.left;\n    const y = e.clientY - rect.top;\n\n    setIsDrawing(true);\n    setLastX(x);\n    setLastY(y);\n  };\n\n  const draw = (e: React.MouseEvent<HTMLCanvasElement>) => {\n    if (!isDrawing || disabled) return;\n\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n\n    const rect = canvas.getBoundingClientRect();\n    const x = e.clientX - rect.left;\n    const y = e.clientY - rect.top;\n\n    ctx.beginPath();\n    ctx.moveTo(lastX, lastY);\n    ctx.lineTo(x, y);\n    ctx.stroke();\n\n    setLastX(x);\n    setLastY(y);\n    setHasSignature(true);\n  };\n\n  const stopDrawing = () => {\n    if (!isDrawing) return;\n    setIsDrawing(false);\n    \n    // Convert canvas to base64 and notify parent\n    const canvas = canvasRef.current;\n    if (canvas && hasSignature) {\n      const dataURL = canvas.toDataURL('image/png');\n      onSignatureChange(dataURL);\n    }\n  };\n\n  const clearSignature = () => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n\n    ctx.fillStyle = 'white';\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n    setHasSignature(false);\n    onSignatureChange('');\n  };\n\n  const downloadSignature = () => {\n    const canvas = canvasRef.current;\n    if (!canvas || !hasSignature) return;\n\n    const link = document.createElement('a');\n    link.download = 'unterschrift.png';\n    link.href = canvas.toDataURL();\n    link.click();\n  };\n\n  // Touch events for mobile support\n  const handleTouchStart = (e: React.TouchEvent<HTMLCanvasElement>) => {\n    e.preventDefault();\n    if (disabled) return;\n\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const rect = canvas.getBoundingClientRect();\n    const touch = e.touches[0];\n    const x = touch.clientX - rect.left;\n    const y = touch.clientY - rect.top;\n\n    setIsDrawing(true);\n    setLastX(x);\n    setLastY(y);\n  };\n\n  const handleTouchMove = (e: React.TouchEvent<HTMLCanvasElement>) => {\n    e.preventDefault();\n    if (!isDrawing || disabled) return;\n\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n\n    const rect = canvas.getBoundingClientRect();\n    const touch = e.touches[0];\n    const x = touch.clientX - rect.left;\n    const y = touch.clientY - rect.top;\n\n    ctx.beginPath();\n    ctx.moveTo(lastX, lastY);\n    ctx.lineTo(x, y);\n    ctx.stroke();\n\n    setLastX(x);\n    setLastY(y);\n    setHasSignature(true);\n  };\n\n  const handleTouchEnd = (e: React.TouchEvent<HTMLCanvasElement>) => {\n    e.preventDefault();\n    stopDrawing();\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2 text-sm\">\n          <CheckCircle className=\"h-4 w-4\" />\n          Digitale Unterschrift\n        </CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        <div className=\"border-2 border-dashed border-gray-300 rounded-lg p-4 bg-gray-50\">\n          <canvas\n            ref={canvasRef}\n            className={`border border-gray-400 rounded cursor-crosshair bg-white ${disabled ? 'opacity-50 cursor-not-allowed' : ''}`}\n            style={{ width: '100%', maxWidth: '400px', height: '200px' }}\n            onMouseDown={startDrawing}\n            onMouseMove={draw}\n            onMouseUp={stopDrawing}\n            onMouseLeave={stopDrawing}\n            onTouchStart={handleTouchStart}\n            onTouchMove={handleTouchMove}\n            onTouchEnd={handleTouchEnd}\n          />\n          <p className=\"text-xs text-gray-600 mt-2 text-center\">\n            {disabled ? 'Unterschrift gesperrt' : 'Unterschreiben Sie hier mit der Maus oder dem Finger'}\n          </p>\n        </div>\n\n        <div className=\"flex gap-2 justify-center\">\n          <Button\n            type=\"button\"\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={clearSignature}\n            disabled={!hasSignature || disabled}\n          >\n            <Trash2 className=\"h-4 w-4 mr-1\" />\n            Löschen\n          </Button>\n          <Button\n            type=\"button\"\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={downloadSignature}\n            disabled={!hasSignature}\n          >\n            <Download className=\"h-4 w-4 mr-1\" />\n            Herunterladen\n          </Button>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":6143},"client/src/components/status-indicator.tsx":{"content":"import { WORKFLOW_CONFIG } from \"@/lib/workflow-config\";\nimport { Badge } from \"@/components/ui/badge\";\n\ninterface StatusIndicatorProps {\n  status: string;\n  showLabel?: boolean;\n  size?: 'sm' | 'md' | 'lg';\n  className?: string;\n}\n\nexport function StatusIndicator({ status, showLabel = true, size = 'md', className }: StatusIndicatorProps) {\n  const config = WORKFLOW_CONFIG[status];\n  \n  if (!config) {\n    return (\n      <Badge variant=\"secondary\" className={className}>\n        {status}\n      </Badge>\n    );\n  }\n\n  const sizeClasses = {\n    sm: 'w-2 h-2 text-xs',\n    md: 'w-3 h-3 text-sm',\n    lg: 'w-4 h-4 text-base'\n  };\n\n  if (!showLabel) {\n    return (\n      <div \n        className={`${sizeClasses[size].split(' ').slice(0, 2).join(' ')} rounded-full ${config.bgColor.replace('bg-', 'bg-').replace('-100', '-500')} ${className}`}\n        title={config.label}\n      />\n    );\n  }\n\n  return (\n    <div className={`flex items-center gap-2 ${className}`}>\n      <div className={`${sizeClasses[size].split(' ').slice(0, 2).join(' ')} rounded-full ${config.bgColor.replace('bg-', 'bg-').replace('-100', '-500')}`} />\n      <span className={`${sizeClasses[size].split(' ')[2]} font-medium ${config.textColor}`}>\n        {config.label}\n      </span>\n    </div>\n  );\n}","size_bytes":1270},"client/src/components/status-timeline.tsx":{"content":"import { format } from \"date-fns\";\nimport { de } from \"date-fns/locale\";\nimport { Clock, User } from \"lucide-react\";\nimport { WORKFLOW_CONFIG } from \"@/lib/workflow-config\";\n\ninterface StatusHistoryEntry {\n  status: string;\n  timestamp: string;\n  userId?: number;\n  userName?: string;\n  comment?: string;\n}\n\ninterface StatusTimelineProps {\n  statusHistory: StatusHistoryEntry[];\n  currentStatus: string;\n  className?: string;\n}\n\nexport function StatusTimeline({ statusHistory, currentStatus, className }: StatusTimelineProps) {\n  // Parse status history if it's a JSON string\n  const parsedHistory = typeof statusHistory === 'string' \n    ? JSON.parse(statusHistory || '[]') \n    : statusHistory || [];\n\n  // Add current status if not in history\n  const allEntries = [...parsedHistory];\n  if (allEntries.length === 0 || allEntries[allEntries.length - 1].status !== currentStatus) {\n    allEntries.push({\n      status: currentStatus,\n      timestamp: new Date().toISOString(),\n      comment: 'Aktueller Status'\n    });\n  }\n\n  return (\n    <div className={`space-y-4 ${className}`}>\n      <h4 className=\"font-medium text-gray-900 flex items-center gap-2\">\n        <Clock className=\"h-4 w-4\" />\n        Status-Verlauf\n      </h4>\n      \n      <div className=\"space-y-3\">\n        {allEntries.map((entry, index) => {\n          const config = WORKFLOW_CONFIG[entry.status];\n          const isLatest = index === allEntries.length - 1;\n          \n          return (\n            <div key={index} className=\"flex items-start gap-3\">\n              {/* Timeline indicator */}\n              <div className=\"flex flex-col items-center\">\n                <div className={`w-3 h-3 rounded-full ${config?.bgColor || 'bg-gray-100'} border-2 border-white shadow-sm`} />\n                {!isLatest && (\n                  <div className=\"w-px h-6 bg-gray-200 mt-1\" />\n                )}\n              </div>\n              \n              {/* Content */}\n              <div className=\"flex-1 min-w-0\">\n                <div className=\"flex items-center gap-2 mb-1\">\n                  <span className={`text-sm font-medium ${config?.textColor || 'text-gray-800'}`}>\n                    {config?.label || entry.status}\n                  </span>\n                  {isLatest && (\n                    <span className=\"text-xs bg-blue-100 text-blue-800 px-2 py-0.5 rounded-full\">\n                      Aktuell\n                    </span>\n                  )}\n                </div>\n                \n                <div className=\"text-xs text-gray-500 mb-1\">\n                  {format(new Date(entry.timestamp), 'dd.MM.yyyy HH:mm', { locale: de })}\n                </div>\n                \n                {entry.userName && (\n                  <div className=\"flex items-center gap-1 text-xs text-gray-600 mb-1\">\n                    <User className=\"h-3 w-3\" />\n                    {entry.userName}\n                  </div>\n                )}\n                \n                {entry.comment && (\n                  <div className=\"text-xs text-gray-600 italic\">\n                    {entry.comment}\n                  </div>\n                )}\n              </div>\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n}","size_bytes":3206},"client/src/components/temporary-attachments.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { \n  Upload, \n  Camera, \n  File, \n  Image, \n  Trash2, \n  FileText,\n  AlertCircle,\n  Paperclip\n} from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface TemporaryAttachment {\n  id: string;\n  file: File;\n  description: string;\n  preview?: string;\n}\n\ninterface TemporaryAttachmentsProps {\n  attachments: TemporaryAttachment[];\n  onAttachmentsChange: (attachments: TemporaryAttachment[]) => void;\n  readonly?: boolean;\n}\n\nexport function TemporaryAttachments({ attachments, onAttachmentsChange, readonly = false }: TemporaryAttachmentsProps) {\n  const [uploading, setUploading] = useState(false);\n  const [description, setDescription] = useState(\"\");\n  const [triggerFileSelect, setTriggerFileSelect] = useState(false);\n  const [triggerCameraSelect, setTriggerCameraSelect] = useState(false);\n  const { toast } = useToast();\n\n  const handleFileUpload = async (files: FileList | null, isCamera = false) => {\n    if (!files || files.length === 0) return;\n\n    setUploading(true);\n    try {\n      const newAttachments: TemporaryAttachment[] = [];\n      \n      for (let i = 0; i < files.length; i++) {\n        const file = files[i];\n        \n        // Validate file size (10MB limit)\n        if (file.size > 10 * 1024 * 1024) {\n          toast({\n            title: \"Datei zu groß\",\n            description: `${file.name} ist größer als 10MB`,\n            variant: \"destructive\",\n          });\n          continue;\n        }\n\n        // Create preview for images\n        let preview: string | undefined;\n        if (file.type.startsWith('image/')) {\n          preview = URL.createObjectURL(file);\n        }\n\n        const tempAttachment: TemporaryAttachment = {\n          id: `temp_${Date.now()}_${i}`,\n          file,\n          description: description || \"\",\n          preview\n        };\n\n        newAttachments.push(tempAttachment);\n      }\n\n      onAttachmentsChange([...attachments, ...newAttachments]);\n      setDescription(\"\");\n      \n      toast({\n        title: \"Datei(en) hinzugefügt\",\n        description: `${newAttachments.length} Datei(en) zur Upload-Warteschlange hinzugefügt`,\n      });\n    } catch (error) {\n      console.error(\"Fehler beim Hinzufügen der Datei:\", error);\n      toast({\n        title: \"Fehler\",\n        description: \"Fehler beim Hinzufügen der Datei\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setUploading(false);\n    }\n  };\n\n  const removeAttachment = (id: string) => {\n    const attachment = attachments.find(a => a.id === id);\n    if (attachment?.preview) {\n      URL.revokeObjectURL(attachment.preview);\n    }\n    onAttachmentsChange(attachments.filter(a => a.id !== id));\n  };\n\n  const formatFileSize = (bytes: number) => {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  };\n\n  const getFileIcon = (mimeType: string) => {\n    if (mimeType.startsWith('image/')) return <Image className=\"h-4 w-4\" />;\n    if (mimeType.includes('pdf')) return <FileText className=\"h-4 w-4\" />;\n    return <File className=\"h-4 w-4\" />;\n  };\n\n  console.log(\"TemporaryAttachments rendered with attachments:\", attachments.length);\n\n  return (\n    <div className=\"space-y-4\">\n      {!readonly && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Paperclip className=\"h-5 w-5\" />\n              Dateien hinzufügen\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"description\">Beschreibung (optional)</Label>\n              <Textarea\n                id=\"description\"\n                placeholder=\"Beschreibung für die Datei(en)...\"\n                value={description}\n                onChange={(e) => setDescription(e.target.value)}\n                rows={2}\n              />\n            </div>\n            \n            <div className=\"flex gap-2\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => setTriggerFileSelect(!triggerFileSelect)}\n                disabled={uploading}\n                className=\"flex items-center gap-2\"\n              >\n                <Upload className=\"h-4 w-4\" />\n                Datei auswählen\n              </Button>\n              \n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => setTriggerCameraSelect(!triggerCameraSelect)}\n                disabled={uploading}\n                className=\"flex items-center gap-2\"\n              >\n                <Camera className=\"h-4 w-4\" />\n                Foto aufnehmen\n              </Button>\n            </div>\n\n            <input\n              type=\"file\"\n              multiple\n              accept=\"image/*,application/pdf,.doc,.docx,.txt\"\n              style={{ display: 'none' }}\n              ref={(input) => {\n                if (input && triggerFileSelect) {\n                  input.click();\n                  setTriggerFileSelect(false);\n                }\n              }}\n              onChange={(e) => handleFileUpload(e.target.files)}\n            />\n            \n            <input\n              type=\"file\"\n              accept=\"image/*\"\n              capture=\"environment\"\n              style={{ display: 'none' }}\n              ref={(input) => {\n                if (input && triggerCameraSelect) {\n                  input.click();\n                  setTriggerCameraSelect(false);\n                }\n              }}\n              onChange={(e) => handleFileUpload(e.target.files, true)}\n            />\n\n            {uploading && (\n              <Alert>\n                <AlertCircle className=\"h-4 w-4\" />\n                <AlertDescription>\n                  Dateien werden zur Warteschlange hinzugefügt...\n                </AlertDescription>\n              </Alert>\n            )}\n          </CardContent>\n        </Card>\n      )}\n\n      {attachments.length > 0 && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Paperclip className=\"h-5 w-5\" />\n              Anhänge ({attachments.length})\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3\">\n              {attachments.map((attachment) => (\n                <div key={attachment.id} className=\"flex items-center justify-between p-3 border rounded-lg\">\n                  <div className=\"flex items-center gap-3 flex-1\">\n                    {getFileIcon(attachment.file.type)}\n                    <div className=\"flex-1 min-w-0\">\n                      <p className=\"font-medium truncate\">{attachment.file.name}</p>\n                      <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                        <span>{formatFileSize(attachment.file.size)}</span>\n                        <Badge variant=\"secondary\">{attachment.file.type}</Badge>\n                      </div>\n                      {attachment.description && (\n                        <p className=\"text-sm text-muted-foreground mt-1\">{attachment.description}</p>\n                      )}\n                    </div>\n                    {attachment.preview && (\n                      <img \n                        src={attachment.preview} \n                        alt=\"Vorschau\" \n                        className=\"w-12 h-12 object-cover rounded border\"\n                      />\n                    )}\n                  </div>\n                  {!readonly && (\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => removeAttachment(attachment.id)}\n                      className=\"text-destructive hover:text-destructive\"\n                    >\n                      <Trash2 className=\"h-4 w-4\" />\n                    </Button>\n                  )}\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {attachments.length === 0 && readonly && (\n        <Card>\n          <CardContent className=\"text-center py-8\">\n            <Paperclip className=\"h-12 w-12 mx-auto mb-4 text-muted-foreground\" />\n            <p className=\"text-muted-foreground\">Keine Anhänge vorhanden</p>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}","size_bytes":8906},"client/src/components/work-location-management.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Switch } from \"@/components/ui/switch\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Plus, Edit, Trash2, Building, MapPin } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface WorkLocation {\n  id: number;\n  name: string;\n  description?: string;\n  building?: string;\n  area?: string;\n  isActive: boolean;\n  createdAt: string;\n  updatedAt: string;\n}\n\ninterface WorkLocationFormData {\n  name: string;\n  description: string;\n  building: string;\n  area: string;\n  isActive: boolean;\n}\n\nexport function WorkLocationManagement() {\n  const [editingLocation, setEditingLocation] = useState<WorkLocation | null>(null);\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);\n  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);\n  const [formData, setFormData] = useState<WorkLocationFormData>({\n    name: \"\",\n    description: \"\",\n    building: \"\",\n    area: \"\",\n    isActive: true\n  });\n\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: locations = [], isLoading } = useQuery<WorkLocation[]>({\n    queryKey: [\"/api/work-locations\"],\n  });\n\n  const createMutation = useMutation({\n    mutationFn: async (data: WorkLocationFormData) => {\n      return await apiRequest(\"/api/work-locations\", \"POST\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/work-locations\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/work-locations/active\"] });\n      setIsCreateDialogOpen(false);\n      resetForm();\n      toast({\n        title: \"Arbeitsort erstellt\",\n        description: \"Der neue Arbeitsort wurde erfolgreich hinzugefügt.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Fehler\",\n        description: \"Beim Erstellen des Arbeitsorts ist ein Fehler aufgetreten.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: number; data: Partial<WorkLocationFormData> }) => {\n      return await apiRequest(`/api/work-locations/${id}`, \"PATCH\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/work-locations\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/work-locations/active\"] });\n      setIsEditDialogOpen(false);\n      setEditingLocation(null);\n      resetForm();\n      toast({\n        title: \"Arbeitsort aktualisiert\",\n        description: \"Der Arbeitsort wurde erfolgreich aktualisiert.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Fehler\",\n        description: \"Beim Aktualisieren des Arbeitsorts ist ein Fehler aufgetreten.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async (id: number) => {\n      return await apiRequest(`/api/work-locations/${id}`, \"DELETE\");\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/work-locations\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/work-locations/active\"] });\n      toast({\n        title: \"Arbeitsort gelöscht\",\n        description: \"Der Arbeitsort wurde erfolgreich gelöscht.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Fehler\",\n        description: \"Beim Löschen des Arbeitsorts ist ein Fehler aufgetreten.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const resetForm = () => {\n    setFormData({\n      name: \"\",\n      description: \"\",\n      building: \"\",\n      area: \"\",\n      isActive: true\n    });\n  };\n\n  const handleCreate = () => {\n    setIsCreateDialogOpen(true);\n    resetForm();\n  };\n\n  const handleEdit = (location: WorkLocation) => {\n    setEditingLocation(location);\n    setFormData({\n      name: location.name,\n      description: location.description || \"\",\n      building: location.building || \"\",\n      area: location.area || \"\",\n      isActive: location.isActive\n    });\n    setIsEditDialogOpen(true);\n  };\n\n  const handleSubmitCreate = () => {\n    if (!formData.name.trim()) {\n      toast({\n        title: \"Fehler\",\n        description: \"Name ist erforderlich.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    createMutation.mutate(formData);\n  };\n\n  const handleSubmitEdit = () => {\n    if (!editingLocation || !formData.name.trim()) {\n      toast({\n        title: \"Fehler\",\n        description: \"Name ist erforderlich.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    updateMutation.mutate({ id: editingLocation.id, data: formData });\n  };\n\n  const handleDelete = (location: WorkLocation) => {\n    if (window.confirm(`Möchten Sie den Arbeitsort \"${location.name}\" wirklich löschen?`)) {\n      deleteMutation.mutate(location.id);\n    }\n  };\n\n  const renderLocationFormFields = () => (\n    <div className=\"grid gap-4 py-4\">\n      <div className=\"grid grid-cols-4 items-center gap-4\">\n        <Label htmlFor=\"name\" className=\"text-right\">\n          Name *\n        </Label>\n        <Input\n          id=\"name\"\n          value={formData.name}\n          onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}\n          className=\"col-span-3\"\n          placeholder=\"z.B. Produktionshalle A\"\n        />\n      </div>\n      <div className=\"grid grid-cols-4 items-center gap-4\">\n        <Label htmlFor=\"building\" className=\"text-right\">\n          Gebäude\n        </Label>\n        <Input\n          id=\"building\"\n          value={formData.building}\n          onChange={(e) => setFormData(prev => ({ ...prev, building: e.target.value }))}\n          className=\"col-span-3\"\n          placeholder=\"z.B. Gebäude 1\"\n        />\n      </div>\n      <div className=\"grid grid-cols-4 items-center gap-4\">\n        <Label htmlFor=\"area\" className=\"text-right\">\n          Bereich\n        </Label>\n        <Input\n          id=\"area\"\n          value={formData.area}\n          onChange={(e) => setFormData(prev => ({ ...prev, area: e.target.value }))}\n          className=\"col-span-3\"\n          placeholder=\"z.B. Lager, Produktion\"\n        />\n      </div>\n      <div className=\"grid grid-cols-4 items-center gap-4\">\n        <Label htmlFor=\"description\" className=\"text-right\">\n          Beschreibung\n        </Label>\n        <Textarea\n          id=\"description\"\n          value={formData.description}\n          onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}\n          className=\"col-span-3\"\n          placeholder=\"Zusätzliche Informationen zum Arbeitsort\"\n        />\n      </div>\n      <div className=\"grid grid-cols-4 items-center gap-4\">\n        <Label htmlFor=\"isActive\" className=\"text-right\">\n          Aktiv\n        </Label>\n        <Switch\n          id=\"isActive\"\n          checked={formData.isActive}\n          onCheckedChange={(checked) => setFormData(prev => ({ ...prev, isActive: checked }))}\n        />\n      </div>\n    </div>\n  );\n\n  if (isLoading) {\n    return <div>Lädt Arbeitsorte...</div>;\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h3 className=\"text-lg font-medium\">Arbeitsorte verwalten</h3>\n          <p className=\"text-sm text-muted-foreground\">\n            Definieren Sie vordefinierte Arbeitsorte für die Genehmigungserstellung\n          </p>\n        </div>\n        <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n          <DialogTrigger asChild>\n            <Button onClick={handleCreate}>\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Arbeitsort hinzufügen\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"sm:max-w-[425px]\">\n            <DialogHeader>\n              <DialogTitle>Neuer Arbeitsort</DialogTitle>\n              <DialogDescription>\n                Erstellen Sie einen neuen Arbeitsort für die Genehmigungserstellung.\n              </DialogDescription>\n            </DialogHeader>\n            {renderLocationFormFields()}\n            <DialogFooter>\n              <Button type=\"submit\" onClick={handleSubmitCreate} disabled={createMutation.isPending}>\n                {createMutation.isPending ? \"Erstelle...\" : \"Erstellen\"}\n              </Button>\n            </DialogFooter>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      <div className=\"border rounded-lg\">\n        <Table>\n          <TableHeader>\n            <TableRow>\n              <TableHead>Name</TableHead>\n              <TableHead>Gebäude</TableHead>\n              <TableHead>Bereich</TableHead>\n              <TableHead>Status</TableHead>\n              <TableHead>Beschreibung</TableHead>\n              <TableHead className=\"text-right\">Aktionen</TableHead>\n            </TableRow>\n          </TableHeader>\n          <TableBody>\n            {(locations as WorkLocation[]).length === 0 ? (\n              <TableRow>\n                <TableCell colSpan={6} className=\"text-center py-8\">\n                  <div className=\"flex flex-col items-center gap-2\">\n                    <MapPin className=\"w-12 h-12 text-muted-foreground\" />\n                    <p className=\"text-muted-foreground\">Keine Arbeitsorte gefunden</p>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Fügen Sie den ersten Arbeitsort hinzu\n                    </p>\n                  </div>\n                </TableCell>\n              </TableRow>\n            ) : (\n              (locations as WorkLocation[]).map((location: WorkLocation) => (\n                <TableRow key={location.id}>\n                  <TableCell className=\"font-medium\">\n                    <div className=\"flex items-center gap-2\">\n                      <Building className=\"w-4 h-4 text-muted-foreground\" />\n                      {location.name}\n                    </div>\n                  </TableCell>\n                  <TableCell>{location.building || \"-\"}</TableCell>\n                  <TableCell>{location.area || \"-\"}</TableCell>\n                  <TableCell>\n                    <Badge variant={location.isActive ? \"default\" : \"secondary\"}>\n                      {location.isActive ? \"Aktiv\" : \"Inaktiv\"}\n                    </Badge>\n                  </TableCell>\n                  <TableCell className=\"max-w-xs truncate\">\n                    {location.description || \"-\"}\n                  </TableCell>\n                  <TableCell className=\"text-right\">\n                    <div className=\"flex justify-end gap-2\">\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => handleEdit(location)}\n                      >\n                        <Edit className=\"w-4 h-4\" />\n                      </Button>\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => handleDelete(location)}\n                        className=\"text-destructive hover:text-destructive\"\n                      >\n                        <Trash2 className=\"w-4 h-4\" />\n                      </Button>\n                    </div>\n                  </TableCell>\n                </TableRow>\n              ))\n            )}\n          </TableBody>\n        </Table>\n      </div>\n\n      <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>\n        <DialogContent className=\"sm:max-w-[425px]\">\n          <DialogHeader>\n            <DialogTitle>Arbeitsort bearbeiten</DialogTitle>\n            <DialogDescription>\n              Bearbeiten Sie die Details des Arbeitsorts.\n            </DialogDescription>\n          </DialogHeader>\n          {renderLocationFormFields()}\n          <DialogFooter>\n            <Button type=\"submit\" onClick={handleSubmitEdit} disabled={updateMutation.isPending}>\n              {updateMutation.isPending ? \"Aktualisiere...\" : \"Speichern\"}\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":12555},"client/src/components/workflow-buttons.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle } from \"@/components/ui/alert-dialog\";\nimport { Play, ArrowLeft, CheckCircle, XCircle, Pause } from \"lucide-react\";\nimport type { Permit, User } from \"@shared/schema\";\n\ninterface WorkflowButtonsProps {\n  permit: Permit;\n  currentUser: User;\n  onAction: (actionId: string, nextStatus: string) => Promise<void>;\n  isLoading?: boolean;\n  className?: string;\n}\n\nexport function WorkflowButtons({ \n  permit, \n  currentUser, \n  onAction, \n  isLoading = false, \n  className \n}: WorkflowButtonsProps) {\n\n\n  // Direkte Status-basierte Buttons ohne komplexe Konfiguration\n  const getButtonsForStatus = () => {\n    console.log('WorkflowButtons - Status:', permit.status);\n    \n    switch (permit.status) {\n      case 'draft':\n        return [\n          {\n            id: 'submit',\n            label: 'Zur Genehmigung einreichen',\n            icon: CheckCircle,\n            variant: 'default' as const,\n            nextStatus: 'pending'\n          }\n        ];\n      \n      case 'pending':\n        return [\n          {\n            id: 'approve',\n            label: 'Genehmigen',\n            icon: CheckCircle,\n            variant: 'default' as const,\n            nextStatus: 'approved'\n          },\n          {\n            id: 'reject',\n            label: 'Ablehnen',\n            icon: XCircle,\n            variant: 'destructive' as const,\n            nextStatus: 'rejected'\n          }\n        ];\n      \n      case 'approved':\n        return [\n          {\n            id: 'activate',\n            label: 'Aktivieren',\n            icon: Play,\n            variant: 'default' as const,\n            nextStatus: 'active'\n          },\n          {\n            id: 'withdraw',\n            label: 'Zurückziehen',\n            icon: ArrowLeft,\n            variant: 'outline' as const,\n            nextStatus: 'draft'\n          }\n        ];\n      \n      case 'active':\n        return [\n          {\n            id: 'complete',\n            label: 'Abschließen',\n            icon: CheckCircle,\n            variant: 'default' as const,\n            nextStatus: 'completed'\n          },\n          {\n            id: 'suspend',\n            label: 'Pausieren',\n            icon: Pause,\n            variant: 'outline' as const,\n            nextStatus: 'suspended'\n          }\n        ];\n      \n      case 'rejected':\n        return [\n          {\n            id: 'withdraw',\n            label: 'Zur Überarbeitung',\n            icon: ArrowLeft,\n            variant: 'outline' as const,\n            nextStatus: 'draft'\n          }\n        ];\n      \n      case 'suspended':\n        return [\n          {\n            id: 'activate',\n            label: 'Fortsetzen',\n            icon: Play,\n            variant: 'default' as const,\n            nextStatus: 'active'\n          },\n          {\n            id: 'withdraw',\n            label: 'Zurück zu Entwurf',\n            icon: ArrowLeft,\n            variant: 'outline' as const,\n            nextStatus: 'draft'\n          }\n        ];\n\n      case 'completed':\n        return [\n          {\n            id: 'withdraw',\n            label: 'Zurück zu Entwurf',\n            icon: ArrowLeft,\n            variant: 'outline' as const,\n            nextStatus: 'draft'\n          }\n        ];\n      \n      default:\n        console.log('WorkflowButtons: No actions available for status:', permit.status);\n        return [];\n    }\n  };\n\n  const handleAction = async (action: any) => {\n    console.log('WorkflowButtons: Executing action:', action);\n    console.log('WorkflowButtons: Permit ID:', permit.id);\n    console.log('WorkflowButtons: Current status:', permit.status);\n    console.log('WorkflowButtons: Next status:', action.nextStatus);\n    try {\n      await onAction(action.id, action.nextStatus);\n      console.log('WorkflowButtons: Action completed successfully');\n      setConfirmAction(null);\n    } catch (error) {\n      console.error('WorkflowButtons: Action failed:', error);\n    }\n  };\n\n  const executeAction = async (action: any) => {\n    console.log('WorkflowButtons: executeAction called with:', action);\n    // Execute all actions directly\n    await handleAction(action);\n  };\n\n  const availableButtons = getButtonsForStatus();\n  console.log('Available buttons:', availableButtons);\n\n  if (availableButtons.length === 0) {\n    return null;\n  }\n\n  return (\n    <div className={`flex flex-wrap gap-2 ${className}`}>\n      {availableButtons.map((action) => {\n        const Icon = action.icon;\n        return (\n          <Button\n            key={action.id}\n            variant={action.variant}\n            onClick={() => executeAction(action)}\n            disabled={isLoading}\n            className=\"flex items-center gap-2\"\n          >\n            <Icon className=\"w-4 h-4\" />\n            {action.label}\n          </Button>\n        );\n      })}\n\n\n    </div>\n  );\n}","size_bytes":5020},"client/src/components/workflow-visualization.tsx":{"content":"import { CheckCircle } from \"lucide-react\";\nimport { WORKFLOW_STEPS } from \"@/lib/workflow-config\";\n\ninterface WorkflowVisualizationProps {\n  currentStatus: string;\n  className?: string;\n}\n\nexport function WorkflowVisualization({ currentStatus, className }: WorkflowVisualizationProps) {\n  const getStepState = (stepStatus: string) => {\n    const currentIndex = WORKFLOW_STEPS.findIndex(step => step.status === currentStatus);\n    const stepIndex = WORKFLOW_STEPS.findIndex(step => step.status === stepStatus);\n    \n    if (stepIndex < currentIndex) {\n      return 'completed';\n    } else if (stepIndex === currentIndex) {\n      return 'current';\n    } else {\n      return 'pending';\n    }\n  };\n\n  return (\n    <div className={`w-full ${className}`}>\n      <h4 className=\"font-medium text-gray-900 mb-4\">Workflow-Fortschritt</h4>\n      \n      <div className=\"flex items-center justify-between\">\n        {WORKFLOW_STEPS.map((step, index) => {\n          const state = getStepState(step.status);\n          const Icon = step.icon;\n          \n          return (\n            <div key={step.status} className=\"flex items-center\">\n              {/* Step circle */}\n              <div className=\"flex flex-col items-center\">\n                <div\n                  className={`\n                    w-10 h-10 rounded-full flex items-center justify-center border-2 transition-colors\n                    ${state === 'completed' \n                      ? 'bg-green-500 border-green-500 text-white' \n                      : state === 'current'\n                      ? 'bg-blue-500 border-blue-500 text-white'\n                      : 'bg-gray-100 border-gray-300 text-gray-400'\n                    }\n                  `}\n                >\n                  {state === 'completed' ? (\n                    <CheckCircle className=\"h-5 w-5\" />\n                  ) : (\n                    <Icon className=\"h-5 w-5\" />\n                  )}\n                </div>\n                \n                {/* Step label */}\n                <div className=\"mt-2 text-center\">\n                  <div\n                    className={`\n                      text-xs font-medium\n                      ${state === 'completed' \n                        ? 'text-green-600' \n                        : state === 'current'\n                        ? 'text-blue-600'\n                        : 'text-gray-400'\n                      }\n                    `}\n                  >\n                    {step.label}\n                  </div>\n                </div>\n              </div>\n              \n              {/* Connector line */}\n              {index < WORKFLOW_STEPS.length - 1 && (\n                <div\n                  className={`\n                    flex-1 h-0.5 mx-2 transition-colors\n                    ${getStepState(WORKFLOW_STEPS[index + 1].status) === 'completed' || \n                      (state === 'completed' && getStepState(WORKFLOW_STEPS[index + 1].status) === 'current')\n                      ? 'bg-green-500' \n                      : 'bg-gray-300'\n                    }\n                  `}\n                />\n              )}\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n}","size_bytes":3175},"client/src/contexts/AuthContext.tsx":{"content":"import { createContext, useContext, useState, useEffect, ReactNode } from \"react\";\nimport type { User } from \"@shared/schema\";\n\ninterface AuthContextType {\n  user: User | null;\n  isLoading: boolean;\n  login: (user: User) => void;\n  logout: () => void;\n  isAuthenticated: boolean;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n}\n\ninterface AuthProviderProps {\n  children: ReactNode;\n}\n\nexport function AuthProvider({ children }: AuthProviderProps) {\n  const [user, setUser] = useState<User | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  const checkAuthStatus = async () => {\n    try {\n      const response = await fetch(\"/api/auth/user\", {\n        credentials: \"include\",\n      });\n      \n      if (response.ok) {\n        const userData = await response.json();\n        setUser(userData);\n      } else {\n        setUser(null);\n      }\n    } catch (error) {\n      console.error(\"Auth check failed:\", error);\n      setUser(null);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    checkAuthStatus();\n  }, []);\n\n  const login = (userData: User) => {\n    setUser(userData);\n  };\n\n  const logout = async () => {\n    try {\n      await fetch(\"/api/auth/logout\", {\n        method: \"POST\",\n        credentials: \"include\",\n      });\n    } catch (error) {\n      console.error(\"Logout failed:\", error);\n    } finally {\n      setUser(null);\n    }\n  };\n\n  const isAuthenticated = !!user;\n\n  return (\n    <AuthContext.Provider\n      value={{\n        user,\n        isLoading,\n        login,\n        logout,\n        isAuthenticated,\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n}","size_bytes":1857},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/permissions.ts":{"content":"import type { User, Permit } from \"@shared/schema\";\n\nexport function hasPermission(user: User, permit: Permit, requiredPermissions: string[]): boolean {\n  // If 'any' is in required permissions, always allow\n  if (requiredPermissions.includes('any')) {\n    return true;\n  }\n  \n  const userPermissions = getUserPermissions(user, permit);\n  return requiredPermissions.some(permission => userPermissions.includes(permission));\n}\n\nexport function getUserPermissions(user: User, permit: Permit): string[] {\n  const permissions: string[] = [];\n  \n  // Admin hat alle Rechte\n  if (user.role === 'admin') {\n    permissions.push('admin', 'creator', 'approver', 'supervisor', 'performer');\n    return permissions;\n  }\n  \n  // Ersteller-Rechte (basierend auf requestorName)\n  if (permit.requestorName === user.username) {\n    permissions.push('creator');\n  }\n  \n  // Genehmiger-Rechte basierend auf Rolle\n  if (user.role === 'department_head') {\n    permissions.push('approver');\n  }\n  if (user.role === 'safety_officer') {\n    permissions.push('approver');\n  }\n  if (user.role === 'maintenance') {\n    permissions.push('approver');\n  }\n  \n  // Supervisor-Rechte - Department Heads, Sicherheitsfachkräfte und Maintenance können als Supervisors agieren\n  if (user.role === 'supervisor' || user.role === 'department_head' || user.role === 'safety_officer' || user.role === 'maintenance') {\n    permissions.push('supervisor');\n  }\n  \n  // Durchführer-Rechte (basierend auf performerName)\n  if (permit.performerName === user.username) {\n    permissions.push('performer');\n  }\n  \n  // Spezifische Genehmiger-Rechte basierend auf Namen in der Genehmigung\n  if (permit.departmentHead === user.username) {\n    permissions.push('approver');\n  }\n  if (permit.safetyOfficer === user.username) {\n    permissions.push('approver');\n  }\n  if (permit.maintenanceApprover === user.username) {\n    permissions.push('approver');\n  }\n  \n  return permissions;\n}\n\nexport function canEditPermit(user: User, permit: Permit): boolean {\n  // Admin kann immer bearbeiten\n  if (user.role === 'admin') {\n    return true;\n  }\n  \n  // Nur im Draft-Status editierbar\n  if (permit.status !== 'draft') {\n    return false;\n  }\n  \n  // Ersteller kann eigene Entwürfe bearbeiten\n  return permit.requestorName === user.username;\n}\n\nexport function canApprovePermit(user: User, permit: Permit): boolean {\n  // Muss im pending Status sein\n  if (permit.status !== 'pending') {\n    return false;\n  }\n  \n  const userPermissions = getUserPermissions(user, permit);\n  return userPermissions.includes('approver') || userPermissions.includes('admin');\n}\n\nexport function isAllApprovalReceived(permit: Permit): boolean {\n  // Prüfe ob alle erforderlichen Genehmigungen vorliegen\n  let requiredApprovals = 0;\n  let receivedApprovals = 0;\n  \n  // Abteilungsleiter (immer erforderlich)\n  if (permit.departmentHead) {\n    requiredApprovals++;\n    if (permit.departmentHeadApproval) {\n      receivedApprovals++;\n    }\n  }\n  \n  // Instandhaltung/Engineering (immer erforderlich)\n  if (permit.maintenanceApprover) {\n    requiredApprovals++;\n    if (permit.maintenanceApproval) {\n      receivedApprovals++;\n    }\n  }\n  \n  // Sicherheitsfachkraft (optional, aber wenn gesetzt dann erforderlich)\n  if (permit.safetyOfficer) {\n    requiredApprovals++;\n    if (permit.safetyOfficerApproval) {\n      receivedApprovals++;\n    }\n  }\n  \n  return requiredApprovals > 0 && receivedApprovals === requiredApprovals;\n}","size_bytes":3443},"client/src/lib/print-utils.ts":{"content":"import type { Permit } from \"@shared/schema\";\n\nexport function printPermit(permit: Permit) {\n  const getPermitTypeLabel = (type: string) => {\n    const typeMap: Record<string, string> = {\n      'confined_space': 'Enger Raum',\n      'hot_work': 'Heißarbeiten',\n      'electrical': 'Elektrische Arbeiten',\n      'chemical': 'Chemische Arbeiten',\n      'height': 'Höhenarbeiten',\n      'general_permit': 'Allgemeiner Erlaubnisschein',\n    };\n    return typeMap[type] || type;\n  };\n\n  const getHazardDetails = (hazardId: string) => {\n    const categories = [\n      { id: 1, category: \"Mechanische Gefährdungen\", hazards: [\"Quetschung durch bewegte Teile\", \"Schneiden an scharfen Kanten\", \"Stoß durch herunterfallende Gegenstände\", \"Sturz durch ungesicherte Öffnungen\"] },\n      { id: 2, category: \"Elektrische Gefährdungen\", hazards: [\"Stromschlag durch defekte Geräte\", \"Lichtbogen bei Schalthandlungen\", \"Statische Entladung\", \"Induktive Kopplung\"] },\n      { id: 3, category: \"Gefahrstoffe\", hazards: [\"Hautkontakt mit Gefahrstoffen\", \"Einatmen von Gefahrstoffen\", \"Verschlucken von Gefahrstoffen\", \"Hautkontakt mit unter Druck stehenden Flüssigkeiten\"] },\n      { id: 4, category: \"Biologische Arbeitsstoffe\", hazards: [\"Infektionsgefährdung\", \"sensibilisierende Wirkung\", \"toxische Wirkung\"] },\n      { id: 5, category: \"Brand- und Explosionsgefährdungen\", hazards: [\"brennbare Feststoffe, Flüssigkeiten, Gase\", \"explosionsfähige Atmosphäre\", \"Explosivstoffe\"] },\n      { id: 6, category: \"Thermische Gefährdungen\", hazards: [\"heiße Medien/Oberflächen\", \"kalte Medien/Oberflächen\", \"Brand, Explosion\"] },\n      { id: 7, category: \"Gefährdungen durch spezielle physikalische Einwirkungen\", hazards: [\"Lärm\", \"Ultraschall, Infraschall\", \"Ganzkörpervibrationen\", \"Hand-Arm-Vibrationen\", \"optische Strahlung\", \"ionisierende Strahlung\", \"elektromagnetische Felder\", \"Unter- oder Überdruck\"] },\n      { id: 8, category: \"Gefährdungen durch Arbeitsumgebungsbedingungen\", hazards: [\"Klima (Hitze, Kälte)\", \"unzureichende Beleuchtung\", \"Lärm\", \"unzureichende Verkehrswege\", \"Sturz, Ausgleiten\", \"unzureichende Flucht- und Rettungswege\"] },\n      { id: 9, category: \"Physische Belastung/Arbeitsschwere\", hazards: [\"schwere dynamische Arbeit\", \"einseitige dynamische Arbeit\", \"Haltungsarbeit/Zwangshaltungen\", \"Fortbewegung/ungünstige Körperhaltung\", \"Kombination körperlicher Belastungsfaktoren\"] },\n      { id: 10, category: \"Psychische Faktoren\", hazards: [\"unzureichend gestaltete Arbeitsaufgabe\", \"unzureichend gestaltete Arbeitsorganisation\", \"unzureichend gestaltete soziale Bedingungen\", \"unzureichend gestaltete Arbeitsplatz- und Arbeitsumgebungsfaktoren\"] },\n      { id: 11, category: \"Sonstige Gefährdungen\", hazards: [\"durch Menschen (körperliche Gewalt)\", \"durch Tiere\", \"durch Pflanzen und pflanzliche Produkte\", \"Absturz in/durch Behälter, Becken, Gruben\"] }\n    ];\n    \n    const [categoryId, hazardIndex] = hazardId.split('-').map(Number);\n    const category = categories.find(c => c.id === categoryId);\n    const hazard = category?.hazards[hazardIndex];\n    \n    return { category: category?.category || '', hazard: hazard || '' };\n  };\n\n  const printContent = `\n    <html>\n      <head>\n        <title>Arbeitserlaubnis ${permit.permitId}</title>\n        <style>\n          @page { \n            size: A4; \n            margin: 2cm; \n          }\n          body { \n            font-family: Arial, sans-serif; \n            font-size: 12px; \n            line-height: 1.4; \n            color: #000; \n          }\n          .header { \n            text-align: center; \n            margin-bottom: 30px; \n            border-bottom: 2px solid #000; \n            padding-bottom: 20px; \n          }\n          .section { \n            margin-bottom: 20px; \n          }\n          .section-title { \n            font-weight: bold; \n            font-size: 14px; \n            margin-bottom: 10px; \n            border-bottom: 1px solid #ccc; \n            padding-bottom: 5px; \n          }\n          .field-row { \n            display: flex; \n            margin-bottom: 8px; \n          }\n          .field-label { \n            font-weight: bold; \n            width: 180px; \n            flex-shrink: 0; \n          }\n          .field-value { \n            flex: 1; \n          }\n          .status { \n            text-transform: uppercase; \n            font-weight: bold; \n          }\n          .signatures { \n            margin-top: 40px; \n            display: grid; \n            grid-template-columns: 1fr 1fr 1fr; \n            gap: 30px; \n          }\n          .signature-box { \n            border-top: 1px solid #000; \n            padding-top: 10px; \n            text-align: center; \n          }\n          .signature-image {\n            max-width: 200px;\n            max-height: 80px;\n            border-bottom: 1px solid #000;\n            display: block;\n            margin: 0 auto;\n          }\n          .signature-placeholder {\n            border-top: 1px solid #000;\n            width: 200px;\n            padding-top: 10px;\n            margin: 0 auto;\n          }\n        </style>\n      </head>\n      <body>\n        <div class=\"header\">\n          <h1>ARBEITSERLAUBNIS</h1>\n          <h2>Genehmigung Nr. ${permit.permitId}</h2>\n        </div>\n\n        <div class=\"section\">\n          <div class=\"section-title\">GRUNDINFORMATIONEN</div>\n          <div class=\"field-row\">\n            <div class=\"field-label\">Genehmigungstyp:</div>\n            <div class=\"field-value\">${getPermitTypeLabel(permit.type)}</div>\n          </div>\n          <div class=\"field-row\">\n            <div class=\"field-label\">Arbeitsort:</div>\n            <div class=\"field-value\">${permit.location}</div>\n          </div>\n          <div class=\"field-row\">\n            <div class=\"field-label\">Beschreibung:</div>\n            <div class=\"field-value\">${permit.description}</div>\n          </div>\n          <div class=\"field-row\">\n            <div class=\"field-label\">Antragsteller:</div>\n            <div class=\"field-value\">${permit.requestorName}</div>\n          </div>\n          <div class=\"field-row\">\n            <div class=\"field-label\">Abteilung:</div>\n            <div class=\"field-value\">${permit.department}</div>\n          </div>\n          <div class=\"field-row\">\n            <div class=\"field-label\">Kontakt:</div>\n            <div class=\"field-value\">${permit.contactNumber}</div>\n          </div>\n          <div class=\"field-row\">\n            <div class=\"field-label\">Notfallkontakt:</div>\n            <div class=\"field-value\">${permit.emergencyContact}</div>\n          </div>\n        </div>\n\n        <div class=\"section\">\n          <div class=\"section-title\">ZEITRAUM UND STATUS</div>\n          <div class=\"field-row\">\n            <div class=\"field-label\">Startdatum:</div>\n            <div class=\"field-value\">${permit.startDate ? new Date(permit.startDate).toLocaleDateString('de-DE', { year: 'numeric', month: 'long', day: 'numeric', hour: '2-digit', minute: '2-digit' }) : 'Nicht angegeben'}</div>\n          </div>\n          <div class=\"field-row\">\n            <div class=\"field-label\">Enddatum:</div>\n            <div class=\"field-value\">${permit.endDate ? new Date(permit.endDate).toLocaleDateString('de-DE', { year: 'numeric', month: 'long', day: 'numeric', hour: '2-digit', minute: '2-digit' }) : 'Nicht angegeben'}</div>\n          </div>\n          <div class=\"field-row\">\n            <div class=\"field-label\">Status:</div>\n            <div class=\"field-value status\">${permit.status}</div>\n          </div>\n          <div class=\"field-row\">\n            <div class=\"field-label\">Risikostufe:</div>\n            <div class=\"field-value\">${permit.riskLevel || 'Nicht angegeben'}</div>\n          </div>\n        </div>\n\n        ${permit.selectedHazards && permit.selectedHazards.length > 0 ? `\n        <div class=\"section\">\n          <div class=\"section-title\">TRBS GEFÄHRDUNGSBEURTEILUNG</div>\n          ${permit.selectedHazards.map(hazardId => {\n            const details = getHazardDetails(hazardId);\n            return `<div class=\"field-row\">\n              <div class=\"field-label\">${details.category}:</div>\n              <div class=\"field-value\">${details.hazard}</div>\n            </div>`;\n          }).join('')}\n          \n          ${permit?.hazardNotes && permit.hazardNotes !== '{}' ? `\n          <div class=\"subsection\">\n            <div class=\"subsection-title\">Zusätzliche Notizen:</div>\n            ${Object.entries(JSON.parse(permit.hazardNotes || '{}')).map(([hazardId, note]) => {\n              const details = getHazardDetails(hazardId);\n              return note ? `<div class=\"field-row\">\n                <div class=\"field-label\">${details.hazard}:</div>\n                <div class=\"field-value\">${note}</div>\n              </div>` : '';\n            }).join('')}\n          </div>` : ''}\n        </div>` : ''}\n\n        <div class=\"section\">\n          <div class=\"section-title\">IDENTIFIZIERTE GEFAHREN</div>\n          <div class=\"field-value\">${permit.identifiedHazards || 'Keine spezifischen Gefahren identifiziert'}</div>\n        </div>\n\n        ${permit.additionalComments ? `\n        <div class=\"section\">\n          <div class=\"section-title\">ZUSÄTZLICHE KOMMENTARE</div>\n          <div class=\"field-value\">${permit.additionalComments}</div>\n        </div>` : ''}\n\n        <div class=\"signatures\">\n          <div class=\"signature-box\">\n            <div>Vorgesetzter</div>\n            <div style=\"margin-top: 20px; font-size: 10px;\">\n              ${permit.departmentHeadApproval ? `Genehmigt: ${permit.departmentHeadApprovalDate ? new Date(permit.departmentHeadApprovalDate).toLocaleDateString('de-DE') : ''}` : 'Ausstehend'}\n            </div>\n          </div>\n          <div class=\"signature-box\">\n            <div>Sicherheitsfachkraft</div>\n            <div style=\"margin-top: 20px; font-size: 10px;\">\n              ${permit.safetyOfficerApproval ? `Genehmigt: ${permit.safetyOfficerApprovalDate ? new Date(permit.safetyOfficerApprovalDate).toLocaleDateString('de-DE') : ''}` : 'Ausstehend'}\n            </div>\n          </div>\n          <div class=\"signature-box\">\n            <div>Betriebsleiter</div>\n            <div style=\"margin-top: 20px; font-size: 10px;\">\n              ${permit.maintenanceApproval ? `Genehmigt: ${permit.maintenanceApprovalDate ? new Date(permit.maintenanceApprovalDate).toLocaleDateString('de-DE') : ''}` : 'Ausstehend'}\n            </div>\n          </div>\n        </div>\n        \n        ${permit.performerName ? `\n        <div class=\"section\" style=\"margin-top: 40px;\">\n          <div class=\"section-title\">DURCHFÜHRER</div>\n          <div class=\"field-row\">\n            <div class=\"field-label\">Name des Durchführers:</div>\n            <div class=\"field-value\">${permit.performerName}</div>\n          </div>\n          ${permit.workStartedAt ? `\n          <div class=\"field-row\">\n            <div class=\"field-label\">Arbeit begonnen:</div>\n            <div class=\"field-value\">${new Date(permit.workStartedAt).toLocaleDateString('de-DE', { year: 'numeric', month: 'long', day: 'numeric', hour: '2-digit', minute: '2-digit' })}</div>\n          </div>` : ''}\n          ${permit.workCompletedAt ? `\n          <div class=\"field-row\">\n            <div class=\"field-label\">Arbeit abgeschlossen:</div>\n            <div class=\"field-value\">${new Date(permit.workCompletedAt).toLocaleDateString('de-DE', { year: 'numeric', month: 'long', day: 'numeric', hour: '2-digit', minute: '2-digit' })}</div>\n          </div>` : ''}\n          <div style=\"margin-top: 30px; text-align: center;\">\n            ${permit.performerSignature ? \n              `<img src=\"${permit.performerSignature}\" class=\"signature-image\" alt=\"Unterschrift Durchführer\" />` : \n              '<div class=\"signature-placeholder\">Unterschrift Durchführer</div>'\n            }\n          </div>\n        </div>` : ''}\n\n        <div style=\"margin-top: 40px; text-align: center; font-size: 10px; color: #666;\">\n          Erstellt am: ${permit.createdAt ? new Date(permit.createdAt).toLocaleDateString('de-DE') : ''} | \n          Letzte Aktualisierung: ${permit.updatedAt ? new Date(permit.updatedAt).toLocaleDateString('de-DE') : ''}\n        </div>\n      </body>\n    </html>\n  `;\n\n  const printWindow = window.open('', '_blank');\n  if (printWindow) {\n    printWindow.document.write(printContent);\n    printWindow.document.close();\n    printWindow.focus();\n    \n    // Wait for images to load before printing\n    setTimeout(() => {\n      printWindow.print();\n      printWindow.close();\n    }, 1000);\n  } else {\n    alert('Pop-up blockiert. Bitte erlauben Sie Pop-ups für diese Seite, um zu drucken.');\n  }\n}","size_bytes":12625},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  url: string,\n  method: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey[0] as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1376},"client/src/lib/types.ts":{"content":"export interface PermitStats {\n  activePermits: number;\n  pendingApproval: number;\n  expiredToday: number;\n  completed: number;\n}\n\nexport interface CreatePermitFormData {\n  type: string;\n  location: string;\n  description: string;\n  requestorName: string;\n  department: string;\n  contactNumber: string;\n  emergencyContact: string;\n  startDate: string;\n  endDate: string;\n  riskLevel?: string;\n  safetyOfficer?: string;\n  departmentHead: string;\n  maintenanceApprover: string;\n  identifiedHazards?: string;\n  additionalComments?: string;\n  selectedHazards?: string[];\n  hazardNotes?: string;\n  completedMeasures?: string[];\n}\n\nexport interface HazardCategory {\n  id: number;\n  category: string;\n  hazards: Hazard[];\n}\n\nexport interface Hazard {\n  hazard: string;\n  protectiveMeasures: string;\n}\n\nexport interface HazardNote {\n  [hazardId: string]: string;\n}\n","size_bytes":856},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/lib/workflow-config.ts":{"content":"import { Send, ArrowLeft, CheckCircle, Play, CheckCircle2, Clock, FileText, AlertTriangle } from \"lucide-react\";\nimport type { LucideIcon } from \"lucide-react\";\n\nexport interface WorkflowAction {\n  id: string;\n  label: string;\n  icon: LucideIcon;\n  variant: 'default' | 'destructive' | 'outline' | 'secondary';\n  nextStatus: string;\n  requiresConfirmation?: boolean;\n  confirmationMessage?: string;\n  permissions: string[];\n}\n\nexport interface WorkflowState {\n  status: string;\n  label: string;\n  color: string;\n  bgColor: string;\n  textColor: string;\n  isEditable: boolean;\n  availableActions: WorkflowAction[];\n  description: string;\n}\n\nexport const WORKFLOW_CONFIG: Record<string, WorkflowState> = {\n  draft: {\n    status: 'draft',\n    label: 'Entwurf',\n    color: 'gray',\n    bgColor: 'bg-gray-100',\n    textColor: 'text-gray-800',\n    isEditable: true,\n    description: 'Genehmigung wird bearbeitet und kann geändert werden',\n    availableActions: [\n      {\n        id: 'submit',\n        label: 'Zur Genehmigung einreichen',\n        icon: Send,\n        variant: 'default',\n        nextStatus: 'pending',\n        requiresConfirmation: true,\n        confirmationMessage: 'Möchten Sie diese Genehmigung zur Prüfung einreichen? Nach dem Einreichen können keine Änderungen mehr vorgenommen werden.',\n        permissions: ['creator', 'admin']\n      }\n    ]\n  },\n  pending: {\n    status: 'pending',\n    label: 'Ausstehend',\n    color: 'orange',\n    bgColor: 'bg-orange-100',\n    textColor: 'text-orange-800',\n    isEditable: false,\n    description: 'Genehmigung wartet auf Freigabe durch die zuständigen Stellen',\n    availableActions: [\n      {\n        id: 'withdraw',\n        label: 'Zurückziehen',\n        icon: ArrowLeft,\n        variant: 'outline',\n        nextStatus: 'draft',\n        requiresConfirmation: true,\n        confirmationMessage: 'Möchten Sie diese Genehmigung zurückziehen? Sie wird wieder als Entwurf gespeichert und kann bearbeitet werden.',\n        permissions: ['creator', 'admin']\n      },\n      {\n        id: 'approve',\n        label: 'Genehmigen',\n        icon: CheckCircle,\n        variant: 'default',\n        nextStatus: 'approved',\n        requiresConfirmation: true,\n        confirmationMessage: 'Möchten Sie diese Genehmigung freigeben?',\n        permissions: ['approver', 'admin']\n      }\n    ]\n  },\n  approved: {\n    status: 'approved',\n    label: 'Genehmigt',\n    color: 'green',\n    bgColor: 'bg-green-100',\n    textColor: 'text-green-800',\n    isEditable: false,\n    description: 'Genehmigung wurde freigegeben und kann aktiviert werden',\n    availableActions: [\n      {\n        id: 'withdraw',\n        label: 'Zurück zu Entwurf',\n        icon: ArrowLeft,\n        variant: 'outline',\n        nextStatus: 'draft',\n        requiresConfirmation: true,\n        confirmationMessage: 'Möchten Sie diese Genehmigung zurückziehen? Alle Freigaben werden zurückgesetzt und sie wird wieder als Entwurf gespeichert.',\n        permissions: ['any']\n      },\n      {\n        id: 'activate',\n        label: 'Aktivieren',\n        icon: Play,\n        variant: 'default',\n        nextStatus: 'active',\n        requiresConfirmation: true,\n        confirmationMessage: 'Möchten Sie diese Genehmigung aktivieren? Die Arbeiten können dann beginnen.',\n        permissions: ['any']\n      }\n    ]\n  },\n  active: {\n    status: 'active',\n    label: 'Aktiv',\n    color: 'blue',\n    bgColor: 'bg-blue-100',\n    textColor: 'text-blue-800',\n    isEditable: false,\n    description: 'Genehmigung ist aktiv - Arbeiten können durchgeführt werden',\n    availableActions: [\n      {\n        id: 'complete',\n        label: 'Genehmigung abschließen',\n        icon: CheckCircle2,\n        variant: 'default',\n        nextStatus: 'completed',\n        requiresConfirmation: true,\n        confirmationMessage: 'Möchten Sie diese Genehmigung als abgeschlossen markieren?',\n        permissions: ['supervisor', 'performer', 'admin']\n      },\n      {\n        id: 'withdraw',\n        label: 'Zurück zu Entwurf',\n        icon: ArrowLeft,\n        variant: 'outline',\n        nextStatus: 'draft',\n        requiresConfirmation: true,\n        confirmationMessage: 'Möchten Sie diese Genehmigung zurückziehen? Alle Freigaben werden zurückgesetzt.',\n        permissions: ['admin']\n      }\n    ]\n  },\n  completed: {\n    status: 'completed',\n    label: 'Abgeschlossen',\n    color: 'green',\n    bgColor: 'bg-green-100',\n    textColor: 'text-green-800',\n    isEditable: false,\n    description: 'Genehmigung wurde erfolgreich abgeschlossen',\n    availableActions: [\n      {\n        id: 'withdraw',\n        label: 'Zurück zu Entwurf',\n        icon: ArrowLeft,\n        variant: 'outline',\n        nextStatus: 'draft',\n        requiresConfirmation: true,\n        confirmationMessage: 'Möchten Sie diese abgeschlossene Genehmigung wieder öffnen? Alle Freigaben werden zurückgesetzt.',\n        permissions: ['admin']\n      }\n    ]\n  },\n  expired: {\n    status: 'expired',\n    label: 'Abgelaufen',\n    color: 'red',\n    bgColor: 'bg-red-100',\n    textColor: 'text-red-800',\n    isEditable: false,\n    description: 'Genehmigung ist abgelaufen',\n    availableActions: []\n  },\n  rejected: {\n    status: 'rejected',\n    label: 'Abgelehnt',\n    color: 'red',\n    bgColor: 'bg-red-100',\n    textColor: 'text-red-800',\n    isEditable: false,\n    description: 'Genehmigung wurde abgelehnt',\n    availableActions: [\n      {\n        id: 'withdraw',\n        label: 'Zur Überarbeitung',\n        icon: ArrowLeft,\n        variant: 'outline',\n        nextStatus: 'draft',\n        permissions: ['creator', 'admin']\n      }\n    ]\n  }\n};\n\nexport const WORKFLOW_STEPS = [\n  { status: 'draft', label: 'Entwurf', icon: FileText },\n  { status: 'pending', label: 'Ausstehend', icon: Clock },\n  { status: 'approved', label: 'Genehmigt', icon: CheckCircle },\n  { status: 'active', label: 'Aktiv', icon: Play },\n  { status: 'completed', label: 'Abgeschlossen', icon: CheckCircle2 }\n];","size_bytes":5952},"client/src/pages/approvals.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { NavigationHeader } from \"@/components/navigation-header\";\nimport { \n  CheckCircle, \n  Clock, \n  FileText, \n  AlertTriangle,\n  User,\n  Calendar,\n  Circle,\n  MapPin,\n  Building,\n  Phone,\n  Shield,\n  Eye,\n  ArrowLeft,\n  Home\n} from \"lucide-react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { format } from \"date-fns\";\nimport { de } from \"date-fns/locale\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Link } from \"wouter\";\nimport type { Permit } from \"@shared/schema\";\n\nexport default function Approvals() {\n  const { toast } = useToast();\n  const [activeTab, setActiveTab] = useState(\"pending\");\n  const [viewingPermit, setViewingPermit] = useState<Permit | null>(null);\n  const [viewModalOpen, setViewModalOpen] = useState(false);\n\n  const { data: permits = [], isLoading } = useQuery<Permit[]>({\n    queryKey: [\"/api/permits\"],\n  });\n\n  const { data: currentUser } = useQuery<{ role: string; fullName: string; username: string }>({\n    queryKey: [\"/api/auth/user\"],\n  });\n\n  const approvePermitMutation = useMutation({\n    mutationFn: async ({ permitId, approvalType }: { permitId: number; approvalType: 'department_head' | 'maintenance' | 'safety_officer' }) => {\n      const response = await fetch(`/api/permits/${permitId}/approve`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ approvalType }),\n      });\n      \n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      \n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/permits\"] });\n      toast({\n        title: \"Genehmigung erteilt\",\n        description: \"Die Arbeitserlaubnis wurde erfolgreich genehmigt.\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Fehler\",\n        description: \"Die Genehmigung konnte nicht erteilt werden.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const rejectPermitMutation = useMutation({\n    mutationFn: async ({ permitId, reason }: { permitId: number; reason: string }) => {\n      const response = await fetch(`/api/permits/${permitId}/reject`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ reason }),\n      });\n      \n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      \n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/permits\"] });\n      toast({\n        title: \"Genehmigung abgelehnt\",\n        description: \"Die Arbeitserlaubnis wurde abgelehnt.\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Fehler\",\n        description: \"Die Ablehnung konnte nicht verarbeitet werden.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Filter permits based on specific user assignment and role\n  const getPendingPermits = () => {\n    if (!currentUser) return [];\n    \n    return permits.filter((permit: Permit) => {\n      if (permit.status !== 'pending') return false;\n      \n      // Check if current user is specifically assigned to this permit\n      const isAssignedDepartmentHead = permit.departmentHead === currentUser.fullName && !permit.departmentHeadApproval;\n      const isAssignedSafetyOfficer = permit.safetyOfficer === currentUser.fullName && !permit.safetyOfficerApproval;\n      const isAssignedMaintenanceApprover = permit.maintenanceApprover === currentUser.fullName && !permit.maintenanceApproval;\n      \n      // Check role-based approval rights when not specifically assigned\n      const canApproveDepartmentByRole = currentUser.role === 'department_head' && !permit.departmentHeadApproval;\n      const canApproveMaintenanceByRole = currentUser.role === 'maintenance' && !permit.maintenanceApproval;\n      const canApproveSafetyByRole = currentUser.role === 'safety_officer' && permit.safetyOfficer && !permit.safetyOfficerApproval;\n      \n      // Admin can see all pending approvals\n      const isAdminPending = currentUser.role === 'admin' && (\n        !permit.departmentHeadApproval || \n        !permit.maintenanceApproval || \n        (permit.safetyOfficer && !permit.safetyOfficerApproval)\n      );\n      \n      return isAssignedDepartmentHead || isAssignedSafetyOfficer || isAssignedMaintenanceApprover || \n             canApproveDepartmentByRole || canApproveMaintenanceByRole || canApproveSafetyByRole || \n             isAdminPending;\n    });\n  };\n\n  const getApprovedPermits = () => {\n    return permits.filter((permit: Permit) => permit.status === 'approved');\n  };\n\n  const getMyApprovals = () => {\n    if (!currentUser) return [];\n    \n    return permits.filter((permit: Permit) => {\n      // Check if current user specifically approved this permit\n      const approvedAsDepartmentHead = permit.departmentHead === currentUser.username && permit.departmentHeadApproval;\n      const approvedAsSafetyOfficer = permit.safetyOfficer === currentUser.username && permit.safetyOfficerApproval;\n      const approvedAsMaintenanceApprover = permit.maintenanceApprover === currentUser.username && permit.maintenanceApproval;\n      \n      // Admin can see all approved permits\n      const isAdminApproved = currentUser.role === 'admin' && (\n        permit.departmentHeadApproval || \n        permit.maintenanceApproval || \n        permit.safetyOfficerApproval\n      );\n      \n      return approvedAsDepartmentHead || approvedAsSafetyOfficer || approvedAsMaintenanceApprover || isAdminApproved;\n    });\n  };\n\n  const handleView = (permit: Permit) => {\n    setViewingPermit(permit);\n    setViewModalOpen(true);\n  };\n\n  const handleApprove = (permit: Permit) => {\n    let approvalType: 'department_head' | 'maintenance' | 'safety_officer';\n    \n    if (currentUser?.role === 'department_head' || currentUser?.role === 'admin') {\n      approvalType = 'department_head';\n    } else if (currentUser?.role === 'maintenance') {\n      approvalType = 'maintenance';\n    } else if (currentUser?.role === 'safety_officer') {\n      approvalType = 'safety_officer';\n    } else {\n      return;\n    }\n    \n    approvePermitMutation.mutate({ permitId: permit.id, approvalType });\n  };\n\n  const handleReject = (permit: Permit) => {\n    const reason = prompt(\"Grund für die Ablehnung:\");\n    if (reason) {\n      rejectPermitMutation.mutate({ permitId: permit.id, reason });\n    }\n  };\n\n  const PermitCard = ({ permit }: { permit: Permit }) => (\n    <Card className=\"mb-4\">\n      <CardHeader>\n        <div className=\"flex justify-between items-start\">\n          <div>\n            <CardTitle className=\"text-lg text-industrial-gray\">{permit.permitId}</CardTitle>\n            <p className=\"text-sm text-secondary-gray mt-1\">{permit.type}</p>\n          </div>\n          <div className=\"flex gap-2\">\n            <Badge variant={permit.status === 'pending' ? 'destructive' : 'default'}>\n              {permit.status === 'pending' ? 'Ausstehend' : 'Genehmigt'}\n            </Badge>\n          </div>\n        </div>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4 text-sm\">\n          <div className=\"flex items-center gap-2\">\n            <MapPin className=\"h-4 w-4 text-secondary-gray\" />\n            <span className=\"break-all\">{permit.location}</span>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <User className=\"h-4 w-4 text-secondary-gray\" />\n            <span className=\"break-all\">{permit.requestorName}</span>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <Building className=\"h-4 w-4 text-secondary-gray\" />\n            <span className=\"break-all\">{permit.department}</span>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <Calendar className=\"h-4 w-4 text-secondary-gray\" />\n            <span className=\"break-all\">\n              {permit.startDate ? format(new Date(permit.startDate), \"dd.MM.yyyy\", { locale: de }) : 'N/A'} - \n              {permit.endDate ? format(new Date(permit.endDate), \"dd.MM.yyyy\", { locale: de }) : 'N/A'}\n            </span>\n          </div>\n        </div>\n\n        <Separator />\n\n        <div className=\"text-sm\">\n          <p className=\"font-medium text-industrial-gray mb-2\">Beschreibung:</p>\n          <p className=\"text-secondary-gray\">{permit.description}</p>\n        </div>\n\n        {permit.riskLevel && (\n          <div className=\"flex items-center gap-2\">\n            <AlertTriangle className=\"h-4 w-4 text-warning-orange\" />\n            <span className=\"text-sm\">Risikostufe: {permit.riskLevel}</span>\n          </div>\n        )}\n\n        <Separator />\n\n        <div className=\"space-y-2\">\n          <p className=\"font-medium text-industrial-gray text-sm\">Genehmigungs-Status:</p>\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-2\">\n            <div className={`flex items-center gap-2 p-2 rounded ${permit.departmentHeadApproval ? 'bg-green-50' : 'bg-orange-50'}`}>\n              {permit.departmentHeadApproval ? (\n                <CheckCircle className=\"h-4 w-4 text-green-600\" />\n              ) : (\n                <Clock className=\"h-4 w-4 text-orange-600\" />\n              )}\n              <span className=\"text-sm\">\n                Abteilungsleiter: {permit.departmentHeadApproval ? 'Genehmigt' : 'Ausstehend'}\n              </span>\n            </div>\n            <div className={`flex items-center gap-2 p-2 rounded ${permit.maintenanceApproval ? 'bg-green-50' : 'bg-orange-50'}`}>\n              {permit.maintenanceApproval ? (\n                <CheckCircle className=\"h-4 w-4 text-green-600\" />\n              ) : (\n                <Clock className=\"h-4 w-4 text-orange-600\" />\n              )}\n              <span className=\"text-sm\">\n                Instandhaltung/Engineering: {permit.maintenanceApproval ? 'Genehmigt' : 'Ausstehend'}\n              </span>\n            </div>\n            {permit.safetyOfficer && (\n              <div className={`flex items-center gap-2 p-2 rounded ${permit.safetyOfficerApproval ? 'bg-green-50' : 'bg-orange-50'}`}>\n                {permit.safetyOfficerApproval ? (\n                  <CheckCircle className=\"h-4 w-4 text-green-600\" />\n                ) : (\n                  <Clock className=\"h-4 w-4 text-orange-600\" />\n                )}\n                <span className=\"text-sm\">\n                  Sicherheitsfachkraft: {permit.safetyOfficerApproval ? 'Genehmigt' : 'Ausstehend'}\n                </span>\n              </div>\n            )}\n          </div>\n        </div>\n\n        {permit.status === 'pending' && (\n          <div className=\"flex gap-2 pt-2\">\n            <Button \n              onClick={() => handleApprove(permit)}\n              className=\"bg-green-600 hover:bg-green-700 text-white\"\n              disabled={approvePermitMutation.isPending}\n            >\n              <CheckCircle className=\"w-4 h-4 mr-2\" />\n              Genehmigen\n            </Button>\n            <Button \n              variant=\"destructive\" \n              onClick={() => handleReject(permit)}\n              disabled={rejectPermitMutation.isPending}\n            >\n              Ablehnen\n            </Button>\n          </div>\n        )}\n        <div className=\"flex gap-2 pt-2\">\n          <Button \n            size=\"sm\" \n            variant=\"outline\"\n            onClick={() => handleView(permit)}\n          >\n            <Eye className=\"w-4 h-4 mr-1\" />\n            Ansehen\n          </Button>\n        </div>\n      </CardContent>\n    </Card>\n  );\n\n  if (isLoading) {\n    return (\n      <div className=\"container mx-auto p-6\">\n        <div className=\"flex items-center justify-center h-64\">\n          <div className=\"text-center\">\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-safety-blue mx-auto\"></div>\n            <p className=\"mt-2 text-secondary-gray\">Lade Genehmigungen...</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  const pendingPermits = getPendingPermits();\n  const approvedPermits = getApprovedPermits();\n  const myApprovals = getMyApprovals();\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <NavigationHeader />\n      \n      <div className=\"container mx-auto p-6\">\n        {/* Breadcrumb Navigation */}\n        <div className=\"flex items-center gap-2 mb-6\">\n          <Link href=\"/\">\n            <Button variant=\"ghost\" size=\"sm\" className=\"text-secondary-gray hover:text-industrial-gray\">\n              <Home className=\"w-4 h-4 mr-2\" />\n              Dashboard\n            </Button>\n          </Link>\n          <span className=\"text-secondary-gray\">/</span>\n          <span className=\"text-industrial-gray font-medium\">Genehmigungen</span>\n        </div>\n\n        <div className=\"flex justify-between items-center mb-6\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-industrial-gray\">Genehmigungen</h1>\n            <p className=\"text-secondary-gray mt-2\">\n              Verwalten Sie Arbeitserlaubnis-Genehmigungen\n            </p>\n          </div>\n          <Link href=\"/\">\n            <Button variant=\"outline\">\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Zurück zum Dashboard\n            </Button>\n          </Link>\n        </div>\n\n      <Alert className=\"mb-6 border-blue-200 bg-blue-50\">\n        <Shield className=\"h-4 w-4 text-safety-blue\" />\n        <AlertDescription className=\"text-industrial-gray\">\n          <strong>Genehmigungsverfahren:</strong> Jede Arbeitserlaubnis benötigt mindestens die Genehmigung eines Abteilungsleiters und der Instandhaltung/Engineering.\n        </AlertDescription>\n      </Alert>\n\n      <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-6\">\n        <TabsList className=\"grid w-full grid-cols-3\">\n          <TabsTrigger value=\"pending\" className=\"flex items-center gap-2\">\n            <Clock className=\"h-4 w-4\" />\n            Ausstehend ({pendingPermits.length})\n          </TabsTrigger>\n          <TabsTrigger value=\"approved\" className=\"flex items-center gap-2\">\n            <CheckCircle className=\"h-4 w-4\" />\n            Genehmigt ({approvedPermits.length})\n          </TabsTrigger>\n          <TabsTrigger value=\"my-approvals\" className=\"flex items-center gap-2\">\n            <User className=\"h-4 w-4\" />\n            Meine Genehmigungen ({myApprovals.length})\n          </TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"pending\">\n          <div className=\"space-y-4\">\n            {pendingPermits.length === 0 ? (\n              <Card>\n                <CardContent className=\"text-center py-8\">\n                  <Clock className=\"h-12 w-12 text-secondary-gray mx-auto mb-4\" />\n                  <p className=\"text-industrial-gray\">Keine ausstehenden Genehmigungen</p>\n                  <p className=\"text-secondary-gray text-sm\">\n                    Alle Arbeitserlaubnisse wurden bearbeitet oder Sie haben keine Genehmigungsrechte.\n                  </p>\n                </CardContent>\n              </Card>\n            ) : (\n              pendingPermits.map((permit: Permit) => (\n                <PermitCard key={permit.id} permit={permit} />\n              ))\n            )}\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"approved\">\n          <div className=\"space-y-4\">\n            {approvedPermits.length === 0 ? (\n              <Card>\n                <CardContent className=\"text-center py-8\">\n                  <CheckCircle className=\"h-12 w-12 text-secondary-gray mx-auto mb-4\" />\n                  <p className=\"text-industrial-gray\">Keine genehmigten Arbeitserlaubnisse</p>\n                  <p className=\"text-secondary-gray text-sm\">\n                    Es wurden noch keine Arbeitserlaubnisse vollständig genehmigt.\n                  </p>\n                </CardContent>\n              </Card>\n            ) : (\n              approvedPermits.map((permit: Permit) => (\n                <PermitCard key={permit.id} permit={permit} />\n              ))\n            )}\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"my-approvals\">\n          <div className=\"space-y-4\">\n            {myApprovals.length === 0 ? (\n              <Card>\n                <CardContent className=\"text-center py-8\">\n                  <User className=\"h-12 w-12 text-secondary-gray mx-auto mb-4\" />\n                  <p className=\"text-industrial-gray\">Keine Genehmigungen erteilt</p>\n                  <p className=\"text-secondary-gray text-sm\">\n                    Sie haben noch keine Arbeitserlaubnisse genehmigt.\n                  </p>\n                </CardContent>\n              </Card>\n            ) : (\n              myApprovals.map((permit: Permit) => (\n                <PermitCard key={permit.id} permit={permit} />\n              ))\n            )}\n          </div>\n        </TabsContent>\n      </Tabs>\n      </div>\n\n      {/* Permit Viewing Dialog */}\n      <Dialog open={viewModalOpen} onOpenChange={setViewModalOpen}>\n        <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle className=\"text-xl font-bold text-industrial-gray\">\n              Arbeitserlaubnis Details - {viewingPermit?.permitId}\n            </DialogTitle>\n          </DialogHeader>\n          \n          {viewingPermit && (\n            <div className=\"space-y-6\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <p className=\"text-sm font-medium text-industrial-gray\">Typ</p>\n                  <p className=\"text-secondary-gray\">{viewingPermit.type}</p>\n                </div>\n                <div>\n                  <p className=\"text-sm font-medium text-industrial-gray\">Arbeitsort</p>\n                  <p className=\"text-secondary-gray\">{viewingPermit.location}</p>\n                </div>\n                <div>\n                  <p className=\"text-sm font-medium text-industrial-gray\">Antragsteller</p>\n                  <p className=\"text-secondary-gray\">{viewingPermit.requestorName}</p>\n                </div>\n                <div>\n                  <p className=\"text-sm font-medium text-industrial-gray\">Abteilung</p>\n                  <p className=\"text-secondary-gray\">{viewingPermit.department}</p>\n                </div>\n                <div>\n                  <p className=\"text-sm font-medium text-industrial-gray\">Startdatum</p>\n                  <p className=\"text-secondary-gray\">\n                    {viewingPermit.startDate ? format(new Date(viewingPermit.startDate), \"dd.MM.yyyy\", { locale: de }) : 'N/A'}\n                  </p>\n                </div>\n                <div>\n                  <p className=\"text-sm font-medium text-industrial-gray\">Enddatum</p>\n                  <p className=\"text-secondary-gray\">\n                    {viewingPermit.endDate ? format(new Date(viewingPermit.endDate), \"dd.MM.yyyy\", { locale: de }) : 'N/A'}\n                  </p>\n                </div>\n              </div>\n              \n              <div>\n                <p className=\"text-sm font-medium text-industrial-gray mb-2\">Beschreibung</p>\n                <p className=\"text-secondary-gray\">{viewingPermit.description}</p>\n              </div>\n              \n              {viewingPermit.identifiedHazards && (\n                <div>\n                  <p className=\"text-sm font-medium text-industrial-gray mb-2\">Identifizierte Gefahren</p>\n                  <p className=\"text-secondary-gray\">{viewingPermit.identifiedHazards}</p>\n                </div>\n              )}\n\n              {/* Sicherheitsbetrachtung */}\n              <div className=\"border-t pt-4\">\n                <h3 className=\"text-lg font-semibold text-industrial-gray mb-4\">Sicherheitsbetrachtung</h3>\n                \n                {/* Risikostufe */}\n                {viewingPermit.riskLevel && (\n                  <div className=\"mb-4\">\n                    <p className=\"text-sm font-medium text-industrial-gray mb-2\">Risikostufe</p>\n                    <Badge variant={viewingPermit.riskLevel === 'high' ? 'destructive' : viewingPermit.riskLevel === 'medium' ? 'secondary' : 'default'}>\n                      {viewingPermit.riskLevel === 'high' ? 'Hoch' : viewingPermit.riskLevel === 'medium' ? 'Mittel' : 'Niedrig'}\n                    </Badge>\n                  </div>\n                )}\n\n                {/* TRBS Gefährdungsbeurteilung */}\n                {viewingPermit.selectedHazards && viewingPermit.selectedHazards.length > 0 && (\n                  <div className=\"mb-4\">\n                    <p className=\"text-sm font-medium text-industrial-gray mb-3\">TRBS Gefährdungsbeurteilung</p>\n                    <div className=\"space-y-3\">\n                      {viewingPermit.selectedHazards.map((hazardId: string) => {\n                        const categories = [\n                          { id: 1, category: \"Mechanische Gefährdungen\", hazards: [\"Quetschung durch bewegte Teile\", \"Schneiden an scharfen Kanten\", \"Stoß durch herunterfallende Gegenstände\", \"Sturz durch ungesicherte Öffnungen\"] },\n                          { id: 2, category: \"Elektrische Gefährdungen\", hazards: [\"Stromschlag durch defekte Geräte\", \"Lichtbogen bei Schalthandlungen\", \"Statische Entladung\", \"Induktive Kopplung\"] },\n                          { id: 3, category: \"Gefahrstoffe\", hazards: [\"Hautkontakt mit Gefahrstoffen\", \"Einatmen von Gefahrstoffen\", \"Verschlucken von Gefahrstoffen\", \"Hautkontakt mit unter Druck stehenden Flüssigkeiten\"] },\n                          { id: 4, category: \"Biologische Arbeitsstoffe\", hazards: [\"Infektionsgefährdung\", \"sensibilisierende Wirkung\", \"toxische Wirkung\"] },\n                          { id: 5, category: \"Brand- und Explosionsgefährdungen\", hazards: [\"brennbare Feststoffe, Flüssigkeiten, Gase\", \"explosionsfähige Atmosphäre\", \"Explosivstoffe\"] },\n                          { id: 6, category: \"Thermische Gefährdungen\", hazards: [\"heiße Medien/Oberflächen\", \"kalte Medien/Oberflächen\", \"Brand, Explosion\"] },\n                          { id: 7, category: \"Gefährdungen durch spezielle physikalische Einwirkungen\", hazards: [\"Lärm\", \"Ultraschall, Infraschall\", \"Ganzkörpervibrationen\", \"Hand-Arm-Vibrationen\", \"optische Strahlung\", \"ionisierende Strahlung\", \"elektromagnetische Felder\", \"Unter- oder Überdruck\"] },\n                          { id: 8, category: \"Gefährdungen durch Arbeitsumgebungsbedingungen\", hazards: [\"Klima (Hitze, Kälte)\", \"unzureichende Beleuchtung\", \"Lärm\", \"unzureichende Verkehrswege\", \"Sturz, Ausgleiten\", \"unzureichende Flucht- und Rettungswege\"] },\n                          { id: 9, category: \"Physische Belastung/Arbeitsschwere\", hazards: [\"schwere dynamische Arbeit\", \"einseitige dynamische Arbeit\", \"Haltungsarbeit/Zwangshaltungen\", \"Fortbewegung/ungünstige Körperhaltung\", \"Kombination körperlicher Belastungsfaktoren\"] },\n                          { id: 10, category: \"Psychische Faktoren\", hazards: [\"unzureichend gestaltete Arbeitsaufgabe\", \"unzureichend gestaltete Arbeitsorganisation\", \"unzureichend gestaltete soziale Bedingungen\", \"unzureichend gestaltete Arbeitsplatz- und Arbeitsumgebungsfaktoren\"] },\n                          { id: 11, category: \"Sonstige Gefährdungen\", hazards: [\"durch Menschen (körperliche Gewalt)\", \"durch Tiere\", \"durch Pflanzen und pflanzliche Produkte\", \"Absturz in/durch Behälter, Becken, Gruben\"] }\n                        ];\n                        \n                        const [categoryId, hazardIndex] = hazardId.split('-').map(Number);\n                        const category = categories.find(c => c.id === categoryId);\n                        const hazard = category?.hazards[hazardIndex];\n                        \n                        if (!category || !hazard) return null;\n                        \n                        return (\n                          <div key={hazardId} className=\"border rounded-lg p-3 bg-blue-50\">\n                            <div className=\"flex items-start gap-3\">\n                              <CheckCircle className=\"h-5 w-5 text-green-600 mt-0.5\" />\n                              <div className=\"flex-1\">\n                                <div className=\"font-medium text-sm text-industrial-gray\">\n                                  {category.category}\n                                </div>\n                                <div className=\"text-sm text-gray-600 mt-1\">\n                                  {hazard}\n                                </div>\n                              </div>\n                            </div>\n                          </div>\n                        );\n                      })}\n                    </div>\n                    \n                    {viewingPermit.hazardNotes && viewingPermit.hazardNotes !== '{}' && (\n                      <div className=\"mt-4 p-3 bg-yellow-50 rounded-lg\">\n                        <h4 className=\"font-medium text-sm text-industrial-gray mb-2\">Zusätzliche Notizen zu Gefahren:</h4>\n                        {Object.entries(JSON.parse(viewingPermit.hazardNotes)).map(([hazardId, note]) => {\n                          if (!note) return null;\n                          \n                          const [categoryId, hazardIndex] = hazardId.split('-').map(Number);\n                          const categories = [\n                            { id: 1, category: \"Mechanische Gefährdungen\", hazards: [\"Quetschung durch bewegte Teile\", \"Schneiden an scharfen Kanten\", \"Stoß durch herunterfallende Gegenstände\", \"Sturz durch ungesicherte Öffnungen\"] },\n                            { id: 2, category: \"Elektrische Gefährdungen\", hazards: [\"Stromschlag durch defekte Geräte\", \"Lichtbogen bei Schalthandlungen\", \"Statische Entladung\", \"Induktive Kopplung\"] },\n                            { id: 3, category: \"Gefahrstoffe\", hazards: [\"Hautkontakt mit Gefahrstoffen\", \"Einatmen von Gefahrstoffen\", \"Verschlucken von Gefahrstoffen\", \"Hautkontakt mit unter Druck stehenden Flüssigkeiten\"] },\n                            { id: 4, category: \"Biologische Arbeitsstoffe\", hazards: [\"Infektionsgefährdung\", \"sensibilisierende Wirkung\", \"toxische Wirkung\"] },\n                            { id: 5, category: \"Brand- und Explosionsgefährdungen\", hazards: [\"brennbare Feststoffe, Flüssigkeiten, Gase\", \"explosionsfähige Atmosphäre\", \"Explosivstoffe\"] },\n                            { id: 6, category: \"Thermische Gefährdungen\", hazards: [\"heiße Medien/Oberflächen\", \"kalte Medien/Oberflächen\", \"Brand, Explosion\"] },\n                            { id: 7, category: \"Gefährdungen durch spezielle physikalische Einwirkungen\", hazards: [\"Lärm\", \"Ultraschall, Infraschall\", \"Ganzkörpervibrationen\", \"Hand-Arm-Vibrationen\", \"optische Strahlung\", \"ionisierende Strahlung\", \"elektromagnetische Felder\", \"Unter- oder Überdruck\"] },\n                            { id: 8, category: \"Gefährdungen durch Arbeitsumgebungsbedingungen\", hazards: [\"Klima (Hitze, Kälte)\", \"unzureichende Beleuchtung\", \"Lärm\", \"unzureichende Verkehrswege\", \"Sturz, Ausgleiten\", \"unzureichende Flucht- und Rettungswege\"] },\n                            { id: 9, category: \"Physische Belastung/Arbeitsschwere\", hazards: [\"schwere dynamische Arbeit\", \"einseitige dynamische Arbeit\", \"Haltungsarbeit/Zwangshaltungen\", \"Fortbewegung/ungünstige Körperhaltung\", \"Kombination körperlicher Belastungsfaktoren\"] },\n                            { id: 10, category: \"Psychische Faktoren\", hazards: [\"unzureichend gestaltete Arbeitsaufgabe\", \"unzureichend gestaltete Arbeitsorganisation\", \"unzureichend gestaltete soziale Bedingungen\", \"unzureichend gestaltete Arbeitsplatz- und Arbeitsumgebungsfaktoren\"] },\n                            { id: 11, category: \"Sonstige Gefährdungen\", hazards: [\"durch Menschen (körperliche Gewalt)\", \"durch Tiere\", \"durch Pflanzen und pflanzliche Produkte\", \"Absturz in/durch Behälter, Becken, Gruben\"] }\n                          ];\n                          const category = categories.find(c => c.id === categoryId);\n                          const hazard = category?.hazards[hazardIndex];\n                          \n                          return (\n                            <div key={hazardId} className=\"text-sm mb-2\">\n                              <span className=\"font-medium text-blue-700\">{hazard}:</span>\n                              <span className=\"text-gray-600 ml-2\">{note}</span>\n                            </div>\n                          );\n                        })}\n                      </div>\n                    )}\n                  </div>\n                )}\n\n                {/* Sicherheitsbeauftragter */}\n                {viewingPermit.safetyOfficer && (\n                  <div className=\"mb-4\">\n                    <p className=\"text-sm font-medium text-industrial-gray mb-2\">Zugewiesener Sicherheitsbeauftragter</p>\n                    <p className=\"text-secondary-gray\">{viewingPermit.safetyOfficer}</p>\n                  </div>\n                )}\n\n                {/* Zusätzliche Kommentare */}\n                {viewingPermit.additionalComments && (\n                  <div className=\"mb-4\">\n                    <p className=\"text-sm font-medium text-industrial-gray mb-2\">Zusätzliche Kommentare</p>\n                    <p className=\"text-secondary-gray\">{viewingPermit.additionalComments}</p>\n                  </div>\n                )}\n              </div>\n\n              {/* Genehmiger und Status */}\n              <div className=\"border-t pt-4\">\n                <h3 className=\"text-lg font-semibold text-industrial-gray mb-4\">Genehmigung & Freigabe</h3>\n                \n                {/* Ausgewählte Genehmiger */}\n                <div className=\"mb-4\">\n                  <p className=\"text-sm font-medium text-industrial-gray mb-3\">Ausgewählte Genehmiger</p>\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div className=\"bg-gray-50 p-3 rounded\">\n                      <p className=\"text-xs text-gray-600 font-medium\">Abteilungsleiter</p>\n                      <p className=\"text-sm font-semibold text-industrial-gray\">\n                        {viewingPermit.departmentHead || 'Nicht zugewiesen'}\n                      </p>\n                    </div>\n                    <div className=\"bg-gray-50 p-3 rounded\">\n                      <p className=\"text-xs text-gray-600 font-medium\">Technik</p>\n                      <p className=\"text-sm font-semibold text-industrial-gray\">\n                        {viewingPermit.maintenanceApprover || 'Nicht zugewiesen'}\n                      </p>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Genehmigungsstatus */}\n                <div className=\"space-y-2\">\n                  <p className=\"font-medium text-industrial-gray text-sm\">Genehmigungsstatus:</p>\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2\">\n                    <div className={`flex items-center gap-2 p-3 rounded ${viewingPermit.departmentHeadApproval ? 'bg-green-50' : 'bg-orange-50'}`}>\n                      {viewingPermit.departmentHeadApproval ? (\n                        <CheckCircle className=\"h-4 w-4 text-green-600\" />\n                      ) : (\n                        <Clock className=\"h-4 w-4 text-orange-600\" />\n                      )}\n                      <div>\n                        <span className=\"text-sm font-medium\">\n                          Abteilungsleiter: {viewingPermit.departmentHeadApproval ? 'Genehmigt' : 'Ausstehend'}\n                        </span>\n                        {viewingPermit.departmentHeadApprovalDate && (\n                          <p className=\"text-xs text-gray-600\">\n                            {format(new Date(viewingPermit.departmentHeadApprovalDate), \"dd.MM.yyyy HH:mm\", { locale: de })}\n                          </p>\n                        )}\n                      </div>\n                    </div>\n                    <div className={`flex items-center gap-2 p-3 rounded ${viewingPermit.maintenanceApproval ? 'bg-green-50' : 'bg-orange-50'}`}>\n                      {viewingPermit.maintenanceApproval ? (\n                        <CheckCircle className=\"h-4 w-4 text-green-600\" />\n                      ) : (\n                        <Clock className=\"h-4 w-4 text-orange-600\" />\n                      )}\n                      <div>\n                        <span className=\"text-sm font-medium\">\n                          Instandhaltung/Engineering: {viewingPermit.maintenanceApproval ? 'Genehmigt' : 'Ausstehend'}\n                        </span>\n                        {viewingPermit.maintenanceApprovalDate && (\n                          <p className=\"text-xs text-gray-600\">\n                            {format(new Date(viewingPermit.maintenanceApprovalDate), \"dd.MM.yyyy HH:mm\", { locale: de })}\n                          </p>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":33707},"client/src/pages/dashboard.tsx":{"content":"import { useState, useMemo, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Plus, Search, Download, FileText, Clock, AlertTriangle, CheckCircle, Trash2, X, Calendar, Map, List } from \"lucide-react\";\nimport { NavigationHeader } from \"@/components/navigation-header\";\nimport { EditPermitModalUnified } from \"@/components/edit-permit-modal-unified\";\nimport { PermitTable } from \"@/components/permit-table-clean\";\nimport { MapWidget } from \"@/components/map-widget\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { DatePicker } from \"@/components/ui/date-picker\";\nimport { Pagination, PaginationInfo } from \"@/components/ui/pagination\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n} from \"@/components/ui/alert-dialog\";\nimport type { PermitStats } from \"@/lib/types\";\nimport type { Permit, MapBackground } from \"@shared/schema\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { isAfter, isBefore, isSameDay, startOfDay, endOfDay } from \"date-fns\";\n\nexport default function Dashboard() {\n  const [createModalOpen, setCreateModalOpen] = useState(false);\n  const [editModalOpen, setEditModalOpen] = useState(false);\n  const [selectedPermit, setSelectedPermit] = useState<Permit | null>(null);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [dateFrom, setDateFrom] = useState<Date | undefined>();\n  const [dateTo, setDateTo] = useState<Date | undefined>();\n  const [currentPage, setCurrentPage] = useState(1);\n  const [viewMode, setViewMode] = useState<'list' | 'map'>('list');\n  const [selectedMapBackground, setSelectedMapBackground] = useState<MapBackground | null>(null);\n  const [mapClickPosition, setMapClickPosition] = useState<{ x: number, y: number } | null>(null);\n  const itemsPerPage = 10;\n  const { toast } = useToast();\n  const { user } = useAuth();\n  \n  const isAdmin = user?.role === 'admin';\n\n  const { data: stats, isLoading: statsLoading } = useQuery<PermitStats>({\n    queryKey: [\"/api/permits/stats\"],\n  });\n\n  const { data: permits = [], isLoading: permitsLoading } = useQuery<Permit[]>({\n    queryKey: [\"/api/permits\"],\n  });\n\n  const { data: mapBackgrounds = [] } = useQuery<MapBackground[]>({\n    queryKey: [\"/api/map-backgrounds\"],\n  });\n\n  const deletePermitMutation = useMutation({\n    mutationFn: async (permitId: number) => {\n      const response = await fetch(`/api/permits/${permitId}`, {\n        method: 'DELETE',\n        credentials: 'include',\n      });\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Failed to delete permit');\n      }\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/permits\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/permits/stats\"] });\n      toast({\n        title: \"Genehmigung gelöscht\",\n        description: \"Die Genehmigung und alle zugehörigen Daten wurden erfolgreich gelöscht.\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Fehler beim Löschen\",\n        description: error.message || \"Die Genehmigung konnte nicht gelöscht werden.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleMapClick = (x: number, y: number) => {\n    setMapClickPosition({ x, y });\n    setCreateModalOpen(true);\n  };\n\n  const handlePermitClick = (permit: Permit) => {\n    setSelectedPermit(permit);\n    setEditModalOpen(true);\n  };\n\n  const resetMapClick = () => {\n    setMapClickPosition(null);\n  };\n\n  // Set the first available background when map backgrounds are loaded\n  useEffect(() => {\n    if (mapBackgrounds.length > 0 && !selectedMapBackground) {\n      setSelectedMapBackground(mapBackgrounds[0]);\n    }\n  }, [mapBackgrounds, selectedMapBackground]);\n\n  const filteredPermits = useMemo(() => {\n    let filtered = permits;\n    \n    // Apply search filter\n    if (searchTerm) {\n      const term = searchTerm.toLowerCase();\n      filtered = filtered.filter(permit => \n        permit.permitId.toLowerCase().includes(term) ||\n        permit.location.toLowerCase().includes(term) ||\n        permit.requestorName.toLowerCase().includes(term) ||\n        permit.department.toLowerCase().includes(term) ||\n        permit.description.toLowerCase().includes(term)\n      );\n    }\n    \n    // Apply date filters\n    if (dateFrom || dateTo) {\n      filtered = filtered.filter(permit => {\n        if (!permit.createdAt) return false;\n        const permitDate = new Date(permit.createdAt);\n        let includePermit = true;\n        \n        if (dateFrom) {\n          includePermit = includePermit && (isSameDay(permitDate, dateFrom) || isAfter(permitDate, startOfDay(dateFrom)));\n        }\n        \n        if (dateTo) {\n          includePermit = includePermit && (isSameDay(permitDate, dateTo) || isBefore(permitDate, endOfDay(dateTo)));\n        }\n        \n        return includePermit;\n      });\n    }\n    \n    return filtered;\n  }, [permits, searchTerm, dateFrom, dateTo]);\n\n  // Pagination calculations\n  const totalPages = Math.ceil(filteredPermits.length / itemsPerPage);\n  const startIndex = (currentPage - 1) * itemsPerPage;\n  const paginatedPermits = filteredPermits.slice(startIndex, startIndex + itemsPerPage);\n\n  // Reset to first page when filters change\n  useMemo(() => {\n    setCurrentPage(1);\n  }, [searchTerm, dateFrom, dateTo]);\n\n  const handleEditPermit = (permit: Permit) => {\n    setSelectedPermit(permit);\n    setEditModalOpen(true);\n  };\n\n  const handleDeletePermit = (permitId: number) => {\n    deletePermitMutation.mutate(permitId);\n  };\n\n  const handleExportReport = () => {\n    const csvContent = generateCSVReport(permits);\n    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\n    const link = document.createElement('a');\n    const url = URL.createObjectURL(blob);\n    link.setAttribute('href', url);\n    link.setAttribute('download', `arbeitserlaubnis-bericht-${new Date().toISOString().split('T')[0]}.csv`);\n    link.style.visibility = 'hidden';\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n    \n    toast({\n      title: \"Erfolgreich exportiert\",\n      description: \"Der Bericht wurde als CSV-Datei heruntergeladen\",\n    });\n  };\n\n  const generateCSVReport = (permits: Permit[]) => {\n    const headers = [\n      'Genehmigungsnummer',\n      'Typ',\n      'Arbeitsort',\n      'Antragsteller',\n      'Abteilung',\n      'Status',\n      'Startdatum',\n      'Enddatum',\n      'Risikostufe',\n      'Beschreibung'\n    ];\n\n    const getPermitTypeLabel = (type: string) => {\n      const typeMap: Record<string, string> = {\n        'confined_space': 'Enger Raum',\n        'hot_work': 'Heißarbeiten',\n        'electrical': 'Elektrische Arbeiten',\n        'chemical': 'Chemische Arbeiten',\n        'height': 'Höhenarbeiten',\n        'general_permit': 'Allgemeiner Erlaubnisschein',\n      };\n      return typeMap[type] || type;\n    };\n\n    const rows = permits.map(permit => [\n      permit.permitId,\n      getPermitTypeLabel(permit.type),\n      permit.location,\n      permit.requestorName,\n      permit.department,\n      permit.status,\n      permit.startDate ? new Date(permit.startDate).toLocaleDateString('de-DE') : 'Nicht angegeben',\n      permit.endDate ? new Date(permit.endDate).toLocaleDateString('de-DE') : 'Nicht angegeben',\n      permit.riskLevel || 'Nicht angegeben',\n      permit.description.replace(/,/g, ';') // Replace commas to avoid CSV issues\n    ]);\n\n    return [headers, ...rows]\n      .map(row => row.map(field => `\"${field}\"`).join(','))\n      .join('\\n');\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <NavigationHeader />\n      \n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6\">\n        {/* Dashboard Header */}\n        <div className=\"mb-6\">\n          <div className=\"mb-4\">\n            <h2 className=\"text-xl sm:text-2xl font-bold text-industrial-gray mb-2\">\n              Genehmigungsverwaltung Dashboard\n            </h2>\n            <p className=\"text-secondary-gray text-sm sm:text-base\">\n              Überwachung und Verwaltung von Permit to work für enge Räume und chemische Umgebungen\n            </p>\n          </div>\n          \n          {/* Search and filters - Mobile-first layout */}\n          <div className=\"space-y-3 mb-4\">\n            <div className=\"relative\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-secondary-gray w-4 h-4\" />\n              <Input\n                placeholder=\"Genehmigung suchen...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-10 w-full\"\n              />\n            </div>\n            \n            <div className=\"flex flex-col sm:flex-row gap-3\">\n              <DatePicker\n                date={dateFrom}\n                onDateChange={setDateFrom}\n                placeholder=\"Von Datum\"\n                className=\"flex-1\"\n              />\n              <DatePicker\n                date={dateTo}\n                onDateChange={setDateTo}\n                placeholder=\"Bis Datum\"\n                className=\"flex-1\"\n              />\n              {(dateFrom || dateTo) && (\n                <Button\n                  variant=\"outline\"\n                  size=\"icon\"\n                  onClick={() => {\n                    setDateFrom(undefined);\n                    setDateTo(undefined);\n                  }}\n                  className=\"h-10 w-10 sm:flex-shrink-0\"\n                  title=\"Filter zurücksetzen\"\n                >\n                  <X className=\"h-4 w-4\" />\n                </Button>\n              )}\n            </div>\n          </div>\n          \n          {/* Action buttons - Stacked on mobile */}\n          <div className=\"flex flex-col sm:flex-row gap-3\">\n            <Button \n              onClick={handleExportReport}\n              variant=\"outline\"\n              className=\"flex items-center justify-center gap-2 w-full sm:w-auto\"\n            >\n              <Download className=\"w-4 h-4\" />\n              <span className=\"whitespace-nowrap\">Bericht exportieren</span>\n            </Button>\n            <Button \n              onClick={() => setCreateModalOpen(true)}\n              className=\"bg-safety-blue text-white hover:bg-blue-700 flex items-center justify-center gap-2 w-full sm:w-auto\"\n            >\n              <Plus className=\"w-4 h-4\" />\n              <span className=\"whitespace-nowrap\">Neue Genehmigung</span>\n            </Button>\n            \n            {/* View Mode Toggle */}\n            <div className=\"flex items-center gap-1 bg-gray-100 p-1 rounded-lg\">\n              <Button\n                variant={viewMode === 'list' ? 'default' : 'ghost'}\n                size=\"sm\"\n                onClick={() => setViewMode('list')}\n                className=\"px-3 py-1\"\n              >\n                <List className=\"w-4 h-4 mr-1\" />\n                Liste\n              </Button>\n              <Button\n                variant={viewMode === 'map' ? 'default' : 'ghost'}\n                size=\"sm\"\n                onClick={() => setViewMode('map')}\n                className=\"px-3 py-1\"\n              >\n                <Map className=\"w-4 h-4 mr-1\" />\n                Karte\n              </Button>\n            </div>\n          </div>\n        </div>\n\n        {/* Quick Stats - Mobile optimized */}\n        <div className=\"grid grid-cols-2 lg:grid-cols-4 gap-3 sm:gap-6 mb-6\">\n          <Card>\n            <CardContent className=\"p-4 sm:p-6\">\n              <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between\">\n                <div className=\"mb-2 sm:mb-0\">\n                  <p className=\"text-xs sm:text-sm font-medium text-secondary-gray\">Aktive Genehmigungen</p>\n                  <p className=\"text-xl sm:text-3xl font-bold text-safety-blue\">\n                    {statsLoading ? \"...\" : stats?.activePermits || 0}\n                  </p>\n                </div>\n                <div className=\"bg-blue-50 p-2 sm:p-3 rounded-lg self-end sm:self-auto\">\n                  <FileText className=\"text-safety-blue text-lg sm:text-xl\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-4 sm:p-6\">\n              <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between\">\n                <div className=\"mb-2 sm:mb-0\">\n                  <p className=\"text-xs sm:text-sm font-medium text-secondary-gray\">Genehmigung ausstehend</p>\n                  <p className=\"text-xl sm:text-3xl font-bold text-warning-orange\">\n                    {statsLoading ? \"...\" : stats?.pendingApproval || 0}\n                  </p>\n                </div>\n                <div className=\"bg-orange-50 p-2 sm:p-3 rounded-lg self-end sm:self-auto\">\n                  <Clock className=\"text-warning-orange text-lg sm:text-xl\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-4 sm:p-6\">\n              <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between\">\n                <div className=\"mb-2 sm:mb-0\">\n                  <p className=\"text-xs sm:text-sm font-medium text-secondary-gray\">Heute abgelaufen</p>\n                  <p className=\"text-xl sm:text-3xl font-bold text-alert-red\">\n                    {statsLoading ? \"...\" : stats?.expiredToday || 0}\n                  </p>\n                </div>\n                <div className=\"bg-red-50 p-2 sm:p-3 rounded-lg self-end sm:self-auto\">\n                  <AlertTriangle className=\"text-alert-red text-lg sm:text-xl\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-4 sm:p-6\">\n              <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between\">\n                <div className=\"mb-2 sm:mb-0\">\n                  <p className=\"text-xs sm:text-sm font-medium text-secondary-gray\">Abgeschlossen</p>\n                  <p className=\"text-xl sm:text-3xl font-bold text-safety-green\">\n                    {statsLoading ? \"...\" : stats?.completed || 0}\n                  </p>\n                </div>\n                <div className=\"bg-green-50 p-2 sm:p-3 rounded-lg self-end sm:self-auto\">\n                  <CheckCircle className=\"text-safety-green text-lg sm:text-xl\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Main Content */}\n        {viewMode === 'list' ? (\n          <>\n            {/* Permits Table */}\n            <div className=\"mb-4\">\n              <h3 className=\"text-lg font-semibold text-industrial-gray mb-4\">\n                {searchTerm ? `Suchergebnisse (${filteredPermits.length})` : 'Aktuelle Genehmigungen'}\n              </h3>\n            </div>\n            <PermitTable \n              permits={paginatedPermits} \n              isLoading={permitsLoading} \n              onEdit={handleEditPermit} \n              onDelete={handleDeletePermit}\n              isAdmin={isAdmin}\n            />\n\n            {/* Pagination Controls */}\n            {filteredPermits.length > 0 && (\n              <div className=\"mt-6 flex flex-col sm:flex-row items-center justify-between gap-4\">\n                <PaginationInfo\n                  currentPage={currentPage}\n                  itemsPerPage={itemsPerPage}\n                  totalItems={filteredPermits.length}\n                />\n                <Pagination\n                  currentPage={currentPage}\n                  totalPages={totalPages}\n                  onPageChange={setCurrentPage}\n                />\n              </div>\n            )}\n          </>\n        ) : (\n          /* Map View */\n          <MapWidget\n            onPermitClick={handlePermitClick}\n            onMapClick={handleMapClick}\n            showFilters={false}\n            mode=\"create\"\n            selectedMapBackground={selectedMapBackground}\n            onMapBackgroundChange={setSelectedMapBackground}\n            resetTrigger={mapClickPosition ? 0 : Date.now()}\n          />\n        )}\n      </main>\n\n      {/* Mobile Floating Action Button */}\n      <Button\n        className=\"fixed bottom-6 right-6 bg-safety-blue text-white p-4 rounded-full shadow-lg md:hidden z-40\"\n        size=\"icon\"\n        onClick={() => setCreateModalOpen(true)}\n      >\n        <Plus className=\"h-6 w-6\" />\n      </Button>\n\n      <EditPermitModalUnified\n        permit={null}\n        open={createModalOpen}\n        onOpenChange={setCreateModalOpen}\n        mode=\"create\"\n        mapClickPosition={mapClickPosition}\n        onMapReset={() => setMapClickPosition(null)}\n      />\n      \n      <EditPermitModalUnified\n        permit={selectedPermit}\n        open={editModalOpen}\n        onOpenChange={setEditModalOpen}\n        mode=\"edit\"\n      />\n    </div>\n  );\n}\n","size_bytes":17264},"client/src/pages/drafts.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { format } from \"date-fns\";\nimport { de } from \"date-fns/locale\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { NavigationHeader } from \"@/components/navigation-header\";\nimport { EditPermitModalUnified } from \"@/components/edit-permit-modal-unified\";\nimport { \n  FileText, \n  Edit3, \n  Trash2, \n  Save, \n  Plus, \n  Copy, \n  FileStack,\n  Search,\n  Filter\n} from \"lucide-react\";\nimport type { Permit } from \"@shared/schema\";\n\nexport default function Drafts() {\n  const { toast } = useToast();\n  \n  const [selectedPermit, setSelectedPermit] = useState<Permit | null>(null);\n  const [editModalOpen, setEditModalOpen] = useState(false);\n  const [createModalOpen, setCreateModalOpen] = useState(false);\n  const [templateModalOpen, setTemplateModalOpen] = useState(false);\n  const [selectedDraft, setSelectedDraft] = useState<Permit | null>(null);\n  const [templateName, setTemplateName] = useState(\"\");\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [filterType, setFilterType] = useState(\"all\");\n\n  const { data: permits = [], isLoading } = useQuery<Permit[]>({\n    queryKey: [\"/api/permits\"],\n  });\n\n  const { data: templates = [] } = useQuery<any[]>({\n    queryKey: [\"/api/templates\"],\n  });\n\n  const draftPermits = permits.filter((permit: Permit) => permit.status === 'draft');\n\n  const filteredDrafts = draftPermits.filter((permit: Permit) => {\n    const matchesSearch = permit.permitId.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         permit.description.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         permit.location.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesType = filterType === \"all\" || permit.type === filterType;\n    return matchesSearch && matchesType;\n  });\n\n  const handleEdit = (permit: Permit) => {\n    setSelectedPermit(permit);\n    setEditModalOpen(true);\n  };\n\n  const deletePermitMutation = useMutation({\n    mutationFn: async (permitId: number) => {\n      const response = await fetch(`/api/permits/${permitId}`, {\n        method: 'DELETE',\n      });\n      if (!response.ok) {\n        throw new Error('Failed to delete permit');\n      }\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/permits\"] });\n      toast({\n        title: \"Entwurf gelöscht\",\n        description: \"Der Entwurf wurde erfolgreich gelöscht.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Fehler\",\n        description: \"Der Entwurf konnte nicht gelöscht werden.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleDelete = (permit: Permit) => {\n    if (confirm(`Möchten Sie den Entwurf \"${permit.permitId}\" wirklich löschen?`)) {\n      deletePermitMutation.mutate(permit.id);\n    }\n  };\n\n  const createTemplateMutation = useMutation({\n    mutationFn: async (data: { name: string; template: any }) => {\n      return apiRequest(\"/api/templates\", \"POST\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/templates\"] });\n      setTemplateModalOpen(false);\n      setTemplateName(\"\");\n      setSelectedDraft(null);\n      toast({\n        title: \"Vorlage erstellt\",\n        description: \"Die Vorlage wurde erfolgreich erstellt.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Fehler\",\n        description: \"Die Vorlage konnte nicht erstellt werden.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleCreateTemplate = (permit: Permit) => {\n    setSelectedDraft(permit);\n    setTemplateModalOpen(true);\n  };\n\n  const handleSaveTemplate = () => {\n    if (!selectedDraft || !templateName.trim()) return;\n    \n    createTemplateMutation.mutate({\n      name: templateName,\n      template: selectedDraft,\n    });\n  };\n\n  const handleUseTemplate = (template: any) => {\n    // This will be handled by the CreatePermitModal component\n    setCreateModalOpen(true);\n  };\n\n  const getPermitTypeLabel = (type: string) => {\n    const typeMap: Record<string, string> = {\n      'confined_space': 'Enger Raum Zutritt',\n      'hot_work': 'Heißarbeiten',\n      'electrical': 'Elektrische Arbeiten',\n      'chemical': 'Chemische Arbeiten',\n      'height': 'Höhenarbeiten',\n    };\n    return typeMap[type] || type;\n  };\n\n  const DraftCard = ({ permit }: { permit: Permit }) => (\n    <Card className=\"hover:shadow-md transition-shadow\">\n      <CardHeader>\n        <div className=\"flex justify-between items-start\">\n          <div>\n            <CardTitle className=\"text-lg text-industrial-gray\">{permit.permitId}</CardTitle>\n            <p className=\"text-sm text-secondary-gray mt-1\">\n              {getPermitTypeLabel(permit.type)} • {permit.location}\n            </p>\n          </div>\n          <Badge variant=\"outline\">Entwurf</Badge>\n        </div>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-2 text-sm mb-4\">\n          <div>\n            <span className=\"font-medium\">Antragsteller:</span> {permit.requestorName}\n          </div>\n          <div>\n            <span className=\"font-medium\">Abteilung:</span> {permit.department}\n          </div>\n          <div>\n            <span className=\"font-medium\">Erstellt:</span> {format(new Date(permit.createdAt!), \"dd.MM.yyyy\", { locale: de })}\n          </div>\n        </div>\n        \n        <p className=\"text-sm text-secondary-gray mb-4 line-clamp-2\">\n          {permit.description}\n        </p>\n        \n        <div className=\"flex gap-2\">\n          <Button\n            size=\"sm\"\n            variant=\"outline\"\n            onClick={() => handleEdit(permit)}\n          >\n            <Edit3 className=\"w-4 h-4 mr-1\" />\n            Bearbeiten\n          </Button>\n          <Button\n            size=\"sm\"\n            variant=\"outline\"\n            onClick={() => handleCreateTemplate(permit)}\n          >\n            <Copy className=\"w-4 h-4 mr-1\" />\n            Als Vorlage\n          </Button>\n          <Button\n            size=\"sm\"\n            variant=\"outline\"\n            onClick={() => handleDelete(permit)}\n            className=\"text-red-600 hover:text-red-700\"\n          >\n            <Trash2 className=\"w-4 h-4 mr-1\" />\n            Löschen\n          </Button>\n        </div>\n      </CardContent>\n    </Card>\n  );\n\n  if (isLoading) {\n    return (\n      <div className=\"container mx-auto p-6\">\n        <NavigationHeader />\n        <div className=\"text-center py-12\">\n          <p className=\"text-industrial-gray\">Lade Entwürfe...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <NavigationHeader />\n      \n      <div className=\"container mx-auto p-6\">\n        <div className=\"flex justify-between items-center mb-6\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-industrial-gray\">Entwürfe</h1>\n            <p className=\"text-secondary-gray mt-2\">\n              Verwalten Sie Ihre gespeicherten Arbeitserlaubnis-Entwürfe und Vorlagen\n            </p>\n          </div>\n          <Button \n            onClick={() => setCreateModalOpen(true)}\n            className=\"bg-safety-blue text-white hover:bg-blue-700\"\n          >\n            <Plus className=\"w-4 h-4 mr-2\" />\n            Neue Genehmigung erstellen\n          </Button>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          {/* Left Column - Main Content */}\n          <div className=\"lg:col-span-2 space-y-6\">\n            {/* Filters */}\n            <div className=\"bg-white p-4 rounded-lg shadow-sm\">\n              <div className=\"flex gap-4 items-center\">\n                <div className=\"flex-1\">\n                  <div className=\"relative\">\n                    <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400\" />\n                    <Input\n                      placeholder=\"Suchen nach Genehmigungsnummer, Beschreibung oder Ort...\"\n                      value={searchTerm}\n                      onChange={(e) => setSearchTerm(e.target.value)}\n                      className=\"w-full pl-10\"\n                    />\n                  </div>\n                </div>\n                <Select value={filterType} onValueChange={setFilterType}>\n                  <SelectTrigger className=\"w-48\">\n                    <Filter className=\"w-4 h-4 mr-2\" />\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">Alle Typen</SelectItem>\n                    <SelectItem value=\"hot_work\">Heißarbeiten</SelectItem>\n                    <SelectItem value=\"confined_space\">Enger Raum</SelectItem>\n                    <SelectItem value=\"electrical\">Elektrische Arbeiten</SelectItem>\n                    <SelectItem value=\"height_work\">Höhenarbeiten</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n\n            {/* Drafts List */}\n            <div className=\"space-y-4\">\n              {filteredDrafts.length === 0 ? (\n                <Card>\n                  <CardContent className=\"text-center py-12\">\n                    <FileText className=\"h-16 w-16 text-secondary-gray mx-auto mb-4\" />\n                    <h3 className=\"text-lg font-medium text-industrial-gray mb-2\">Keine Entwürfe vorhanden</h3>\n                    <p className=\"text-secondary-gray mb-4\">\n                      Erstellen Sie Ihre erste Arbeitserlaubnis als Entwurf.\n                    </p>\n                    <Button \n                      onClick={() => setCreateModalOpen(true)}\n                      className=\"bg-safety-blue text-white hover:bg-blue-700\"\n                    >\n                      <Plus className=\"w-4 h-4 mr-2\" />\n                      Neue Genehmigung erstellen\n                    </Button>\n                  </CardContent>\n                </Card>\n              ) : (\n                filteredDrafts.map((permit: Permit) => (\n                  <DraftCard key={permit.id} permit={permit} />\n                ))\n              )}\n            </div>\n          </div>\n\n          {/* Right Column - Templates */}\n          <div className=\"space-y-6\">\n            <div>\n              <h2 className=\"text-xl font-semibold text-industrial-gray mb-4\">Vorlagen</h2>\n              \n              {templates.length === 0 ? (\n                <Card>\n                  <CardContent className=\"text-center py-8\">\n                    <FileStack className=\"h-12 w-12 text-secondary-gray mx-auto mb-4\" />\n                    <p className=\"text-industrial-gray\">Keine Vorlagen vorhanden</p>\n                    <p className=\"text-secondary-gray text-sm\">\n                      Erstellen Sie Vorlagen aus bestehenden Entwürfen für die Wiederverwendung.\n                    </p>\n                  </CardContent>\n                </Card>\n              ) : (\n                <div className=\"space-y-4\">\n                  {templates.map((template: any) => (\n                    <Card key={template.id} className=\"hover:shadow-md transition-shadow\">\n                      <CardHeader>\n                        <div className=\"flex justify-between items-start\">\n                          <div>\n                            <CardTitle className=\"text-lg text-industrial-gray\">{template.name}</CardTitle>\n                            <p className=\"text-sm text-secondary-gray mt-1\">\n                              {getPermitTypeLabel(template.template.type)}\n                            </p>\n                          </div>\n                          <Badge variant=\"outline\">Vorlage</Badge>\n                        </div>\n                      </CardHeader>\n                      <CardContent>\n                        <div className=\"space-y-2 text-sm mb-4\">\n                          <div>\n                            <span className=\"font-medium\">Arbeitsort:</span> {template.template.location}\n                          </div>\n                          <div>\n                            <span className=\"font-medium\">Abteilung:</span> {template.template.department}\n                          </div>\n                        </div>\n                        \n                        <Button\n                          size=\"sm\"\n                          onClick={() => handleUseTemplate(template)}\n                          className=\"w-full bg-safety-blue text-white hover:bg-blue-700\"\n                        >\n                          <Copy className=\"w-4 h-4 mr-2\" />\n                          Vorlage verwenden\n                        </Button>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n\n        {/* Edit Modal */}\n        <EditPermitModalUnified\n          permit={selectedPermit}\n          open={editModalOpen}\n          onOpenChange={setEditModalOpen}\n        />\n\n        {/* Create Modal */}\n        <EditPermitModalUnified \n          permit={null}\n          open={createModalOpen} \n          onOpenChange={setCreateModalOpen}\n          mode=\"create\"\n        />\n\n        {/* Template Creation Modal */}\n        {templateModalOpen && (\n          <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50\">\n            <div className=\"bg-white rounded-lg p-6 max-w-md w-full mx-4\">\n              <h3 className=\"text-lg font-semibold mb-4\">Vorlage erstellen</h3>\n              <div className=\"space-y-4\">\n                <div>\n                  <Label>Vorlagenname</Label>\n                  <Input\n                    value={templateName}\n                    onChange={(e) => setTemplateName(e.target.value)}\n                    placeholder=\"z.B. Standard Enger Raum Inspektion\"\n                  />\n                </div>\n                \n                {selectedDraft && (\n                  <div className=\"bg-gray-50 p-3 rounded\">\n                    <p className=\"text-sm font-medium mb-2\">Basierend auf Entwurf:</p>\n                    <p className=\"text-sm\">{selectedDraft.permitId} - {selectedDraft.description}</p>\n                  </div>\n                )}\n\n                <div className=\"flex gap-2 pt-4\">\n                  <Button \n                    onClick={handleSaveTemplate}\n                    disabled={!templateName.trim() || createTemplateMutation.isPending}\n                    className=\"bg-safety-blue text-white hover:bg-blue-700\"\n                  >\n                    <Save className=\"w-4 h-4 mr-2\" />\n                    Vorlage speichern\n                  </Button>\n                  <Button \n                    variant=\"outline\" \n                    onClick={() => setTemplateModalOpen(false)}\n                  >\n                    Abbrechen\n                  </Button>\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":15373},"client/src/pages/login.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { HardHat, Lock, User } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useLocation } from \"wouter\";\nimport { useAuth } from \"@/contexts/AuthContext\";\n\nconst loginSchema = z.object({\n  username: z.string().min(1, \"Benutzername ist erforderlich\"),\n  password: z.string().min(1, \"Passwort ist erforderlich\"),\n});\n\ntype LoginFormData = z.infer<typeof loginSchema>;\n\nexport default function Login() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const { login } = useAuth();\n\n  // Fetch system settings for customizable title and icon\n  const { data: systemSettings } = useQuery({\n    queryKey: [\"/api/system-settings\"]\n  });\n\n  const form = useForm<LoginFormData>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      username: \"\",\n      password: \"\",\n    },\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async (data: LoginFormData) => {\n      const response = await fetch(\"/api/auth/login\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(data),\n        credentials: \"include\",\n      });\n      \n      if (!response.ok) {\n        throw new Error(\"Ungültige Anmeldedaten\");\n      }\n      \n      return response.json();\n    },\n    onSuccess: (data) => {\n      // Update the auth context with the logged-in user\n      login(data.user);\n      toast({\n        title: \"Erfolgreich angemeldet\",\n        description: \"Willkommen zurück!\",\n      });\n      // Use a slight delay to ensure the auth context is updated\n      setTimeout(() => {\n        setLocation(\"/\");\n      }, 100);\n    },\n    onError: (error) => {\n      toast({\n        title: \"Anmeldung fehlgeschlagen\",\n        description: error instanceof Error ? error.message : \"Unbekannter Fehler\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: LoginFormData) => {\n    loginMutation.mutate(data);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-safety-blue to-blue-700 flex items-center justify-center p-4\">\n      <div className=\"w-full max-w-md\">\n        {/* Logo and Header */}\n        <div className=\"text-center mb-6 sm:mb-8\">\n          <div className=\"flex justify-center mb-4\">\n            <div className=\"bg-white p-3 sm:p-4 rounded-full shadow-lg\">\n              {(systemSettings as any)?.headerIcon ? (\n                <img \n                  src={(systemSettings as any).headerIcon} \n                  alt=\"Header Icon\" \n                  className=\"w-10 h-10 sm:w-12 sm:h-12 object-contain\"\n                />\n              ) : (\n                <HardHat className=\"w-10 h-10 sm:w-12 sm:h-12 text-safety-blue\" />\n              )}\n            </div>\n          </div>\n          <h1 className=\"text-2xl sm:text-3xl font-bold text-white mb-2\">\n            {(systemSettings as any)?.applicationTitle || \"Arbeitserlaubnis\"}\n          </h1>\n          <p className=\"text-blue-100 text-sm sm:text-base px-4\">\n            Digitales Genehmigungssystem für sichere Arbeitsplätze\n          </p>\n        </div>\n\n        {/* Login Card */}\n        <Card className=\"shadow-2xl border-0\">\n          <CardHeader className=\"space-y-1 pb-4 sm:pb-6\">\n            <CardTitle className=\"text-xl sm:text-2xl font-bold text-center text-industrial-gray\">\n              Anmelden\n            </CardTitle>\n            <p className=\"text-center text-secondary-gray text-sm sm:text-base\">\n              Geben Sie Ihre Anmeldedaten ein, um fortzufahren\n            </p>\n          </CardHeader>\n          <CardContent>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"username\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Benutzername</FormLabel>\n                      <FormControl>\n                        <div className=\"relative\">\n                          <User className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-secondary-gray w-4 h-4\" />\n                          <Input\n                            placeholder=\"Ihr Benutzername\"\n                            className=\"pl-10\"\n                            {...field}\n                          />\n                        </div>\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"password\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Passwort</FormLabel>\n                      <FormControl>\n                        <div className=\"relative\">\n                          <Lock className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-secondary-gray w-4 h-4\" />\n                          <Input\n                            type=\"password\"\n                            placeholder=\"Ihr Passwort\"\n                            className=\"pl-10\"\n                            {...field}\n                          />\n                        </div>\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <Button\n                  type=\"submit\"\n                  className=\"w-full bg-safety-blue text-white hover:bg-blue-700\"\n                  disabled={loginMutation.isPending}\n                >\n                  {loginMutation.isPending ? \"Anmelden...\" : \"Anmelden\"}\n                </Button>\n              </form>\n            </Form>\n          </CardContent>\n        </Card>\n\n        {/* Footer */}\n        <div className=\"text-center mt-8 text-blue-100 text-sm\">\n          <p>© 2024 Arbeitserlaubnis System</p>\n          <p>Für sichere und konforme Arbeitsplätze</p>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":6540},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/permit-details.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useRoute } from \"wouter\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { ArrowLeft, Edit, Printer, FileText, Users, Settings, Brain, GitBranch, Activity, AlertTriangle } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { PermitStatusBadge } from \"@/components/permit-status-badge\";\nimport { EditPermitModalUnified } from \"@/components/edit-permit-modal-unified\";\nimport { AiSuggestions } from \"@/components/ai-suggestions\";\nimport { WorkflowButtons } from \"@/components/workflow-buttons\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { PermitAttachments } from \"@/components/permit-attachments\";\nimport { StatusIndicator } from \"@/components/status-indicator\";\nimport { WorkflowVisualization } from \"@/components/workflow-visualization\";\nimport { Permit, User } from \"@shared/schema\";\n\nexport default function PermitDetails() {\n  const [match, params] = useRoute(\"/permit/:id\");\n  const permitId = params?.id;\n  const [isEditModalOpen, setIsEditModalOpen] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: permit, isLoading } = useQuery<Permit>({\n    queryKey: [`/api/permits/${permitId}`],\n    enabled: !!permitId,\n  });\n\n  const { data: currentUser } = useQuery<User>({\n    queryKey: [\"/api/auth/user\"],\n  });\n\n  const { data: workLocations = [] } = useQuery<any[]>({\n    queryKey: [\"/api/work-locations/active\"],\n  });\n\n  const { data: users = [] } = useQuery<any[]>({\n    queryKey: [\"/api/users\"],\n  });\n\n  const formatDateTime = (date: Date | string | null) => {\n    if (!date) return 'Nicht angegeben';\n    return new Date(date).toLocaleDateString('de-DE', {\n      year: 'numeric',\n      month: 'long', \n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n\n  const formatDate = (date: Date | string | null) => {\n    if (!date) return 'Nicht angegeben';\n    return new Date(date).toLocaleDateString('de-DE', {\n      year: 'numeric',\n      month: 'long', \n      day: 'numeric',\n    });\n  };\n\n  const getPermitTypeLabel = (type: string) => {\n    const typeMap: Record<string, string> = {\n      'general': 'Allgemeiner Erlaubnisschein',\n      'hot_work': 'Heißarbeiten (Schweißen, Schneiden, Löten)',\n      'height_work': 'Arbeiten in der Höhe (>2m Absturzgefahr)',\n      'confined_space': 'Arbeiten in engen Räumen/Behältern',\n      'electrical_work': 'Elektrische Arbeiten (Schaltanlagen, Kabel)',\n      'chemical_work': 'Arbeiten mit Gefahrstoffen',\n      'machinery_work': 'Arbeiten an Maschinen/Anlagen',\n      'excavation': 'Erdarbeiten/Grabungen',\n      'maintenance': 'Instandhaltungsarbeiten',\n    };\n    return typeMap[type] || type;\n  };\n\n  const getRiskLevel = (level: string) => {\n    const levelMap: Record<string, { label: string; color: string }> = {\n      'niedrig': { label: 'Niedrig', color: 'bg-green-100 text-green-800' },\n      'mittel': { label: 'Mittel', color: 'bg-yellow-100 text-yellow-800' },\n      'hoch': { label: 'Hoch', color: 'bg-red-100 text-red-800' },\n    };\n    return levelMap[level] || { label: level, color: 'bg-gray-100 text-gray-800' };\n  };\n\n  // TRBS-konforme Gefährdungsstruktur \n  const hazardCategories = {\n    1: {\n      name: \"Mechanische Gefährdungen\",\n      hazards: [\n        \"Quetschung durch bewegte Teile\",\n        \"Schneiden an scharfen Kanten\", \n        \"Stoßen an Gegenstände\",\n        \"Erfasst werden von rotierenden Teilen\",\n        \"Sturz durch rutschige Oberflächen\"\n      ]\n    },\n    2: {\n      name: \"Elektrische Gefährdungen\",\n      hazards: [\n        \"Stromschlag durch defekte Isolierung\",\n        \"Lichtbogen bei Schalthandlungen\",\n        \"Elektrostatische Aufladung\", \n        \"Blitzschlag bei Außenarbeiten\",\n        \"Überspannung in Anlagen\"\n      ]\n    },\n    3: {\n      name: \"Gefahrstoffe\",\n      hazards: [\n        \"Einatmen von Dämpfen\",\n        \"Hautkontakt mit Chemikalien\",\n        \"Verschlucken von Substanzen\",\n        \"Brand- und Explosionsgefahr\",\n        \"Allergische Reaktionen\"\n      ]\n    },\n    4: {\n      name: \"Biologische Arbeitsstoffe\",\n      hazards: [\n        \"Infektionsgefahr durch Bakterien\",\n        \"Virale Kontamination\",\n        \"Pilzsporen in der Luft\",\n        \"Parasitärer Befall\",\n        \"Allergene biologische Stoffe\"\n      ]\n    },\n    5: {\n      name: \"Brand- und Explosionsgefährdungen\",\n      hazards: [\n        \"Entzündung brennbarer Stoffe\",\n        \"Gasexplosion in Behältern\",\n        \"Staubexplosion\",\n        \"Selbstentzündung von Materialien\",\n        \"Heiße Oberflächen\"\n      ]\n    },\n    6: {\n      name: \"Thermische Gefährdungen\",\n      hazards: [\n        \"Verbrennungen durch heiße Oberflächen\",\n        \"Erfrierungen durch Kälte\",\n        \"Hitzschlag bei hohen Temperaturen\",\n        \"Unterkühlung in kalter Umgebung\",\n        \"Strahlungswärme\"\n      ]\n    },\n    7: {\n      name: \"Gefährdungen durch spezielle physikalische Einwirkungen\",\n      hazards: [\n        \"Lärm über Grenzwerten\",\n        \"Vibration durch Maschinen\",\n        \"Ionisierende Strahlung\",\n        \"Nichtionisierende Strahlung\",\n        \"Unter- oder Überdruck\"\n      ]\n    },\n    8: {\n      name: \"Gefährdungen durch Arbeitsumgebungsbedingungen\",\n      hazards: [\n        \"Unzureichende Beleuchtung\",\n        \"Klimatische Belastung\",\n        \"Unzureichende Verkehrswege\",\n        \"Absturzgefahr\",\n        \"Ertrinkungsgefahr\"\n      ]\n    },\n    9: {\n      name: \"Physische Belastung/Arbeitsschwere\",\n      hazards: [\n        \"Schweres Heben und Tragen\",\n        \"Ungünstige Körperhaltung\",\n        \"Repetitive Bewegungen\",\n        \"Einseitige Belastung\",\n        \"Zeitdruck bei körperlicher Arbeit\"\n      ]\n    },\n    10: {\n      name: \"Psychische Faktoren\",\n      hazards: [\n        \"Stress durch Zeitdruck\",\n        \"Überforderung bei komplexen Aufgaben\",\n        \"Monotone Tätigkeiten\",\n        \"Soziale Isolation\",\n        \"Verantwortungsdruck\"\n      ]\n    }\n  };\n\n  const getHazardDescription = (hazardId: string): { category: string; description: string; note?: string } => {\n    const [categoryId, hazardIndex] = hazardId.split('-').map(Number);\n    const category = hazardCategories[categoryId as keyof typeof hazardCategories];\n    \n    if (!category || !category.hazards[hazardIndex]) {\n      return { category: `Kategorie ${categoryId}`, description: `Unbekannte Gefährdung ${hazardIndex + 1}` };\n    }\n\n    // Notiz für diese Gefährdung extrahieren\n    let note: string | undefined;\n    if (permit?.hazardNotes && permit.hazardNotes !== '{}') {\n      try {\n        const notes = JSON.parse(permit.hazardNotes);\n        note = notes[hazardId];\n      } catch (e) {\n        // Ignore parsing errors\n      }\n    }\n\n    return {\n      category: category.name,\n      description: category.hazards[hazardIndex],\n      note\n    };\n  };\n\n  const getWorkLocationName = (workLocationId: number | null) => {\n    if (!workLocationId || !Array.isArray(workLocations) || workLocations.length === 0) {\n      return permit?.location || 'Nicht angegeben';\n    }\n    const location = workLocations.find((loc: any) => loc.id === workLocationId);\n    return location ? `${location.name} - ${location.description}` : permit?.location || 'Nicht angegeben';\n  };\n\n  const getSubmittedByName = (submittedById: number | null) => {\n    if (!submittedById || !Array.isArray(users) || users.length === 0) {\n      return 'Nicht angegeben';\n    }\n    const user = users.find((u: any) => u.id === submittedById);\n    return user ? user.fullName || user.username : `Benutzer ID: ${submittedById}`;\n  };\n\n  // Workflow mutation\n  const workflowMutation = useMutation({\n    mutationFn: async ({ actionId, nextStatus }: { actionId: string; nextStatus: string }) => {\n      if (!permit) throw new Error(\"No permit selected\");\n      return apiRequest(`/api/permits/${permit.id}/workflow`, \"POST\", { action: actionId, nextStatus });\n    },\n    onSuccess: () => {\n      if (permit) {\n        queryClient.invalidateQueries({ queryKey: [`/api/permits/${permit.id}`] });\n        queryClient.invalidateQueries({ queryKey: [\"/api/permits\"] });\n      }\n      toast({\n        title: \"Erfolg\",\n        description: \"Status erfolgreich aktualisiert.\",\n      });\n    },\n    onError: (error: Error) => {\n      const errorMessage = error.message || \"Fehler beim Status-Update.\";\n      toast({\n        title: \"Fehler\",\n        description: errorMessage,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleWorkflowAction = async (actionId: string, nextStatus: string) => {\n    console.log('Permit Details: Handling workflow action:', actionId, nextStatus);\n    await workflowMutation.mutateAsync({ actionId, nextStatus });\n  };\n\n  const handlePrint = () => {\n    window.location.href = `/permit/${permit?.id}/print`;\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-industrial-gray mx-auto mb-4\"></div>\n          <div>Lade Genehmigungsdetails...</div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!permit) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <h2 className=\"text-2xl font-bold text-gray-900 mb-4\">Genehmigung nicht gefunden</h2>\n          <p className=\"text-gray-600 mb-6\">Die angeforderte Genehmigung konnte nicht gefunden werden.</p>\n          <Link href=\"/permits\">\n            <Button>\n              <ArrowLeft className=\"h-4 w-4 mr-2\" />\n              Zurück zur Übersicht\n            </Button>\n          </Link>\n        </div>\n      </div>\n    );\n  }\n\n  const riskLevel = getRiskLevel(permit.overallRisk || 'niedrig');\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header */}\n      <div className=\"bg-white border-b border-gray-200 sticky top-0 z-10\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex items-center justify-between py-4\">\n            <div className=\"flex items-center gap-4\">\n              <Link href=\"/permits\">\n                <Button variant=\"ghost\" size=\"sm\">\n                  <ArrowLeft className=\"h-4 w-4 mr-2\" />\n                  Zurück\n                </Button>\n              </Link>\n              <div>\n                <h1 className=\"text-2xl font-bold text-industrial-gray\">{permit.permitId}</h1>\n                <p className=\"text-secondary-gray\">{getPermitTypeLabel(permit.type)}</p>\n              </div>\n            </div>\n            <div className=\"flex items-center gap-3\">\n              <PermitStatusBadge status={permit.status} />\n              <Button variant=\"outline\" size=\"sm\" onClick={() => setIsEditModalOpen(true)}>\n                <Edit className=\"h-4 w-4 mr-2\" />\n                Bearbeiten\n              </Button>\n              <Button variant=\"outline\" size=\"sm\" onClick={handlePrint}>\n                <Printer className=\"h-4 w-4 mr-2\" />\n                Drucken\n              </Button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Content */}\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6\">\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          {/* Main Content - Left Side */}\n          <div className=\"lg:col-span-2 space-y-6\">\n            \n            {/* Grundinformationen */}\n            <Card className=\"print-avoid-break\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <FileText className=\"h-5 w-5\" />\n                  Grundinformationen\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <div className=\"text-sm font-medium text-secondary-gray\">Arbeitstyp</div>\n                    <div className=\"text-industrial-gray font-medium\">{getPermitTypeLabel(permit.type)}</div>\n                  </div>\n                  <div>\n                    <div className=\"text-sm font-medium text-secondary-gray\">Arbeitsort</div>\n                    <div className=\"text-industrial-gray\">{getWorkLocationName(permit.workLocationId)}</div>\n                  </div>\n                  <div>\n                    <div className=\"text-sm font-medium text-secondary-gray\">Abteilung</div>\n                    <div className=\"text-industrial-gray\">{permit.department}</div>\n                  </div>\n                  <div>\n                    <div className=\"text-sm font-medium text-secondary-gray\">Gesamtrisiko</div>\n                    <Badge className={riskLevel.color}>{riskLevel.label}</Badge>\n                  </div>\n                  <div>\n                    <div className=\"text-sm font-medium text-secondary-gray\">Status</div>\n                    <PermitStatusBadge status={permit.status} />\n                  </div>\n                  <div>\n                    <div className=\"text-sm font-medium text-secondary-gray\">Eingereicht von</div>\n                    <div className=\"text-industrial-gray\">{getSubmittedByName(permit.submittedBy)}</div>\n                  </div>\n                </div>\n                \n                <Separator />\n                \n                <div>\n                  <div className=\"text-sm font-medium text-secondary-gray mb-2\">Beschreibung der Arbeiten</div>\n                  <div className=\"text-industrial-gray bg-gray-50 p-3 rounded-md\">\n                    {permit.description || 'Keine Beschreibung angegeben'}\n                  </div>\n                </div>\n\n\n\n                {permit.additionalComments && (\n                  <>\n                    <Separator />\n                    <div>\n                      <div className=\"text-sm font-medium text-secondary-gray mb-2\">Zusätzliche Kommentare</div>\n                      <div className=\"text-industrial-gray bg-gray-50 p-3 rounded-md\">\n                        {permit.additionalComments}\n                      </div>\n                    </div>\n                  </>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Zeitplan */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Zeitplan</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <div className=\"text-sm font-medium text-secondary-gray\">Geplanter Beginn</div>\n                    <div className=\"text-industrial-gray\">{formatDateTime(permit.startDate)}</div>\n                  </div>\n                  <div>\n                    <div className=\"text-sm font-medium text-secondary-gray\">Geplantes Ende</div>\n                    <div className=\"text-industrial-gray\">{formatDateTime(permit.endDate)}</div>\n                  </div>\n                  <div>\n                    <div className=\"text-sm font-medium text-secondary-gray\">Gültig bis</div>\n                    <div className=\"text-industrial-gray\">{formatDate(permit.endDate)}</div>\n                  </div>\n                  <div>\n                    <div className=\"text-sm font-medium text-secondary-gray\">Erstellt am</div>\n                    <div className=\"text-industrial-gray\">{formatDateTime(permit.createdAt)}</div>\n                  </div>\n                </div>\n\n                {(permit.workStartedAt || permit.workCompletedAt) && (\n                  <>\n                    <Separator />\n                    <div className=\"bg-blue-50 p-4 rounded-md\">\n                      <h4 className=\"font-medium text-blue-900 mb-3\">Durchführung</h4>\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                        {permit.workStartedAt && (\n                          <div>\n                            <div className=\"text-sm font-medium text-blue-700\">Arbeit begonnen am</div>\n                            <div className=\"text-blue-900\">{formatDateTime(permit.workStartedAt)}</div>\n                          </div>\n                        )}\n                        {permit.workCompletedAt && (\n                          <div>\n                            <div className=\"text-sm font-medium text-blue-700\">Arbeit abgeschlossen am</div>\n                            <div className=\"text-blue-900\">{formatDateTime(permit.workCompletedAt)}</div>\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                  </>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Kontaktinformationen */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Verantwortliche Personen</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <div className=\"text-sm font-medium text-secondary-gray\">Antragsteller</div>\n                    <div className=\"text-industrial-gray font-medium\">{permit.requestorName}</div>\n                  </div>\n                  <div>\n                    <div className=\"text-sm font-medium text-secondary-gray\">Kontaktnummer</div>\n                    <div className=\"text-industrial-gray\">{permit.contactNumber}</div>\n                  </div>\n                  <div>\n                    <div className=\"text-sm font-medium text-secondary-gray\">Notfallkontakt</div>\n                    <div className=\"text-industrial-gray\">{permit.emergencyContact}</div>\n                  </div>\n                  <div>\n                    <div className=\"text-sm font-medium text-secondary-gray\">Durchführende Person</div>\n                    <div className=\"text-industrial-gray\">{permit.performerName || 'Nicht angegeben'}</div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Gefährdungsbeurteilung */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <AlertTriangle className=\"h-5 w-5\" />\n                  TRBS-konforme Gefährdungsbeurteilung\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <div className=\"text-sm font-medium text-secondary-gray\">Risikokategorie</div>\n                    <div className=\"text-industrial-gray\">\n                      <Badge className={riskLevel.color}>{riskLevel.label}</Badge>\n                    </div>\n                  </div>\n                  <div>\n                    <div className=\"text-sm font-medium text-secondary-gray\">Gefährdungen identifiziert</div>\n                    <div className=\"text-industrial-gray\">\n                      {permit.selectedHazards && permit.selectedHazards.length > 0 \n                        ? `${permit.selectedHazards.length} Gefährdung(en) ausgewählt`\n                        : 'Keine Gefährdungen ausgewählt'\n                      }\n                    </div>\n                  </div>\n                </div>\n\n                {permit.selectedHazards && permit.selectedHazards.length > 0 && (\n                  <>\n                    <Separator />\n                    <div>\n                      <div className=\"text-sm font-medium text-secondary-gray mb-3\">Ausgewählte Gefährdungen</div>\n                      <div className=\"space-y-3 max-h-80 overflow-y-auto\">\n                        {permit.selectedHazards.map((hazardId: string, index: number) => {\n                          const hazardInfo = getHazardDescription(hazardId);\n                          return (\n                            <div key={index} className=\"bg-orange-50 border border-orange-200 p-4 rounded-md\">\n                              <div className=\"mb-2\">\n                                <div className=\"text-sm font-medium text-orange-900 mb-1\">\n                                  {hazardInfo.category}\n                                </div>\n                                <div className=\"text-sm text-orange-800 font-medium\">\n                                  {hazardInfo.description}\n                                </div>\n                              </div>\n                              {hazardInfo.note && (\n                                <div className=\"mt-3 pt-2 border-t border-orange-200\">\n                                  <div className=\"text-xs font-medium text-orange-700 mb-1\">\n                                    Schutzmaßnahmen:\n                                  </div>\n                                  <div className=\"text-xs text-orange-700 bg-orange-25 p-2 rounded\">\n                                    {hazardInfo.note}\n                                  </div>\n                                </div>\n                              )}\n                              <div className=\"text-xs text-orange-600 mt-2 opacity-75\">\n                                ID: {hazardId}\n                              </div>\n                            </div>\n                          );\n                        })}\n                      </div>\n                    </div>\n                  </>\n                )}\n\n                {permit.identifiedHazards && (\n                  <>\n                    <Separator />\n                    <div>\n                      <div className=\"text-sm font-medium text-secondary-gray mb-2\">Zusätzliche Gefahren und Kommentare</div>\n                      <div className=\"text-industrial-gray bg-gray-50 p-3 rounded-md\">\n                        {permit.identifiedHazards}\n                      </div>\n                    </div>\n                  </>\n                )}\n\n\n              </CardContent>\n            </Card>\n\n            {/* Genehmigungen */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Users className=\"h-5 w-5\" />\n                  Genehmigungen\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-1 gap-4\">\n                  <div className=\"flex items-center justify-between p-3 bg-gray-50 rounded-md\">\n                    <div>\n                      <div className=\"text-sm font-medium text-secondary-gray\">Abteilungsleiter</div>\n                      <div className=\"text-industrial-gray\">{permit.departmentHead || 'Nicht zugewiesen'}</div>\n                    </div>\n                    <div className=\"text-right\">\n                      {permit.departmentHeadApproval ? (\n                        <div>\n                          <Badge className=\"bg-green-100 text-green-800\">Genehmigt</Badge>\n                          <div className=\"text-xs text-secondary-gray mt-1\">\n                            {formatDateTime(permit.departmentHeadApprovalDate)}\n                          </div>\n                        </div>\n                      ) : (\n                        <Badge variant=\"outline\">Ausstehend</Badge>\n                      )}\n                    </div>\n                  </div>\n\n                  <div className=\"flex items-center justify-between p-3 bg-gray-50 rounded-md\">\n                    <div>\n                      <div className=\"text-sm font-medium text-secondary-gray\">Sicherheitsbeauftragter</div>\n                      <div className=\"text-industrial-gray\">{permit.safetyOfficer || 'Nicht zugewiesen'}</div>\n                    </div>\n                    <div className=\"text-right\">\n                      {permit.safetyOfficerApproval ? (\n                        <div>\n                          <Badge className=\"bg-green-100 text-green-800\">Genehmigt</Badge>\n                          <div className=\"text-xs text-secondary-gray mt-1\">\n                            {formatDateTime(permit.safetyOfficerApprovalDate)}\n                          </div>\n                        </div>\n                      ) : (\n                        <Badge variant=\"outline\">Ausstehend</Badge>\n                      )}\n                    </div>\n                  </div>\n\n                  <div className=\"flex items-center justify-between p-3 bg-gray-50 rounded-md\">\n                    <div>\n                      <div className=\"text-sm font-medium text-secondary-gray\">Wartungsgenehmiger</div>\n                      <div className=\"text-industrial-gray\">{permit.maintenanceApprover || 'Nicht zugewiesen'}</div>\n                    </div>\n                    <div className=\"text-right\">\n                      {permit.maintenanceApproval ? (\n                        <div>\n                          <Badge className=\"bg-green-100 text-green-800\">Genehmigt</Badge>\n                          <div className=\"text-xs text-secondary-gray mt-1\">\n                            {formatDateTime(permit.maintenanceApprovalDate)}\n                          </div>\n                        </div>\n                      ) : (\n                        <Badge variant=\"outline\">Ausstehend</Badge>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n\n\n\n          </div>\n\n          {/* Sidebar - Right Side */}\n          <div className=\"space-y-6\">\n            \n            {/* Status & Workflow */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Activity className=\"h-5 w-5\" />\n                  Status-Management\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"text-center\">\n                  <StatusIndicator status={permit.status} />\n                </div>\n                \n                <Separator />\n                \n                <div>\n                  <h4 className=\"font-medium mb-3\">Verfügbare Aktionen</h4>\n                  {currentUser && (\n                    <WorkflowButtons \n                      permit={permit} \n                      currentUser={currentUser} \n                      onAction={handleWorkflowAction}\n                      isLoading={workflowMutation.isPending}\n                    />\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Workflow Visualization */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <GitBranch className=\"h-5 w-5\" />\n                  Workflow-Status\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <WorkflowVisualization currentStatus={permit.status} />\n              </CardContent>\n            </Card>\n\n            {/* Quick Info */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Schnellinfo</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3 text-sm\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-secondary-gray\">Permit-ID:</span>\n                  <span className=\"font-mono font-medium\">{permit.permitId}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-secondary-gray\">Status:</span>\n                  <PermitStatusBadge status={permit.status} />\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-secondary-gray\">Risiko:</span>\n                  <Badge className={riskLevel.color}>{riskLevel.label}</Badge>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-secondary-gray\">Erstellt:</span>\n                  <span>{formatDate(permit.createdAt)}</span>\n                </div>\n                {permit.updatedAt && (\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-secondary-gray\">Aktualisiert:</span>\n                    <span>{formatDate(permit.updatedAt)}</span>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n\n      {/* Edit Modal */}\n      <EditPermitModalUnified \n        permit={permit}\n        open={isEditModalOpen} \n        onOpenChange={setIsEditModalOpen}\n        mode=\"edit\"\n      />\n    </div>\n  );\n}","size_bytes":28974},"client/src/pages/permit-print.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { useRoute } from \"wouter\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { FileText, Printer, ArrowLeft, AlertTriangle, CheckCircle } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { PermitStatusBadge } from \"@/components/permit-status-badge\";\nimport { Permit, User, WorkLocation } from \"@shared/schema\";\nimport trbsData from \"@/data/trbs_complete_hazards.json\";\n\nexport default function PermitPrint() {\n  const [match, params] = useRoute(\"/permit/:id/print\");\n  const permitId = params?.id;\n\n  const { data: permit, isLoading } = useQuery<Permit>({\n    queryKey: [`/api/permits/${permitId}`],\n    enabled: !!permitId,\n  });\n\n  const { data: users = [] } = useQuery<User[]>({\n    queryKey: [\"/api/users\"],\n  });\n\n  const { data: workLocations = [] } = useQuery<WorkLocation[]>({\n    queryKey: [\"/api/work-locations/active\"],\n  });\n\n  const getPermitTypeLabel = (type: string) => {\n    const typeMap: Record<string, string> = {\n      'confined_space': 'Enger Raum',\n      'hot_work': 'Heißarbeiten',\n      'electrical': 'Elektrische Arbeiten',\n      'chemical': 'Chemische Arbeiten',\n      'height': 'Höhenarbeiten',\n      'general_permit': 'Allgemeiner Erlaubnisschein',\n    };\n    return typeMap[type] || type;\n  };\n\n  const getRiskLevel = (risk: string) => {\n    switch (risk?.toLowerCase()) {\n      case 'low':\n      case 'niedrig':\n        return { label: 'Niedrig', color: 'bg-green-100 text-green-800' };\n      case 'medium':\n      case 'mittel':\n        return { label: 'Mittel', color: 'bg-yellow-100 text-yellow-800' };\n      case 'high':\n      case 'hoch':\n        return { label: 'Hoch', color: 'bg-red-100 text-red-800' };\n      default:\n        return { label: 'Nicht angegeben', color: 'bg-gray-100 text-gray-800' };\n    }\n  };\n\n  const getWorkLocationName = (workLocationId: string | number | null) => {\n    if (!workLocationId) return 'Nicht angegeben';\n    const location = workLocations.find(loc => loc.id === Number(workLocationId));\n    return location ? location.name : 'Nicht angegeben';\n  };\n\n  const getSubmittedByName = (submittedById: number | null) => {\n    if (!submittedById) {\n      return 'Nicht angegeben';\n    }\n    const user = users.find((u: any) => u.id === submittedById);\n    return user ? user.fullName || user.username : `Benutzer ID: ${submittedById}`;\n  };\n\n  const formatDate = (dateString: string | Date) => {\n    const date = typeof dateString === 'string' ? new Date(dateString) : dateString;\n    return date.toLocaleDateString('de-DE', {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric',\n    });\n  };\n\n  const formatDateTime = (dateString: string | Date | null) => {\n    if (!dateString) return 'Nicht angegeben';\n    const date = typeof dateString === 'string' ? new Date(dateString) : dateString;\n    return date.toLocaleDateString('de-DE', {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit',\n    });\n  };\n\n  const handlePrint = () => {\n    window.print();\n  };\n\n  // Helper functions for TRBS data\n  const parseSelectedHazards = (hazardsStr: string | any[]) => {\n    try {\n      return Array.isArray(hazardsStr) ? hazardsStr : JSON.parse(hazardsStr || '[]');\n    } catch {\n      return [];\n    }\n  };\n\n  const parseHazardNotes = (notesStr: string) => {\n    try {\n      return JSON.parse(notesStr || '{}');\n    } catch {\n      return {};\n    }\n  };\n\n\n\n  const getHazardText = (hazardId: string) => {\n    const [categoryId, hazardIndex] = hazardId.split('-');\n    const category = trbsData.categories.find(cat => cat.id === categoryId);\n    if (category && category.hazards[parseInt(hazardIndex)]) {\n      return category.hazards[parseInt(hazardIndex)].hazard;\n    }\n    return hazardId;\n  };\n\n  const getCategoryName = (categoryId: string) => {\n    const category = trbsData.categories.find(cat => cat.id === categoryId);\n    return category ? category.category : `Kategorie ${categoryId}`;\n  };\n\n  const getUserName = (userIdOrName: number | string | null) => {\n    if (!userIdOrName) return 'Nicht zugewiesen';\n    if (typeof userIdOrName === 'string') return userIdOrName;\n    const user = users.find(u => u.id === userIdOrName);\n    return user ? (user.fullName || user.username) : `User ID: ${userIdOrName}`;\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-white flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-industrial-gray mx-auto mb-4\"></div>\n          <div>Lade Druckansicht...</div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!permit) {\n    return (\n      <div className=\"min-h-screen bg-white flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"text-red-600 mb-4\">Genehmigung nicht gefunden</div>\n          <Link href=\"/permits\">\n            <Button variant=\"outline\">\n              <ArrowLeft className=\"h-4 w-4 mr-2\" />\n              Zurück zur Übersicht\n            </Button>\n          </Link>\n        </div>\n      </div>\n    );\n  }\n\n  const riskLevel = getRiskLevel(permit.overallRisk || 'niedrig');\n  const selectedHazards = parseSelectedHazards(permit.selectedHazards || []);\n  const hazardNotes = parseHazardNotes(permit.hazardNotes || '{}');\n\n  return (\n    <div className=\"min-h-screen bg-white\">\n      {/* Print Header - only visible on screen */}\n      <div className=\"print-hide bg-gray-50 border-b border-gray-200 p-4\">\n        <div className=\"max-w-4xl mx-auto flex items-center justify-between\">\n          <div className=\"flex items-center gap-4\">\n            <Link href={`/permit/${permit.id}`}>\n              <Button variant=\"ghost\" size=\"sm\">\n                <ArrowLeft className=\"h-4 w-4 mr-2\" />\n                Zurück zur Genehmigung\n              </Button>\n            </Link>\n            <h1 className=\"text-xl font-bold text-industrial-gray\">\n              Druckansicht - {permit.permitId}\n            </h1>\n          </div>\n          <Button onClick={handlePrint} className=\"bg-safety-blue text-white hover:bg-blue-700\">\n            <Printer className=\"h-4 w-4 mr-2\" />\n            Drucken\n          </Button>\n        </div>\n      </div>\n\n      {/* Print Content - Optimized for A4 */}\n      <div className=\"max-w-[210mm] mx-auto p-6 text-sm leading-tight\">\n        {/* Document Header */}\n        <div className=\"text-center mb-4 border-b-2 border-black pb-3\">\n          <h1 className=\"text-xl font-bold text-black mb-1\">\n            ARBEITSERLAUBNIS / PERMIT TO WORK\n          </h1>\n          <h2 className=\"text-base font-semibold text-gray-800 mb-2\">\n            {getPermitTypeLabel(permit.type)}\n          </h2>\n          <div className=\"flex justify-center items-center gap-6 text-xs\">\n            <div><strong>Permit-ID:</strong> {permit.permitId}</div>\n            <div><strong>Status:</strong> {permit.status}</div>\n            <div><strong>Risiko:</strong> {riskLevel.label}</div>\n          </div>\n        </div>\n\n        {/* Basic Information Section */}\n        <div className=\"mb-4 print-avoid-break\">\n          <h3 className=\"text-sm font-bold border-b border-gray-400 pb-1 mb-2\">1. GRUNDDATEN</h3>\n          <div className=\"grid grid-cols-3 gap-3 text-xs\">\n            <div>\n              <strong>Arbeitstyp:</strong><br />\n              {getPermitTypeLabel(permit.type)}\n            </div>\n            <div>\n              <strong>Arbeitsort:</strong><br />\n              {getWorkLocationName(permit.workLocationId || '')}\n            </div>\n            <div>\n              <strong>Abteilung:</strong><br />\n              {permit.department}\n            </div>\n            <div>\n              <strong>Antragsteller:</strong><br />\n              {permit.requestorName || 'Nicht angegeben'}\n            </div>\n            <div>\n              <strong>Kontaktnummer:</strong><br />\n              {permit.contactNumber || 'Nicht angegeben'}\n            </div>\n            <div>\n              <strong>Notfallkontakt:</strong><br />\n              {permit.emergencyContact || 'Nicht angegeben'}\n            </div>\n          </div>\n          <div className=\"mt-2\">\n            <strong className=\"text-xs\">Arbeitsbeschreibung:</strong><br />\n            <div className=\"text-xs mt-1 p-2 bg-gray-100 border\">\n              {permit.description || 'Keine Beschreibung angegeben'}\n            </div>\n          </div>\n        </div>\n\n        {/* Schedule Section */}\n        <div className=\"mb-4 print-avoid-break\">\n          <h3 className=\"text-sm font-bold border-b border-gray-400 pb-1 mb-2\">2. ZEITPLAN</h3>\n          <div className=\"grid grid-cols-2 gap-4 text-xs\">\n            <div>\n              <strong>Geplanter Start:</strong><br />\n              {permit.startDate ? formatDateTime(permit.startDate) : 'Nicht angegeben'}\n            </div>\n            <div>\n              <strong>Geplantes Ende:</strong><br />\n              {permit.endDate ? formatDateTime(permit.endDate) : 'Nicht angegeben'}\n            </div>\n            <div>\n              <strong>Tatsächlicher Start:</strong><br />\n              {permit.workStartedAt ? formatDateTime(permit.workStartedAt) : 'Noch nicht begonnen'}\n            </div>\n            <div>\n              <strong>Tatsächliches Ende:</strong><br />\n              {permit.workCompletedAt ? formatDateTime(permit.workCompletedAt) : 'Noch nicht abgeschlossen'}\n            </div>\n          </div>\n        </div>\n\n        {/* Hazards Section */}\n        <div className=\"mb-4 print-avoid-break\">\n          <h3 className=\"text-sm font-bold border-b border-gray-400 pb-1 mb-2\">3. GEFÄHRDUNGSBEURTEILUNG (TRBS)</h3>\n          {selectedHazards.length > 0 ? (\n            <div className=\"text-xs space-y-2\">\n              {selectedHazards.map((hazardId: string, index: number) => {\n                const [categoryId] = hazardId.split('-');\n                return (\n                  <div key={index} className=\"border-l-2 border-red-500 pl-2\">\n                    <div className=\"flex items-center gap-2\">\n                      <AlertTriangle className=\"h-3 w-3 text-red-500\" />\n                      <strong>{getCategoryName(categoryId)}</strong>\n                    </div>\n                    <div className=\"ml-5\">\n                      {getHazardText(hazardId)}\n                    </div>\n                    {hazardNotes[hazardId] && (\n                      <div className=\"ml-5 mt-1 text-gray-600 italic\">\n                        Schutzmaßnahme: {hazardNotes[hazardId]}\n                      </div>\n                    )}\n                  </div>\n                );\n              })}\n            </div>\n          ) : (\n            <div className=\"text-xs text-gray-600\">Keine spezifischen Gefährdungen identifiziert</div>\n          )}\n        </div>\n\n        {/* Approvals Section */}\n        <div className=\"mb-4 print-avoid-break\">\n          <h3 className=\"text-sm font-bold border-b border-gray-400 pb-1 mb-2\">4. GENEHMIGUNGEN</h3>\n          <div className=\"grid grid-cols-1 gap-2 text-xs\">\n            <div className=\"border-l-2 border-blue-500 pl-2\">\n              <strong>Abteilungsleiter:</strong> {getUserName(permit.departmentHead)}\n              <div className=\"ml-2 mt-1 text-gray-600\">\n                {permit.departmentHeadApproval ? (\n                  <span className=\"text-green-600\">\n                    ✓ Genehmigt {permit.departmentHeadApprovalDate ? `am ${formatDateTime(permit.departmentHeadApprovalDate)}` : ''}\n                  </span>\n                ) : (\n                  <span className=\"text-orange-600\">⏳ Ausstehend</span>\n                )}\n              </div>\n            </div>\n            <div className=\"border-l-2 border-blue-500 pl-2\">\n              <strong>Sicherheitsbeauftragte/r:</strong> {getUserName(permit.safetyOfficer)}\n              <div className=\"ml-2 mt-1 text-gray-600\">\n                {permit.safetyOfficerApproval ? (\n                  <span className=\"text-green-600\">\n                    ✓ Genehmigt {permit.safetyOfficerApprovalDate ? `am ${formatDateTime(permit.safetyOfficerApprovalDate)}` : ''}\n                  </span>\n                ) : (\n                  <span className=\"text-orange-600\">⏳ Ausstehend</span>\n                )}\n              </div>\n            </div>\n            <div className=\"border-l-2 border-blue-500 pl-2\">\n              <strong>Wartungsverantwortliche/r:</strong> {getUserName(permit.maintenanceApprover)}\n              <div className=\"ml-2 mt-1 text-gray-600\">\n                {permit.maintenanceApproval ? (\n                  <span className=\"text-green-600\">\n                    ✓ Genehmigt {permit.maintenanceApprovalDate ? `am ${formatDateTime(permit.maintenanceApprovalDate)}` : ''}\n                  </span>\n                ) : (\n                  <span className=\"text-orange-600\">⏳ Ausstehend</span>\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Execution Section */}\n        <div className=\"mb-4 print-avoid-break\">\n          <h3 className=\"text-sm font-bold border-b border-gray-400 pb-1 mb-2\">5. DURCHFÜHRUNG</h3>\n          <div className=\"text-xs space-y-2\">\n            <div>\n              <strong>Ausführende Person:</strong><br />\n              {permit.performerName || 'Nicht angegeben'}\n            </div>\n            \n\n\n            {permit.beforeWorkStarts && (\n              <div>\n                <strong>Vor Arbeitsbeginn:</strong><br />\n                <div className=\"p-2 bg-gray-100 border mt-1\">\n                  {permit.beforeWorkStarts}\n                </div>\n              </div>\n            )}\n\n            {permit.immediateActions && (\n              <div>\n                <strong>Sofortmaßnahmen:</strong><br />\n                <div className=\"p-2 bg-gray-100 border mt-1\">\n                  {permit.immediateActions}\n                </div>\n              </div>\n            )}\n\n            {permit.complianceNotes && (\n              <div>\n                <strong>Compliance-Hinweise:</strong><br />\n                <div className=\"p-2 bg-gray-100 border mt-1\">\n                  {permit.complianceNotes}\n                </div>\n              </div>\n            )}\n\n            {/* Signature */}\n            {permit.performerSignature && (\n              <div>\n                <strong>Unterschrift Ausführende/r:</strong><br />\n                <div className=\"mt-1 border p-2 bg-gray-50\">\n                  <img \n                    src={permit.performerSignature} \n                    alt=\"Unterschrift\" \n                    className=\"max-h-16 w-auto\"\n                  />\n                </div>\n              </div>\n            )}\n          </div>\n        </div>\n\n        {/* Additional Information Section */}\n        <div className=\"mb-4 print-avoid-break\">\n          <h3 className=\"text-sm font-bold border-b border-gray-400 pb-1 mb-2\">6. ZUSÄTZLICHE INFORMATIONEN</h3>\n          \n          {/* Compliance Notes */}\n          {permit.complianceNotes && (\n            <div className=\"mb-2\">\n              <strong className=\"text-xs\">Relevante Vorschriften und Normen:</strong>\n              <div className=\"text-xs p-2 bg-gray-100 border mt-1\">\n                {permit.complianceNotes}\n              </div>\n            </div>\n          )}\n\n          {/* Identified Hazards */}\n          {permit.identifiedHazards && (\n            <div className=\"mb-2\">\n              <strong className=\"text-xs\">Zusätzliche Gefahren und Kommentare:</strong>\n              <div className=\"text-xs p-2 bg-gray-100 border mt-1\">\n                {permit.identifiedHazards}\n              </div>\n            </div>\n          )}\n\n          {/* Additional Comments */}\n          {permit.additionalComments && (\n            <div className=\"mb-2\">\n              <strong className=\"text-xs\">Weitere Kommentare:</strong>\n              <div className=\"text-xs p-2 bg-gray-100 border mt-1\">\n                {permit.additionalComments}\n              </div>\n            </div>\n          )}\n        </div>\n\n        {/* Document Footer */}\n        <div className=\"mt-6 pt-4 border-t-2 border-black text-xs\">\n          <div className=\"grid grid-cols-2 gap-4 mb-4\">\n            <div>\n              <strong>Erstellt:</strong> {formatDateTime(permit.createdAt)}\n            </div>\n            {permit.updatedAt && (\n              <div>\n                <strong>Aktualisiert:</strong> {formatDateTime(permit.updatedAt)}\n              </div>\n            )}\n          </div>\n          \n\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":16697},"client/src/pages/permits-backup.tsx":{"content":"import { useState, useMemo } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Plus, Search, Filter, X, Calendar } from \"lucide-react\";\nimport { NavigationHeader } from \"@/components/navigation-header\";\nimport { EditPermitModalUnified } from \"@/components/edit-permit-modal-unified\";\n\nimport { PermitTable } from \"@/components/permit-table-clean\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { DatePicker } from \"@/components/ui/date-picker\";\nimport { Pagination, PaginationInfo } from \"@/components/ui/pagination\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport type { Permit, User } from \"@shared/schema\";\nimport { isAfter, isBefore, isSameDay, startOfDay, endOfDay } from \"date-fns\";\n\nexport default function Permits() {\n  const [createModalOpen, setCreateModalOpen] = useState(false);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [typeFilter, setTypeFilter] = useState(\"all\");\n  const [dateFrom, setDateFrom] = useState<Date | undefined>();\n  const [dateTo, setDateTo] = useState<Date | undefined>();\n  const [currentPage, setCurrentPage] = useState(1);\n  const itemsPerPage = 10;\n\n  const { data: permits = [], isLoading } = useQuery<Permit[]>({\n    queryKey: [\"/api/permits\"],\n  });\n\n  const { data: currentUser } = useQuery<User>({\n    queryKey: [\"/api/auth/user\"],\n  });\n\n  // Filter permits based on search query and filters\n  const filteredPermits = useMemo(() => {\n    let filtered = permits;\n    \n    // Apply search filter\n    if (searchQuery) {\n      filtered = filtered.filter((permit) => \n        permit.permitId.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        permit.location.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        permit.requestorName.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        permit.description.toLowerCase().includes(searchQuery.toLowerCase())\n      );\n    }\n\n    // Apply status filter\n    if (statusFilter !== \"all\") {\n      filtered = filtered.filter(permit => permit.status === statusFilter);\n    }\n\n    // Apply type filter\n    if (typeFilter !== \"all\") {\n      filtered = filtered.filter(permit => permit.type === typeFilter);\n    }\n\n    // Apply date filters\n    if (dateFrom || dateTo) {\n      filtered = filtered.filter(permit => {\n        if (!permit.createdAt) return false;\n        const permitDate = new Date(permit.createdAt);\n        let includePermit = true;\n        \n        if (dateFrom) {\n          includePermit = includePermit && (isSameDay(permitDate, dateFrom) || isAfter(permitDate, startOfDay(dateFrom)));\n        }\n        \n        if (dateTo) {\n          includePermit = includePermit && (isSameDay(permitDate, dateTo) || isBefore(permitDate, endOfDay(dateTo)));\n        }\n        \n        return includePermit;\n      });\n    }\n\n    return filtered;\n  }, [permits, searchQuery, statusFilter, typeFilter, dateFrom, dateTo]);\n\n  // Pagination calculations\n  const totalPages = Math.ceil(filteredPermits.length / itemsPerPage);\n  const startIndex = (currentPage - 1) * itemsPerPage;\n  const paginatedPermits = filteredPermits.slice(startIndex, startIndex + itemsPerPage);\n\n  // Reset to first page when filters change\n  useMemo(() => {\n    setCurrentPage(1);\n  }, [searchQuery, statusFilter, typeFilter, dateFrom, dateTo]);\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <NavigationHeader />\n      \n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6\">\n        {/* Page Header */}\n        <div className=\"mb-6\">\n          <h2 className=\"text-xl sm:text-2xl font-bold text-industrial-gray mb-2\">\n            Arbeitsgenehmigungen\n          </h2>\n          <p className=\"text-secondary-gray text-sm sm:text-base\">\n            Anzeigen und Verwalten aller Arbeitsgenehmigungen im System\n          </p>\n        </div>\n\n        {/* Search and Filters - Mobile optimized */}\n        <div className=\"bg-white rounded-lg shadow-sm border border-gray-200 p-4 sm:p-6 mb-6\">\n          <div className=\"space-y-4\">\n            {/* Search Bar */}\n            <div className=\"relative\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-secondary-gray h-4 w-4\" />\n              <Input\n                placeholder=\"Suche nach ID, Standort, Antragsteller...\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                className=\"pl-10 w-full\"\n              />\n            </div>\n            \n            {/* Date Filters */}\n            <div className=\"flex flex-col sm:flex-row gap-3\">\n              <DatePicker\n                date={dateFrom}\n                onDateChange={setDateFrom}\n                placeholder=\"Von Datum\"\n                className=\"flex-1 sm:w-40\"\n              />\n              <DatePicker\n                date={dateTo}\n                onDateChange={setDateTo}\n                placeholder=\"Bis Datum\"\n                className=\"flex-1 sm:w-40\"\n              />\n              {(dateFrom || dateTo) && (\n                <Button\n                  variant=\"outline\"\n                  size=\"icon\"\n                  onClick={() => {\n                    setDateFrom(undefined);\n                    setDateTo(undefined);\n                  }}\n                  className=\"h-10 w-10 sm:flex-shrink-0\"\n                >\n                    <X className=\"h-4 w-4\" />\n                  </Button>\n                )}\n              </div>\n            </div>\n\n            {/* Type/Status Filters and Create Button - Mobile optimized */}\n            <div className=\"flex flex-col sm:flex-row gap-3 sm:gap-4 sm:justify-between sm:items-center\">\n              <div className=\"flex flex-col sm:flex-row gap-3 sm:gap-4\">\n                <Select value={statusFilter} onValueChange={setStatusFilter}>\n                  <SelectTrigger className=\"w-full sm:w-40\">\n                    <SelectValue placeholder=\"Alle Status\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">Alle Status</SelectItem>\n                    <SelectItem value=\"pending\">Ausstehend</SelectItem>\n                    <SelectItem value=\"approved\">Genehmigt</SelectItem>\n                    <SelectItem value=\"active\">Aktiv</SelectItem>\n                    <SelectItem value=\"completed\">Abgeschlossen</SelectItem>\n                    <SelectItem value=\"expired\">Abgelaufen</SelectItem>\n                    <SelectItem value=\"rejected\">Abgelehnt</SelectItem>\n                  </SelectContent>\n                </Select>\n\n                <Select value={typeFilter} onValueChange={setTypeFilter}>\n                  <SelectTrigger className=\"w-full sm:w-48\">\n                    <SelectValue placeholder=\"Alle Typen\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">Alle Typen</SelectItem>\n                    <SelectItem value=\"confined_space\">Enger Raum</SelectItem>\n                    <SelectItem value=\"hot_work\">Heißarbeiten</SelectItem>\n                    <SelectItem value=\"electrical\">Elektrische Arbeiten</SelectItem>\n                    <SelectItem value=\"chemical\">Chemische Arbeiten</SelectItem>\n                    <SelectItem value=\"height\">Höhenarbeiten</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <Button \n                className=\"bg-safety-blue text-white hover:bg-blue-700 w-full sm:w-auto\"\n                onClick={() => setCreateModalOpen(true)}\n              >\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Neue Genehmigung\n              </Button>\n            </div>\n          </div>\n\n          {/* Results Summary */}\n          <div className=\"mt-4 text-sm text-secondary-gray\">\n            Zeige {filteredPermits.length} von {permits.length} Genehmigungen\n            {searchQuery && ` mit \"${searchQuery}\"`}\n            {statusFilter !== \"all\" && ` mit Status \"${statusFilter}\"`}\n            {typeFilter !== \"all\" && ` vom Typ \"${typeFilter}\"`}\n            {(dateFrom || dateTo) && \" mit Datumsfilter\"}\n          </div>\n        </div>\n\n        {/* Permits Table */}\n        <PermitTable \n          permits={paginatedPermits} \n          isLoading={isLoading}\n          currentUser={currentUser}\n        />\n\n        {/* Pagination Controls */}\n        {filteredPermits.length > 0 && (\n          <div className=\"mt-6 flex flex-col sm:flex-row items-center justify-between gap-4\">\n            <PaginationInfo\n              currentPage={currentPage}\n              itemsPerPage={itemsPerPage}\n              totalItems={filteredPermits.length}\n            />\n            <Pagination\n              currentPage={currentPage}\n              totalPages={totalPages}\n              onPageChange={setCurrentPage}\n            />\n          </div>\n        )}\n      </main>\n\n      {/* Mobile Floating Action Button */}\n      <Button\n        className=\"fixed bottom-6 right-6 bg-safety-blue text-white p-4 rounded-full shadow-lg md:hidden z-40\"\n        size=\"icon\"\n        onClick={() => setCreateModalOpen(true)}\n      >\n        <Plus className=\"h-6 w-6\" />\n      </Button>\n\n      <EditPermitModalUnified \n        permit={null}\n        open={createModalOpen} \n        onOpenChange={setCreateModalOpen}\n        mode=\"create\"\n      />\n\n    </div>\n  );\n}\n","size_bytes":9489},"client/src/pages/permits.tsx":{"content":"import { useState, useMemo } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Plus, Search, Filter, X, Calendar } from \"lucide-react\";\nimport { NavigationHeader } from \"@/components/navigation-header\";\nimport { EditPermitModalUnified } from \"@/components/edit-permit-modal-unified\";\nimport { PermitTable } from \"@/components/permit-table-clean\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { DatePicker } from \"@/components/ui/date-picker\";\nimport { Pagination, PaginationInfo } from \"@/components/ui/pagination\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport type { Permit, User } from \"@shared/schema\";\nimport { isAfter, isBefore, isSameDay, startOfDay, endOfDay } from \"date-fns\";\n\nexport default function Permits() {\n  const [createModalOpen, setCreateModalOpen] = useState(false);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [typeFilter, setTypeFilter] = useState(\"all\");\n  const [dateFrom, setDateFrom] = useState<Date | undefined>();\n  const [dateTo, setDateTo] = useState<Date | undefined>();\n  const [currentPage, setCurrentPage] = useState(1);\n  const itemsPerPage = 10;\n\n  const { data: permits = [], isLoading } = useQuery<Permit[]>({\n    queryKey: [\"/api/permits\"],\n  });\n\n  const { data: currentUser } = useQuery<User>({\n    queryKey: [\"/api/auth/user\"],\n  });\n\n  // Filter permits based on search query and filters\n  const filteredPermits = useMemo(() => {\n    let filtered = permits;\n    \n    // Apply search filter\n    if (searchQuery) {\n      filtered = filtered.filter((permit) => \n        permit.permitId.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        permit.location.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        permit.requestorName.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        permit.description.toLowerCase().includes(searchQuery.toLowerCase())\n      );\n    }\n    \n    // Apply status filter\n    if (statusFilter !== \"all\") {\n      filtered = filtered.filter((permit) => permit.status === statusFilter);\n    }\n    \n    // Apply type filter\n    if (typeFilter !== \"all\") {\n      filtered = filtered.filter((permit) => permit.type === typeFilter);\n    }\n    \n    // Apply date range filter\n    if (dateFrom || dateTo) {\n      filtered = filtered.filter((permit) => {\n        const permitDate = new Date(permit.startDate);\n        let includePermit = true;\n        \n        if (dateFrom) {\n          includePermit = includePermit && (isSameDay(permitDate, dateFrom) || isAfter(permitDate, startOfDay(dateFrom)));\n        }\n        \n        if (dateTo) {\n          includePermit = includePermit && (isSameDay(permitDate, dateTo) || isBefore(permitDate, endOfDay(dateTo)));\n        }\n        \n        return includePermit;\n      });\n    }\n\n    return filtered;\n  }, [permits, searchQuery, statusFilter, typeFilter, dateFrom, dateTo]);\n\n  // Pagination calculations\n  const totalPages = Math.ceil(filteredPermits.length / itemsPerPage);\n  const startIndex = (currentPage - 1) * itemsPerPage;\n  const paginatedPermits = filteredPermits.slice(startIndex, startIndex + itemsPerPage);\n\n  // Reset to first page when filters change\n  useMemo(() => {\n    setCurrentPage(1);\n  }, [searchQuery, statusFilter, typeFilter, dateFrom, dateTo]);\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <NavigationHeader />\n      \n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6\">\n        {/* Page Header */}\n        <div className=\"mb-6\">\n          <h2 className=\"text-xl sm:text-2xl font-bold text-industrial-gray mb-2\">\n            Arbeitsgenehmigungen\n          </h2>\n          <p className=\"text-secondary-gray text-sm sm:text-base\">\n            Anzeigen und Verwalten aller Arbeitsgenehmigungen im System\n          </p>\n        </div>\n\n        {/* Search and Filters - Mobile optimized */}\n        <div className=\"bg-white rounded-lg shadow-sm border border-gray-200 p-4 sm:p-6 mb-6\">\n          <div className=\"space-y-4\">\n            {/* Search Bar */}\n            <div className=\"relative\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-secondary-gray h-4 w-4\" />\n              <Input\n                placeholder=\"Suche nach ID, Standort, Antragsteller...\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                className=\"pl-10\"\n              />\n            </div>\n\n            {/* Filters - Mobile responsive */}\n            <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4\">\n              <Select value={statusFilter} onValueChange={setStatusFilter}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Status filtern\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">Alle Status</SelectItem>\n                  <SelectItem value=\"draft\">Entwurf</SelectItem>\n                  <SelectItem value=\"submitted\">Eingereicht</SelectItem>\n                  <SelectItem value=\"approved\">Genehmigt</SelectItem>\n                  <SelectItem value=\"rejected\">Abgelehnt</SelectItem>\n                  <SelectItem value=\"completed\">Abgeschlossen</SelectItem>\n                </SelectContent>\n              </Select>\n\n              <Select value={typeFilter} onValueChange={setTypeFilter}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Typ filtern\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">Alle Typen</SelectItem>\n                  <SelectItem value=\"hot_work\">Heißarbeit</SelectItem>\n                  <SelectItem value=\"confined_space\">Beengter Raum</SelectItem>\n                  <SelectItem value=\"electrical\">Elektrische Arbeit</SelectItem>\n                  <SelectItem value=\"height_work\">Höhenarbeit</SelectItem>\n                  <SelectItem value=\"excavation\">Erdarbeiten</SelectItem>\n                  <SelectItem value=\"maintenance\">Instandhaltung</SelectItem>\n                  <SelectItem value=\"general_permit\">Allgemeiner Erlaubnisschein</SelectItem>\n                </SelectContent>\n              </Select>\n\n              <DatePicker\n                date={dateFrom}\n                onDateChange={setDateFrom}\n                placeholder=\"Von Datum\"\n              />\n\n              <DatePicker\n                date={dateTo}\n                onDateChange={setDateTo}\n                placeholder=\"Bis Datum\"\n              />\n            </div>\n\n            {/* Filter Actions */}\n            <div className=\"flex flex-col sm:flex-row justify-between items-center gap-4\">\n              <Button\n                variant=\"outline\"\n                onClick={() => {\n                  setSearchQuery(\"\");\n                  setStatusFilter(\"all\");\n                  setTypeFilter(\"all\");\n                  setDateFrom(undefined);\n                  setDateTo(undefined);\n                }}\n                className=\"flex items-center gap-2 w-full sm:w-auto\"\n              >\n                <X className=\"w-4 h-4\" />\n                Filter zurücksetzen\n              </Button>\n\n              <Button\n                onClick={() => setCreateModalOpen(true)}\n                className=\"flex items-center gap-2 w-full sm:w-auto\"\n              >\n                <Plus className=\"w-4 h-4\" />\n                Neue Genehmigung\n              </Button>\n            </div>\n          </div>\n\n          {/* Results Summary */}\n          <div className=\"mt-4 text-sm text-secondary-gray\">\n            Zeige {filteredPermits.length} von {permits.length} Genehmigungen\n            {searchQuery && ` mit \"${searchQuery}\"`}\n            {statusFilter !== \"all\" && ` mit Status \"${statusFilter}\"`}\n            {typeFilter !== \"all\" && ` vom Typ \"${typeFilter}\"`}\n            {(dateFrom || dateTo) && \" mit Datumsfilter\"}\n          </div>\n        </div>\n\n        {/* Permits Table */}\n        <PermitTable \n          permits={paginatedPermits} \n          isLoading={isLoading}\n          currentUser={currentUser}\n        />\n\n        {/* Pagination Controls */}\n        {filteredPermits.length > 0 && (\n          <div className=\"mt-6 flex flex-col sm:flex-row items-center justify-between gap-4\">\n            <PaginationInfo\n              currentPage={currentPage}\n              itemsPerPage={itemsPerPage}\n              totalItems={filteredPermits.length}\n            />\n            <Pagination\n              currentPage={currentPage}\n              totalPages={totalPages}\n              onPageChange={setCurrentPage}\n            />\n          </div>\n        )}\n      </main>\n\n      {/* Mobile Floating Action Button */}\n      <Button\n        className=\"fixed bottom-6 right-6 bg-safety-blue text-white p-4 rounded-full shadow-lg md:hidden z-40\"\n        size=\"icon\"\n        onClick={() => setCreateModalOpen(true)}\n      >\n        <Plus className=\"h-6 w-6\" />\n      </Button>\n\n      <EditPermitModalUnified \n        permit={null}\n        open={createModalOpen} \n        onOpenChange={setCreateModalOpen}\n        mode=\"create\"\n      />\n    </div>\n  );\n}","size_bytes":9255},"client/src/pages/settings.tsx":{"content":"import { useState, useRef, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { NavigationHeader } from \"@/components/navigation-header\";\nimport { WorkLocationManagement } from \"@/components/work-location-management\";\nimport { MapBackgroundManagement } from \"@/components/map-background-management\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from \"@/components/ui/dialog\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Link, useLocation } from \"wouter\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { \n  Settings as SettingsIcon, \n  User, \n  Bell, \n  Shield, \n  Database,\n  Save,\n  Users,\n  Mail,\n  Server,\n  Key,\n  Lock,\n  Webhook,\n  Plus,\n  TestTube,\n  CheckCircle,\n  XCircle,\n  Trash2,\n  Edit,\n  MapPin\n} from \"lucide-react\";\nimport type { User as UserType } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface WebhookConfig {\n  id: number;\n  name: string;\n  webhookUrl: string;\n  isActive: boolean;\n  lastTestedAt?: string;\n  lastTestStatus?: string;\n  createdAt: string;\n  updatedAt: string;\n}\n\nfunction WebhookConfigSection() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [createModalOpen, setCreateModalOpen] = useState(false);\n  const [editModalOpen, setEditModalOpen] = useState(false);\n  const [selectedConfig, setSelectedConfig] = useState<WebhookConfig | null>(null);\n  const [formData, setFormData] = useState({\n    name: \"\",\n    webhookUrl: \"\",\n    isActive: false\n  });\n\n  const { data: webhookConfigs = [], isLoading } = useQuery<WebhookConfig[]>({\n    queryKey: [\"/api/webhook-configs\"],\n  });\n\n  const createConfigMutation = useMutation({\n    mutationFn: async (data: typeof formData) => {\n      return apiRequest(\"/api/webhook-configs\", \"POST\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/webhook-configs\"] });\n      setCreateModalOpen(false);\n      setFormData({ name: \"\", webhookUrl: \"\", isActive: false });\n      toast({\n        title: \"Webhook erstellt\",\n        description: \"Die Webhook-Konfiguration wurde erfolgreich erstellt.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Fehler\",\n        description: \"Webhook-Konfiguration konnte nicht erstellt werden.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateConfigMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: number; data: Partial<WebhookConfig> }) => {\n      return apiRequest(`/api/webhook-configs/${id}`, \"PATCH\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/webhook-configs\"] });\n      setEditModalOpen(false);\n      toast({\n        title: \"Webhook aktualisiert\",\n        description: \"Die Webhook-Konfiguration wurde erfolgreich aktualisiert.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Fehler\",\n        description: \"Webhook-Konfiguration konnte nicht aktualisiert werden.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteConfigMutation = useMutation({\n    mutationFn: async (id: number) => {\n      return apiRequest(`/api/webhook-configs/${id}`, \"DELETE\");\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/webhook-configs\"] });\n      toast({\n        title: \"Webhook gelöscht\",\n        description: \"Die Webhook-Konfiguration wurde erfolgreich gelöscht.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Fehler\",\n        description: \"Webhook-Konfiguration konnte nicht gelöscht werden.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const testConnectionMutation = useMutation({\n    mutationFn: async (id: number) => {\n      const response = await apiRequest(`/api/webhook-configs/${id}/test`, \"POST\");\n      return await response.json() as { success: boolean; message: string };\n    },\n    onSuccess: (data: { success: boolean; message: string }) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/webhook-configs\"] });\n      toast({\n        title: data.success ? \"Verbindung erfolgreich\" : \"Verbindung fehlgeschlagen\",\n        description: data.message,\n        variant: data.success ? \"default\" : \"destructive\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Fehler\",\n        description: \"Verbindungstest konnte nicht durchgeführt werden.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleCreate = () => {\n    if (!formData.name || !formData.webhookUrl) {\n      toast({\n        title: \"Fehler\",\n        description: \"Name und Webhook-URL sind erforderlich.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    createConfigMutation.mutate(formData);\n  };\n\n  const handleEdit = (config: WebhookConfig) => {\n    setSelectedConfig(config);\n    setFormData({\n      name: config.name,\n      webhookUrl: config.webhookUrl,\n      isActive: config.isActive\n    });\n    setEditModalOpen(true);\n  };\n\n  const handleUpdate = () => {\n    if (!selectedConfig || !formData.name || !formData.webhookUrl) {\n      toast({\n        title: \"Fehler\",\n        description: \"Name und Webhook-URL sind erforderlich.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    updateConfigMutation.mutate({ id: selectedConfig.id, data: formData });\n  };\n\n  const handleDelete = (id: number) => {\n    if (confirm(\"Sind Sie sicher, dass Sie diese Webhook-Konfiguration löschen möchten?\")) {\n      deleteConfigMutation.mutate(id);\n    }\n  };\n\n  const handleTest = (id: number) => {\n    testConnectionMutation.mutate(id);\n  };\n\n  const getStatusBadge = (config: WebhookConfig) => {\n    if (!config.lastTestedAt) {\n      return <Badge variant=\"secondary\">Nicht getestet</Badge>;\n    }\n    if (config.lastTestStatus === 'success') {\n      return <Badge variant=\"default\" className=\"bg-green-100 text-green-800\">Erfolgreich</Badge>;\n    }\n    return <Badge variant=\"destructive\">Fehlgeschlagen</Badge>;\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <div className=\"flex justify-between items-center\">\n          <CardTitle className=\"flex items-center gap-2\">\n            <Webhook className=\"h-5 w-5\" />\n            AI Webhook-Konfiguration\n          </CardTitle>\n          <Button onClick={() => setCreateModalOpen(true)} size=\"sm\">\n            <Plus className=\"h-4 w-4 mr-2\" />\n            Webhook hinzufügen\n          </Button>\n        </div>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-4\">\n          <p className=\"text-sm text-secondary-gray\">\n            Konfigurieren Sie n8n Webhook-URLs für AI-gestützte Genehmigungsverbesserungen.\n          </p>\n          \n          <div className=\"bg-blue-50 dark:bg-blue-950 p-4 rounded-lg border border-blue-200 dark:border-blue-800\">\n            <h4 className=\"font-medium text-blue-900 dark:text-blue-100 mb-2\">HTTP POST Endpoint für n8n</h4>\n            <p className=\"text-sm text-blue-800 dark:text-blue-200 mb-2\">\n              Kopieren Sie diese URL und fügen Sie sie in Ihren n8n HTTP Request Node ein:\n            </p>\n            <div className=\"bg-white dark:bg-gray-800 p-2 rounded border font-mono text-sm\">\n              {window.location.origin}/api/webhooks/suggestions\n            </div>\n            <div className=\"mt-3 flex gap-2\">\n              <Button\n                size=\"sm\"\n                variant=\"outline\"\n                onClick={() => navigator.clipboard.writeText(`${window.location.origin}/api/webhooks/suggestions`)}\n                className=\"text-xs\"\n              >\n                URL kopieren\n              </Button>\n              <Button\n                size=\"sm\"\n                variant=\"outline\"\n                onClick={() => window.open('/api/documentation/n8n-integration', '_blank')}\n                className=\"text-xs\"\n              >\n                📖 n8n Setup Dokumentation\n              </Button>\n            </div>\n          </div>\n\n          {isLoading ? (\n            <div className=\"text-center py-4\">Lade Webhook-Konfigurationen...</div>\n          ) : webhookConfigs.length === 0 ? (\n            <div className=\"text-center py-8 text-secondary-gray\">\n              <Webhook className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n              <p>Keine Webhook-Konfigurationen vorhanden</p>\n              <p className=\"text-sm\">Fügen Sie eine Konfiguration hinzu, um zu beginnen</p>\n            </div>\n          ) : (\n            <div className=\"space-y-3\">\n              {webhookConfigs.map((config) => (\n                <div key={config.id} className=\"flex items-center justify-between p-4 border rounded-lg\">\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center gap-3 mb-2\">\n                      <h4 className=\"font-medium\">{config.name}</h4>\n                      {config.isActive && (\n                        <Badge variant=\"default\">Aktiv</Badge>\n                      )}\n                      {getStatusBadge(config)}\n                    </div>\n                    <p className=\"text-sm text-secondary-gray font-mono\">\n                      {config.webhookUrl}\n                    </p>\n                    {config.lastTestedAt && (\n                      <p className=\"text-xs text-secondary-gray mt-1\">\n                        Zuletzt getestet: {new Date(config.lastTestedAt).toLocaleString('de-DE')}\n                      </p>\n                    )}\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <Button\n                      size=\"sm\"\n                      variant=\"outline\"\n                      onClick={() => handleTest(config.id)}\n                      disabled={testConnectionMutation.isPending}\n                    >\n                      <TestTube className=\"h-4 w-4 mr-1\" />\n                      Test\n                    </Button>\n                    <Button\n                      size=\"sm\"\n                      variant=\"outline\"\n                      onClick={() => handleEdit(config)}\n                    >\n                      <Edit className=\"h-4 w-4 mr-1\" />\n                      Bearbeiten\n                    </Button>\n                    <Button\n                      size=\"sm\"\n                      variant=\"outline\"\n                      onClick={() => handleDelete(config.id)}\n                      disabled={deleteConfigMutation.isPending}\n                    >\n                      <Trash2 className=\"h-4 w-4 mr-1\" />\n                      Löschen\n                    </Button>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </div>\n\n        {/* Create Webhook Modal */}\n        <Dialog open={createModalOpen} onOpenChange={setCreateModalOpen}>\n          <DialogContent>\n            <DialogHeader>\n              <DialogTitle>Neue Webhook-Konfiguration</DialogTitle>\n              <DialogDescription>\n                Fügen Sie eine neue n8n Webhook-URL für AI-Verbesserungen hinzu.\n              </DialogDescription>\n            </DialogHeader>\n            <div className=\"space-y-4\">\n              <div>\n                <Label>Name *</Label>\n                <Input\n                  value={formData.name}\n                  onChange={(e) => setFormData({ ...formData, name: e.target.value })}\n                  placeholder=\"z.B. n8n AI Workflow\"\n                />\n              </div>\n              <div>\n                <Label>Webhook-URL *</Label>\n                <Input\n                  value={formData.webhookUrl}\n                  onChange={(e) => setFormData({ ...formData, webhookUrl: e.target.value })}\n                  placeholder=\"https://your-n8n-instance.com/webhook/...\"\n                />\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <Switch\n                  checked={formData.isActive}\n                  onCheckedChange={(checked) => setFormData({ ...formData, isActive: checked })}\n                />\n                <Label>Als aktive Konfiguration festlegen</Label>\n              </div>\n              <div className=\"flex gap-2 pt-4\">\n                <Button\n                  onClick={handleCreate}\n                  disabled={createConfigMutation.isPending}\n                  className=\"flex-1\"\n                >\n                  Erstellen\n                </Button>\n                <Button\n                  variant=\"outline\"\n                  onClick={() => setCreateModalOpen(false)}\n                  className=\"flex-1\"\n                >\n                  Abbrechen\n                </Button>\n              </div>\n            </div>\n          </DialogContent>\n        </Dialog>\n\n        {/* Edit Webhook Modal */}\n        <Dialog open={editModalOpen} onOpenChange={setEditModalOpen}>\n          <DialogContent>\n            <DialogHeader>\n              <DialogTitle>Webhook-Konfiguration bearbeiten</DialogTitle>\n              <DialogDescription>\n                Bearbeiten Sie die Webhook-Konfiguration.\n              </DialogDescription>\n            </DialogHeader>\n            <div className=\"space-y-4\">\n              <div>\n                <Label>Name *</Label>\n                <Input\n                  value={formData.name}\n                  onChange={(e) => setFormData({ ...formData, name: e.target.value })}\n                  placeholder=\"z.B. n8n AI Workflow\"\n                />\n              </div>\n              <div>\n                <Label>Webhook-URL *</Label>\n                <Input\n                  value={formData.webhookUrl}\n                  onChange={(e) => setFormData({ ...formData, webhookUrl: e.target.value })}\n                  placeholder=\"https://your-n8n-instance.com/webhook/...\"\n                />\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <Switch\n                  checked={formData.isActive}\n                  onCheckedChange={(checked) => setFormData({ ...formData, isActive: checked })}\n                />\n                <Label>Als aktive Konfiguration festlegen</Label>\n              </div>\n              <div className=\"flex gap-2 pt-4\">\n                <Button\n                  onClick={handleUpdate}\n                  disabled={updateConfigMutation.isPending}\n                  className=\"flex-1\"\n                >\n                  Aktualisieren\n                </Button>\n                <Button\n                  variant=\"outline\"\n                  onClick={() => setEditModalOpen(false)}\n                  className=\"flex-1\"\n                >\n                  Abbrechen\n                </Button>\n              </div>\n            </div>\n          </DialogContent>\n        </Dialog>\n      </CardContent>\n    </Card>\n  );\n}\n\nexport default function Settings() {\n  const { toast } = useToast();\n  const [, setLocation] = useLocation();\n  const { user: currentUser } = useAuth();\n  \n  const [passwordModalOpen, setPasswordModalOpen] = useState(false);\n  const [emailModalOpen, setEmailModalOpen] = useState(false);\n  const [passwordData, setPasswordData] = useState({\n    currentPassword: \"\",\n    newPassword: \"\",\n    confirmPassword: \"\"\n  });\n\n  const iconInputRef = useRef<HTMLInputElement>(null);\n  const queryClient = useQueryClient();\n\n  const [settings, setSettings] = useState({\n    // User Settings\n    fullName: currentUser?.fullName || \"Hans Mueller\",\n    email: \"hans.mueller@company.com\",\n    department: currentUser?.department || \"Operations\",\n    \n    // Notification Settings\n    emailNotifications: true,\n    permitExpiring: true,\n    newPermitRequests: true,\n    \n    // Security Settings\n    twoFactorAuth: false,\n    sessionTimeout: 30,\n    \n    // System Settings\n    autoBackup: true,\n    auditLog: true,\n    logRetention: 90,\n    maintenanceMode: false,\n  });\n\n  const [emailSettings, setEmailSettings] = useState({\n    smtpServer: \"smtp.company.com\",\n    smtpPort: 587,\n    username: \"notifications@company.com\",\n    password: \"\",\n    enableTLS: true,\n    fromAddress: \"noreply@company.com\",\n    fromName: \"TRBS Permit System\"\n  });\n\n  const [systemSettings, setSystemSettings] = useState({\n    applicationTitle: \"Arbeitserlaubnis\",\n    headerIcon: null as string | null\n  });\n\n  // Fetch system settings\n  const { data: currentSystemSettings } = useQuery({\n    queryKey: [\"/api/system-settings\"]\n  });\n\n  // Update local state when API data is loaded\n  useEffect(() => {\n    if (currentSystemSettings) {\n      setSystemSettings({\n        applicationTitle: (currentSystemSettings as any).applicationTitle || \"Arbeitserlaubnis\",\n        headerIcon: (currentSystemSettings as any).headerIcon || null\n      });\n    }\n  }, [currentSystemSettings]);\n\n  const updatePasswordMutation = useMutation({\n    mutationFn: async (passwordData: { currentPassword: string; newPassword: string }) => {\n      if (!currentUser) throw new Error(\"Not authenticated\");\n      return apiRequest(`/api/users/${currentUser.id}/password`, \"PATCH\", { \n        password: passwordData.newPassword \n      });\n    },\n    onSuccess: () => {\n      setPasswordModalOpen(false);\n      setPasswordData({ currentPassword: \"\", newPassword: \"\", confirmPassword: \"\" });\n      toast({\n        title: \"Erfolg\",\n        description: \"Passwort wurde erfolgreich geändert\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Fehler\",\n        description: \"Passwort konnte nicht geändert werden\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const saveProfileMutation = useMutation({\n    mutationFn: async (data: { fullName: string; email: string }) => {\n      if (!currentUser?.id) throw new Error(\"Not authenticated\");\n      \n      const response = await fetch(`/api/users/${currentUser.id}`, {\n        method: 'PATCH',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        credentials: 'include',\n        body: JSON.stringify({\n          fullName: data.fullName,\n          email: data.email\n        })\n      });\n      \n      if (!response.ok) {\n        throw new Error('Failed to update profile');\n      }\n      \n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Profil aktualisiert\",\n        description: \"Ihre Profildaten wurden erfolgreich gespeichert.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Fehler\",\n        description: \"Profildaten konnten nicht gespeichert werden.\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  // System Settings Mutations\n  const uploadIconMutation = useMutation({\n    mutationFn: async (file: File) => {\n      const formData = new FormData();\n      formData.append('icon', file);\n      \n      const response = await fetch('/api/system-settings/upload-icon', {\n        method: 'POST',\n        credentials: 'include',\n        body: formData\n      });\n      \n      if (!response.ok) {\n        throw new Error('Failed to upload icon');\n      }\n      \n      return response.json();\n    },\n    onSuccess: (data) => {\n      setSystemSettings(prev => ({ ...prev, headerIcon: data.headerIcon }));\n      queryClient.invalidateQueries({ queryKey: [\"/api/system-settings\"] });\n      toast({\n        title: \"Icon hochgeladen\",\n        description: \"Das Header-Icon wurde erfolgreich aktualisiert.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Fehler\",\n        description: \"Icon konnte nicht hochgeladen werden.\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const saveSystemSettingsMutation = useMutation({\n    mutationFn: async (settings: typeof systemSettings) => {\n      return apiRequest(\"/api/system-settings\", \"PATCH\", settings);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/system-settings\"] });\n      toast({\n        title: \"Einstellungen gespeichert\",\n        description: \"Die System-Einstellungen wurden erfolgreich aktualisiert.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Fehler\",\n        description: \"Einstellungen konnten nicht gespeichert werden.\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const handleIconUpload = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file) {\n      uploadIconMutation.mutate(file);\n    }\n  };\n\n  const handleSaveSystemSettings = () => {\n    saveSystemSettingsMutation.mutate(systemSettings);\n  };\n\n  const handleSaveProfile = () => {\n    saveProfileMutation.mutate({\n      fullName: settings.fullName,\n      email: settings.email\n    });\n  };\n\n  const handlePasswordChange = () => {\n    if (passwordData.newPassword !== passwordData.confirmPassword) {\n      toast({\n        title: \"Fehler\",\n        description: \"Passwörter stimmen nicht überein\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (passwordData.newPassword.length < 6) {\n      toast({\n        title: \"Fehler\",\n        description: \"Passwort muss mindestens 6 Zeichen lang sein\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    updatePasswordMutation.mutate({\n      currentPassword: passwordData.currentPassword,\n      newPassword: passwordData.newPassword\n    });\n  };\n\n  const handleNavigateToPermits = () => {\n    setLocation(\"/permits\");\n  };\n\n  const handleNavigateToDrafts = () => {\n    setLocation(\"/drafts\");\n  };\n\n  const handleNavigateToApprovals = () => {\n    setLocation(\"/approvals\");\n  };\n\n  const handleOpenEmailSettings = () => {\n    setEmailModalOpen(true);\n  };\n\n  const handleBackupDatabase = () => {\n    toast({\n      title: \"Backup gestartet\",\n      description: \"Die Datenbank-Sicherung wurde erfolgreich initiiert\",\n    });\n  };\n\n  const handleViewSecurityLog = () => {\n    toast({\n      title: \"Sicherheitsprotokoll\",\n      description: \"Öffne Sicherheitsprotokoll-Viewer\",\n    });\n  };\n\n  const handleSaveEmailSettings = () => {\n    toast({\n      title: \"E-Mail-Einstellungen gespeichert\",\n      description: \"Die E-Mail-Konfiguration wurde erfolgreich aktualisiert\",\n    });\n    setEmailModalOpen(false);\n  };\n\n  const isAdmin = currentUser?.role === 'admin';\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <NavigationHeader />\n      \n      <main className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-6\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-industrial-gray flex items-center gap-3\">\n            <SettingsIcon className=\"h-8 w-8\" />\n            Einstellungen\n          </h1>\n          <p className=\"mt-2 text-secondary-gray\">\n            Verwalten Sie Ihre persönlichen Einstellungen und Systemkonfiguration\n          </p>\n        </div>\n\n        <div className=\"space-y-6\">\n          {/* User Profile Settings */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <User className=\"h-5 w-5\" />\n                Benutzerprofil\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <Label>Vollständiger Name</Label>\n                  <Input\n                    value={settings.fullName}\n                    onChange={(e) => setSettings({ ...settings, fullName: e.target.value })}\n                  />\n                </div>\n                <div>\n                  <Label>E-Mail-Adresse</Label>\n                  <Input\n                    type=\"email\"\n                    value={settings.email}\n                    onChange={(e) => setSettings({ ...settings, email: e.target.value })}\n                  />\n                </div>\n                <div>\n                  <Label>Abteilung</Label>\n                  <Input\n                    value={settings.department}\n                    onChange={(e) => setSettings({ ...settings, department: e.target.value })}\n                  />\n                </div>\n                <div>\n                  <Label>Benutzername</Label>\n                  <Input value={currentUser?.username || \"\"} disabled />\n                </div>\n              </div>\n              \n              <Separator />\n              \n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <h4 className=\"font-medium text-industrial-gray\">Passwort ändern</h4>\n                  <p className=\"text-sm text-secondary-gray\">\n                    Aktualisieren Sie Ihr Login-Passwort für erhöhte Sicherheit\n                  </p>\n                </div>\n                <Button \n                  variant=\"outline\"\n                  onClick={() => setPasswordModalOpen(true)}\n                >\n                  <Key className=\"w-4 h-4 mr-2\" />\n                  Passwort ändern\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Notification Settings */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Bell className=\"h-5 w-5\" />\n                Benachrichtigungen\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <Label>E-Mail-Benachrichtigungen</Label>\n                  <p className=\"text-sm text-secondary-gray\">\n                    Erhalten Sie wichtige Updates per E-Mail\n                  </p>\n                </div>\n                <Switch\n                  checked={settings.emailNotifications}\n                  onCheckedChange={(checked) => setSettings({ ...settings, emailNotifications: checked })}\n                />\n              </div>\n              \n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <Label>Ablaufende Genehmigungen</Label>\n                  <p className=\"text-sm text-secondary-gray\">\n                    Benachrichtigung bei bald ablaufenden Arbeitserlaubnissen\n                  </p>\n                </div>\n                <Switch\n                  checked={settings.permitExpiring}\n                  onCheckedChange={(checked) => setSettings({ ...settings, permitExpiring: checked })}\n                />\n              </div>\n              \n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <Label>Neue Genehmigungsanträge</Label>\n                  <p className=\"text-sm text-secondary-gray\">\n                    Benachrichtigung bei neuen Anträgen zur Genehmigung\n                  </p>\n                </div>\n                <Switch\n                  checked={settings.newPermitRequests}\n                  onCheckedChange={(checked) => setSettings({ ...settings, newPermitRequests: checked })}\n                />\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Security Settings */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Shield className=\"h-5 w-5\" />\n                Sicherheit\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div>\n                <Label>Session-Timeout (Minuten)</Label>\n                <Input\n                  type=\"number\"\n                  value={settings.sessionTimeout}\n                  onChange={(e) => setSettings({ ...settings, sessionTimeout: parseInt(e.target.value) })}\n                  className=\"w-32\"\n                />\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* AI Webhook Configuration - Only for Admins */}\n          {isAdmin && (\n            <WebhookConfigSection />\n          )}\n\n          {/* Work Location Management - Only for Admins */}\n          {isAdmin && (\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <MapPin className=\"h-5 w-5\" />\n                  Arbeitsorte verwalten\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <WorkLocationManagement />\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Map Background Management - Only for Admins */}\n          {isAdmin && (\n            <MapBackgroundManagement />\n          )}\n\n          {/* System Settings - Only for Admins */}\n          {isAdmin && (\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Database className=\"h-5 w-5\" />\n                  Systemeinstellungen\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <Label>Automatische Sicherung</Label>\n                    <p className=\"text-sm text-secondary-gray\">\n                      Tägliche automatische Datensicherung aktivieren\n                    </p>\n                  </div>\n                  <Switch\n                    checked={settings.autoBackup}\n                    onCheckedChange={(checked) => setSettings({ ...settings, autoBackup: checked })}\n                  />\n                </div>\n                \n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <Label>Audit-Protokoll</Label>\n                    <p className=\"text-sm text-secondary-gray\">\n                      Detaillierte Protokollierung aller Systemaktivitäten\n                    </p>\n                  </div>\n                  <Switch\n                    checked={settings.auditLog}\n                    onCheckedChange={(checked) => setSettings({ ...settings, auditLog: checked })}\n                  />\n                </div>\n                \n                <div>\n                  <Label>Log-Aufbewahrung (Tage)</Label>\n                  <Input\n                    type=\"number\"\n                    value={settings.logRetention}\n                    onChange={(e) => setSettings({ ...settings, logRetention: parseInt(e.target.value) })}\n                    className=\"w-32\"\n                  />\n                </div>\n                \n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <Label>Wartungsmodus</Label>\n                    <p className=\"text-sm text-secondary-gray\">\n                      System für Wartungsarbeiten sperren\n                    </p>\n                  </div>\n                  <Switch\n                    checked={settings.maintenanceMode}\n                    onCheckedChange={(checked) => setSettings({ ...settings, maintenanceMode: checked })}\n                  />\n                </div>\n\n                <Separator />\n\n                {/* Application Customization */}\n                <div>\n                  <Label className=\"text-base font-semibold\">Anwendungsanpassung</Label>\n                  <p className=\"text-sm text-secondary-gray mb-4\">\n                    Passen Sie das Erscheinungsbild der Anwendung an\n                  </p>\n                  \n                  <div className=\"space-y-4\">\n                    <div>\n                      <Label htmlFor=\"app-title\">Anwendungstitel</Label>\n                      <Input\n                        id=\"app-title\"\n                        placeholder=\"Arbeitserlaubnis\"\n                        value={systemSettings.applicationTitle}\n                        onChange={(e) => setSystemSettings({ ...systemSettings, applicationTitle: e.target.value })}\n                        className=\"max-w-sm\"\n                      />\n                    </div>\n                    \n                    <div>\n                      <Label htmlFor=\"header-icon\">Header-Icon</Label>\n                      <div className=\"flex items-center gap-4 mt-2\">\n                        {systemSettings.headerIcon && (\n                          <div className=\"w-10 h-10 border rounded-md overflow-hidden bg-gray-50\">\n                            <img \n                              src={systemSettings.headerIcon} \n                              alt=\"Header Icon\" \n                              className=\"w-full h-full object-contain\"\n                            />\n                          </div>\n                        )}\n                        <input\n                          type=\"file\"\n                          accept=\"image/*\"\n                          onChange={handleIconUpload}\n                          className=\"hidden\"\n                          ref={iconInputRef}\n                        />\n                        <Button \n                          variant=\"outline\" \n                          onClick={() => iconInputRef.current?.click()}\n                          disabled={uploadIconMutation.isPending}\n                        >\n                          {uploadIconMutation.isPending ? \"Lade hoch...\" : \"Icon auswählen\"}\n                        </Button>\n                      </div>\n                      <p className=\"text-xs text-secondary-gray mt-1\">\n                        Empfohlene Größe: 40x40px, Format: PNG, JPG, SVG\n                      </p>\n                    </div>\n                    \n                    <Button onClick={handleSaveSystemSettings} disabled={saveSystemSettingsMutation.isPending}>\n                      {saveSystemSettingsMutation.isPending ? \"Speichere...\" : \"Einstellungen speichern\"}\n                    </Button>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Quick Links */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Server className=\"h-5 w-5\" />\n                Schnellzugriff\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                {isAdmin && (\n                  <Link href=\"/user-management\">\n                    <Button variant=\"outline\" className=\"w-full justify-start\">\n                      <Users className=\"w-4 h-4 mr-2\" />\n                      Benutzerverwaltung\n                    </Button>\n                  </Link>\n                )}\n                \n                {isAdmin && (\n                  <>\n                    <Button \n                      variant=\"outline\" \n                      className=\"w-full justify-start\"\n                      onClick={handleOpenEmailSettings}\n                    >\n                      <Mail className=\"w-4 h-4 mr-2\" />\n                      E-Mail-Einstellungen\n                    </Button>\n                    \n                    <Button \n                      variant=\"outline\" \n                      className=\"w-full justify-start\"\n                      onClick={handleBackupDatabase}\n                    >\n                      <Database className=\"w-4 h-4 mr-2\" />\n                      Datenbank-Backup\n                    </Button>\n                    \n                    <Button \n                      variant=\"outline\" \n                      className=\"w-full justify-start\"\n                      onClick={handleViewSecurityLog}\n                    >\n                      <Shield className=\"w-4 h-4 mr-2\" />\n                      Sicherheitsprotokoll\n                    </Button>\n                  </>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Save Button */}\n          <div className=\"flex justify-end\">\n            <Button \n              onClick={handleSaveProfile}\n              disabled={saveProfileMutation.isPending}\n              className=\"bg-safety-blue text-white hover:bg-blue-700\"\n            >\n              <Save className=\"w-4 h-4 mr-2\" />\n              {saveProfileMutation.isPending ? \"Speichere...\" : \"Profil speichern\"}\n            </Button>\n          </div>\n        </div>\n      </main>\n\n      {/* Password Change Modal */}\n      <Dialog open={passwordModalOpen} onOpenChange={setPasswordModalOpen}>\n        <DialogContent className=\"max-w-md\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center gap-2\">\n              <Lock className=\"h-5 w-5\" />\n              Passwort ändern\n            </DialogTitle>\n            <DialogDescription>\n              Geben Sie Ihr aktuelles Passwort ein und wählen Sie ein neues, sicheres Passwort.\n            </DialogDescription>\n          </DialogHeader>\n          \n          <div className=\"space-y-4\">\n            <div>\n              <Label>Aktuelles Passwort</Label>\n              <Input\n                type=\"password\"\n                value={passwordData.currentPassword}\n                onChange={(e) => setPasswordData({ ...passwordData, currentPassword: e.target.value })}\n                placeholder=\"Aktuelles Passwort eingeben\"\n              />\n            </div>\n            \n            <div>\n              <Label>Neues Passwort</Label>\n              <Input\n                type=\"password\"\n                value={passwordData.newPassword}\n                onChange={(e) => setPasswordData({ ...passwordData, newPassword: e.target.value })}\n                placeholder=\"Neues Passwort eingeben\"\n              />\n            </div>\n            \n            <div>\n              <Label>Passwort bestätigen</Label>\n              <Input\n                type=\"password\"\n                value={passwordData.confirmPassword}\n                onChange={(e) => setPasswordData({ ...passwordData, confirmPassword: e.target.value })}\n                placeholder=\"Neues Passwort wiederholen\"\n              />\n            </div>\n\n            <div className=\"flex gap-2 pt-4\">\n              <Button \n                onClick={handlePasswordChange}\n                disabled={updatePasswordMutation.isPending}\n                className=\"bg-safety-blue text-white hover:bg-blue-700\"\n              >\n                <Key className=\"w-4 h-4 mr-2\" />\n                Passwort ändern\n              </Button>\n              <Button \n                variant=\"outline\" \n                onClick={() => {\n                  setPasswordModalOpen(false);\n                  setPasswordData({ currentPassword: \"\", newPassword: \"\", confirmPassword: \"\" });\n                }}\n              >\n                Abbrechen\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Email Settings Modal */}\n      <Dialog open={emailModalOpen} onOpenChange={setEmailModalOpen}>\n        <DialogContent className=\"max-w-md\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center gap-2\">\n              <Mail className=\"h-5 w-5\" />\n              E-Mail-Server Konfiguration\n            </DialogTitle>\n            <DialogDescription>\n              Konfigurieren Sie die SMTP-Einstellungen für E-Mail-Benachrichtigungen.\n            </DialogDescription>\n          </DialogHeader>\n          \n          <div className=\"space-y-4\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <Label>SMTP-Server</Label>\n                <Input\n                  value={emailSettings.smtpServer}\n                  onChange={(e) => setEmailSettings({ ...emailSettings, smtpServer: e.target.value })}\n                  placeholder=\"smtp.example.com\"\n                />\n              </div>\n              <div>\n                <Label>Port</Label>\n                <Input\n                  type=\"number\"\n                  value={emailSettings.smtpPort}\n                  onChange={(e) => setEmailSettings({ ...emailSettings, smtpPort: parseInt(e.target.value) })}\n                  placeholder=\"587\"\n                />\n              </div>\n            </div>\n            \n            <div>\n              <Label>Benutzername</Label>\n              <Input\n                value={emailSettings.username}\n                onChange={(e) => setEmailSettings({ ...emailSettings, username: e.target.value })}\n                placeholder=\"user@example.com\"\n              />\n            </div>\n            \n            <div>\n              <Label>Passwort</Label>\n              <Input\n                type=\"password\"\n                value={emailSettings.password}\n                onChange={(e) => setEmailSettings({ ...emailSettings, password: e.target.value })}\n                placeholder=\"E-Mail-Passwort\"\n              />\n            </div>\n            \n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <Label>Absender-Adresse</Label>\n                <Input\n                  value={emailSettings.fromAddress}\n                  onChange={(e) => setEmailSettings({ ...emailSettings, fromAddress: e.target.value })}\n                  placeholder=\"noreply@example.com\"\n                />\n              </div>\n              <div>\n                <Label>Absender-Name</Label>\n                <Input\n                  value={emailSettings.fromName}\n                  onChange={(e) => setEmailSettings({ ...emailSettings, fromName: e.target.value })}\n                  placeholder=\"System Name\"\n                />\n              </div>\n            </div>\n            \n            <div className=\"flex items-center justify-between\">\n              <div>\n                <Label>TLS aktivieren</Label>\n                <p className=\"text-xs text-secondary-gray\">\n                  Verschlüsselte Verbindung verwenden\n                </p>\n              </div>\n              <Switch\n                checked={emailSettings.enableTLS}\n                onCheckedChange={(checked) => setEmailSettings({ ...emailSettings, enableTLS: checked })}\n              />\n            </div>\n\n            <div className=\"flex gap-2 pt-4\">\n              <Button \n                onClick={handleSaveEmailSettings}\n                className=\"bg-safety-blue text-white hover:bg-blue-700\"\n              >\n                <Save className=\"w-4 h-4 mr-2\" />\n                Speichern\n              </Button>\n              <Button \n                variant=\"outline\" \n                onClick={() => setEmailModalOpen(false)}\n              >\n                Abbrechen\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":42703},"client/src/pages/user-management.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { NavigationHeader } from \"@/components/navigation-header\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from \"@/components/ui/dialog\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Users, Shield, AlertTriangle, Plus, Eye, Edit, Key } from \"lucide-react\";\nimport type { User } from \"@shared/schema\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nexport default function UserManagement() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const [createUserModalOpen, setCreateUserModalOpen] = useState(false);\n  const [userDetailsModalOpen, setUserDetailsModalOpen] = useState(false);\n  const [editUserModalOpen, setEditUserModalOpen] = useState(false);\n  const [passwordModalOpen, setPasswordModalOpen] = useState(false);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n\n  const [newUser, setNewUser] = useState({\n    username: \"\",\n    password: \"\",\n    role: \"employee\"\n  });\n\n  const [passwordData, setPasswordData] = useState({\n    newPassword: \"\",\n    confirmPassword: \"\"\n  });\n\n  const { data: users = [], isLoading } = useQuery<User[]>({\n    queryKey: [\"/api/users\"],\n  });\n\n  const createUserMutation = useMutation({\n    mutationFn: async (userData: { username: string; password: string; role: string }) => {\n      return apiRequest(\"/api/users\", \"POST\", userData);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/users\"] });\n      setCreateUserModalOpen(false);\n      setNewUser({ username: \"\", password: \"\", role: \"employee\" });\n      toast({\n        title: \"Erfolg\",\n        description: \"Benutzer wurde erfolgreich erstellt\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Fehler\",\n        description: \"Benutzer konnte nicht erstellt werden\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateUserMutation = useMutation({\n    mutationFn: async ({ userId, userData }: { userId: number; userData: Partial<User> }) => {\n      return apiRequest(`/api/users/${userId}`, \"PATCH\", userData);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/users\"] });\n      setEditUserModalOpen(false);\n      toast({\n        title: \"Erfolg\",\n        description: \"Benutzer wurde erfolgreich aktualisiert\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Fehler\",\n        description: \"Benutzer konnte nicht aktualisiert werden\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updatePasswordMutation = useMutation({\n    mutationFn: async ({ userId, password }: { userId: number; password: string }) => {\n      return apiRequest(`/api/users/${userId}/password`, \"PATCH\", { password });\n    },\n    onSuccess: () => {\n      setPasswordModalOpen(false);\n      setPasswordData({ newPassword: \"\", confirmPassword: \"\" });\n      toast({\n        title: \"Erfolg\",\n        description: \"Passwort wurde erfolgreich aktualisiert\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Fehler\",\n        description: \"Passwort konnte nicht aktualisiert werden\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateRoleMutation = useMutation({\n    mutationFn: async ({ userId, role }: { userId: number; role: string }) => {\n      return apiRequest(`/api/users/${userId}/role`, \"PATCH\", { role });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/users\"] });\n      toast({\n        title: \"Erfolg\",\n        description: \"Benutzerrolle wurde erfolgreich aktualisiert\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Fehler\",\n        description: \"Benutzerrolle konnte nicht aktualisiert werden\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const getRoleLabel = (role: string) => {\n    const roleMap: Record<string, string> = {\n      'admin': 'Administrator',\n      'safety_officer': 'Sicherheitsfachkraft',\n      'department_head': 'Abteilungsleiter',\n      'maintenance': 'Technik',\n      'employee': 'Mitarbeiter',\n    };\n    return roleMap[role] || role;\n  };\n\n  const getRoleBadgeVariant = (role: string) => {\n    switch (role) {\n      case 'admin':\n        return 'default';\n      case 'safety_officer':\n        return 'secondary';\n      case 'department_head':\n        return 'outline';\n      case 'maintenance':\n        return 'destructive';\n      default:\n        return 'secondary';\n    }\n  };\n\n  const handleRoleChange = (userId: number, newRole: string) => {\n    updateRoleMutation.mutate({ userId, role: newRole });\n  };\n\n  const handleCreateUser = () => {\n    if (!newUser.username || !newUser.password) {\n      toast({\n        title: \"Fehler\",\n        description: \"Benutzername und Passwort sind erforderlich\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    createUserMutation.mutate(newUser);\n  };\n\n  const handleViewUser = (user: User) => {\n    setSelectedUser(user);\n    setUserDetailsModalOpen(true);\n  };\n\n  const handleEditUser = (user: User) => {\n    setSelectedUser(user);\n    setEditUserModalOpen(true);\n  };\n\n  const handleChangePassword = (user: User) => {\n    setSelectedUser(user);\n    setPasswordModalOpen(true);\n  };\n\n  const handleUpdatePassword = () => {\n    if (!selectedUser) return;\n    \n    if (passwordData.newPassword !== passwordData.confirmPassword) {\n      toast({\n        title: \"Fehler\",\n        description: \"Passwörter stimmen nicht überein\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (passwordData.newPassword.length < 6) {\n      toast({\n        title: \"Fehler\",\n        description: \"Passwort muss mindestens 6 Zeichen lang sein\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    updatePasswordMutation.mutate({\n      userId: selectedUser.id,\n      password: passwordData.newPassword\n    });\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <NavigationHeader />\n      \n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-industrial-gray\">Benutzerverwaltung</h1>\n          <p className=\"mt-2 text-secondary-gray\">\n            Verwalten Sie Benutzerkonten, Rollen und Berechtigungen im System\n          </p>\n        </div>\n\n        {/* Statistics */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-8\">\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Gesamte Benutzer</CardTitle>\n              <Users className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">{users.length}</div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Administratoren</CardTitle>\n              <Shield className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">\n                {users.filter(user => user.role === 'admin').length}\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Sicherheitsfachkräfte</CardTitle>\n              <AlertTriangle className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">\n                {users.filter(user => user.role === 'safety_officer').length}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Users Table */}\n        <Card>\n          <CardHeader>\n            <div className=\"flex justify-between items-center\">\n              <div>\n                <CardTitle>Benutzer und Rollen</CardTitle>\n                <p className=\"text-sm text-muted-foreground mt-1\">\n                  Verwalten Sie Benutzerkonten und deren Berechtigungen\n                </p>\n              </div>\n              <Button \n                onClick={() => setCreateUserModalOpen(true)}\n                className=\"bg-safety-blue text-white hover:bg-blue-700\"\n              >\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Neuer Benutzer\n              </Button>\n            </div>\n          </CardHeader>\n          <CardContent>\n            {isLoading ? (\n              <div className=\"text-center py-4\">Lade Benutzer...</div>\n            ) : (\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Benutzername</TableHead>\n                    <TableHead>Rolle</TableHead>\n                    <TableHead>Status</TableHead>\n                    <TableHead>Aktionen</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {users.map((user) => (\n                    <TableRow key={user.id}>\n                      <TableCell className=\"font-medium\">{user.username}</TableCell>\n                      <TableCell>\n                        <Select\n                          value={user.role}\n                          onValueChange={(newRole) => handleRoleChange(user.id, newRole)}\n                        >\n                          <SelectTrigger className=\"w-40\">\n                            <SelectValue />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"admin\">Administrator</SelectItem>\n                            <SelectItem value=\"safety_officer\">Sicherheitsfachkraft</SelectItem>\n                            <SelectItem value=\"department_head\">Abteilungsleiter</SelectItem>\n                            <SelectItem value=\"maintenance\">Technik</SelectItem>\n                            <SelectItem value=\"employee\">Mitarbeiter</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </TableCell>\n                      <TableCell>\n                        <Badge variant={getRoleBadgeVariant(user.role)}>\n                          {getRoleLabel(user.role)}\n                        </Badge>\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"flex gap-2\">\n                          <Button\n                            size=\"sm\"\n                            variant=\"outline\"\n                            onClick={() => handleViewUser(user)}\n                          >\n                            <Eye className=\"w-4 h-4 mr-1\" />\n                            Details\n                          </Button>\n                          <Button\n                            size=\"sm\"\n                            variant=\"outline\"\n                            onClick={() => handleEditUser(user)}\n                          >\n                            <Edit className=\"w-4 h-4 mr-1\" />\n                            Bearbeiten\n                          </Button>\n                          <Button\n                            size=\"sm\"\n                            variant=\"outline\"\n                            onClick={() => handleChangePassword(user)}\n                          >\n                            <Key className=\"w-4 h-4 mr-1\" />\n                            Passwort\n                          </Button>\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            )}\n          </CardContent>\n        </Card>\n      </main>\n\n      {/* Create User Modal */}\n      <Dialog open={createUserModalOpen} onOpenChange={setCreateUserModalOpen}>\n        <DialogContent className=\"max-w-md\">\n          <DialogHeader>\n            <DialogTitle>Neuen Benutzer erstellen</DialogTitle>\n            <DialogDescription>\n              Erstellen Sie ein neues Benutzerkonto mit Benutzername, Passwort und Rolle.\n            </DialogDescription>\n          </DialogHeader>\n          \n          <div className=\"space-y-4\">\n            <div>\n              <Label>Benutzername *</Label>\n              <Input\n                value={newUser.username}\n                onChange={(e) => setNewUser({ ...newUser, username: e.target.value })}\n                placeholder=\"Benutzername eingeben\"\n              />\n            </div>\n            \n            <div>\n              <Label>Passwort *</Label>\n              <Input\n                type=\"password\"\n                value={newUser.password}\n                onChange={(e) => setNewUser({ ...newUser, password: e.target.value })}\n                placeholder=\"Passwort eingeben\"\n              />\n            </div>\n            \n            <div>\n              <Label>Rolle</Label>\n              <Select value={newUser.role} onValueChange={(value) => setNewUser({ ...newUser, role: value })}>\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"admin\">Administrator</SelectItem>\n                  <SelectItem value=\"safety_officer\">Sicherheitsfachkraft</SelectItem>\n                  <SelectItem value=\"department_head\">Abteilungsleiter</SelectItem>\n                  <SelectItem value=\"maintenance\">Technik</SelectItem>\n                  <SelectItem value=\"employee\">Mitarbeiter</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div className=\"flex gap-2 pt-4\">\n              <Button \n                onClick={handleCreateUser}\n                disabled={createUserMutation.isPending}\n                className=\"bg-safety-blue text-white hover:bg-blue-700\"\n              >\n                Benutzer erstellen\n              </Button>\n              <Button \n                variant=\"outline\" \n                onClick={() => setCreateUserModalOpen(false)}\n              >\n                Abbrechen\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* User Details Modal */}\n      <Dialog open={userDetailsModalOpen} onOpenChange={setUserDetailsModalOpen}>\n        <DialogContent className=\"max-w-md\">\n          <DialogHeader>\n            <DialogTitle>Benutzerdetails</DialogTitle>\n            <DialogDescription>\n              Detaillierte Informationen über den Benutzer.\n            </DialogDescription>\n          </DialogHeader>\n          \n          {selectedUser && (\n            <div className=\"space-y-4\">\n              <div>\n                <Label className=\"text-sm font-medium\">Benutzername</Label>\n                <p className=\"text-sm text-muted-foreground\">{selectedUser.username}</p>\n              </div>\n              \n              <div>\n                <Label className=\"text-sm font-medium\">Rolle</Label>\n                <p className=\"text-sm text-muted-foreground\">{getRoleLabel(selectedUser.role)}</p>\n              </div>\n              \n              <div>\n                <Label className=\"text-sm font-medium\">Benutzer-ID</Label>\n                <p className=\"text-sm text-muted-foreground\">{selectedUser.id}</p>\n              </div>\n\n              <div className=\"flex gap-2 pt-4\">\n                <Button \n                  variant=\"outline\" \n                  onClick={() => setUserDetailsModalOpen(false)}\n                >\n                  Schließen\n                </Button>\n              </div>\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n\n      {/* Edit User Modal */}\n      <Dialog open={editUserModalOpen} onOpenChange={setEditUserModalOpen}>\n        <DialogContent className=\"max-w-md\">\n          <DialogHeader>\n            <DialogTitle>Benutzer bearbeiten</DialogTitle>\n            <DialogDescription>\n              Bearbeiten Sie die Benutzerdaten.\n            </DialogDescription>\n          </DialogHeader>\n          \n          {selectedUser && (\n            <div className=\"space-y-4\">\n              <div>\n                <Label>Benutzername</Label>\n                <Input\n                  value={selectedUser.username}\n                  onChange={(e) => setSelectedUser({ ...selectedUser, username: e.target.value })}\n                />\n              </div>\n              \n              <div>\n                <Label>Rolle</Label>\n                <Select \n                  value={selectedUser.role} \n                  onValueChange={(value) => setSelectedUser({ ...selectedUser, role: value })}\n                >\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"admin\">Administrator</SelectItem>\n                    <SelectItem value=\"safety_officer\">Sicherheitsfachkraft</SelectItem>\n                    <SelectItem value=\"department_head\">Abteilungsleiter</SelectItem>\n                    <SelectItem value=\"maintenance\">Technik</SelectItem>\n                    <SelectItem value=\"employee\">Mitarbeiter</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div className=\"flex gap-2 pt-4\">\n                <Button \n                  onClick={() => updateUserMutation.mutate({ \n                    userId: selectedUser.id, \n                    userData: { username: selectedUser.username, role: selectedUser.role }\n                  })}\n                  disabled={updateUserMutation.isPending}\n                  className=\"bg-safety-blue text-white hover:bg-blue-700\"\n                >\n                  Speichern\n                </Button>\n                <Button \n                  variant=\"outline\" \n                  onClick={() => setEditUserModalOpen(false)}\n                >\n                  Abbrechen\n                </Button>\n              </div>\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n\n      {/* Password Change Modal */}\n      <Dialog open={passwordModalOpen} onOpenChange={setPasswordModalOpen}>\n        <DialogContent className=\"max-w-md\">\n          <DialogHeader>\n            <DialogTitle>Passwort ändern</DialogTitle>\n            <DialogDescription>\n              Setzen Sie ein neues Passwort für {selectedUser?.username}.\n            </DialogDescription>\n          </DialogHeader>\n          \n          <div className=\"space-y-4\">\n            <div>\n              <Label>Neues Passwort *</Label>\n              <Input\n                type=\"password\"\n                value={passwordData.newPassword}\n                onChange={(e) => setPasswordData({ ...passwordData, newPassword: e.target.value })}\n                placeholder=\"Neues Passwort eingeben\"\n              />\n            </div>\n            \n            <div>\n              <Label>Passwort bestätigen *</Label>\n              <Input\n                type=\"password\"\n                value={passwordData.confirmPassword}\n                onChange={(e) => setPasswordData({ ...passwordData, confirmPassword: e.target.value })}\n                placeholder=\"Passwort wiederholen\"\n              />\n            </div>\n\n            <div className=\"flex gap-2 pt-4\">\n              <Button \n                onClick={handleUpdatePassword}\n                disabled={updatePasswordMutation.isPending}\n                className=\"bg-safety-blue text-white hover:bg-blue-700\"\n              >\n                Passwort ändern\n              </Button>\n              <Button \n                variant=\"outline\" \n                onClick={() => {\n                  setPasswordModalOpen(false);\n                  setPasswordData({ newPassword: \"\", confirmPassword: \"\" });\n                }}\n              >\n                Abbrechen\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":20680},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/date-picker.tsx":{"content":"import * as React from \"react\"\nimport { format } from \"date-fns\"\nimport { de } from \"date-fns/locale\"\nimport { Calendar as CalendarIcon } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Calendar } from \"@/components/ui/calendar\"\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\"\n\ninterface DatePickerProps {\n  date?: Date\n  onDateChange: (date: Date | undefined) => void\n  placeholder?: string\n  className?: string\n}\n\nexport function DatePicker({\n  date,\n  onDateChange,\n  placeholder = \"Datum auswählen\",\n  className\n}: DatePickerProps) {\n  return (\n    <Popover>\n      <PopoverTrigger asChild>\n        <Button\n          variant={\"outline\"}\n          className={cn(\n            \"w-full justify-start text-left font-normal\",\n            !date && \"text-muted-foreground\",\n            className\n          )}\n        >\n          <CalendarIcon className=\"mr-2 h-4 w-4\" />\n          {date ? format(date, \"dd.MM.yyyy\", { locale: de }) : <span>{placeholder}</span>}\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent className=\"w-auto p-0\">\n        <Calendar\n          mode=\"single\"\n          selected={date}\n          onSelect={onDateChange}\n          initialFocus\n          locale={de}\n        />\n      </PopoverContent>\n    </Popover>\n  )\n}","size_bytes":1352},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ninterface PaginationProps {\n  currentPage: number\n  totalPages: number\n  onPageChange: (page: number) => void\n  className?: string\n}\n\nexport function Pagination({ currentPage, totalPages, onPageChange, className }: PaginationProps) {\n  if (totalPages <= 1) return null\n\n  const getVisiblePages = () => {\n    const pages: (number | string)[] = []\n    \n    if (totalPages <= 7) {\n      // Show all pages if 7 or fewer\n      for (let i = 1; i <= totalPages; i++) {\n        pages.push(i)\n      }\n    } else {\n      // Always show first page\n      pages.push(1)\n      \n      if (currentPage > 3) {\n        pages.push(\"...\")\n      }\n      \n      // Show pages around current page\n      const start = Math.max(2, currentPage - 1)\n      const end = Math.min(totalPages - 1, currentPage + 1)\n      \n      for (let i = start; i <= end; i++) {\n        pages.push(i)\n      }\n      \n      if (currentPage < totalPages - 2) {\n        pages.push(\"...\")\n      }\n      \n      // Always show last page\n      if (totalPages > 1) {\n        pages.push(totalPages)\n      }\n    }\n    \n    return pages\n  }\n\n  return (\n    <div className={cn(\"flex items-center justify-center space-x-2\", className)}>\n      <Button\n        variant=\"outline\"\n        size=\"sm\"\n        onClick={() => onPageChange(currentPage - 1)}\n        disabled={currentPage <= 1}\n        className=\"h-8 w-8 p-0\"\n      >\n        <ChevronLeft className=\"h-4 w-4\" />\n      </Button>\n      \n      {getVisiblePages().map((page, index) => (\n        <React.Fragment key={index}>\n          {page === \"...\" ? (\n            <span className=\"flex h-8 w-8 items-center justify-center\">\n              <MoreHorizontal className=\"h-4 w-4\" />\n            </span>\n          ) : (\n            <Button\n              variant={currentPage === page ? \"default\" : \"outline\"}\n              size=\"sm\"\n              onClick={() => onPageChange(page as number)}\n              className=\"h-8 w-8 p-0\"\n            >\n              {page}\n            </Button>\n          )}\n        </React.Fragment>\n      ))}\n      \n      <Button\n        variant=\"outline\"\n        size=\"sm\"\n        onClick={() => onPageChange(currentPage + 1)}\n        disabled={currentPage >= totalPages}\n        className=\"h-8 w-8 p-0\"\n      >\n        <ChevronRight className=\"h-4 w-4\" />\n      </Button>\n    </div>\n  )\n}\n\ninterface PaginationInfoProps {\n  currentPage: number\n  itemsPerPage: number\n  totalItems: number\n  className?: string\n}\n\nexport function PaginationInfo({ currentPage, itemsPerPage, totalItems, className }: PaginationInfoProps) {\n  const startItem = (currentPage - 1) * itemsPerPage + 1\n  const endItem = Math.min(currentPage * itemsPerPage, totalItems)\n\n  return (\n    <div className={cn(\"text-sm text-muted-foreground\", className)}>\n      Zeige {startItem} bis {endItem} von {totalItems} Einträgen\n    </div>\n  )\n}","size_bytes":3011},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/map-widget.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Separator } from '@/components/ui/separator';\nimport { \n  MapPin, \n  Search, \n  Plus, \n  Eye, \n  Edit, \n  AlertTriangle, \n  CheckCircle, \n  Clock, \n  Filter,\n  X,\n  Layers,\n  Wrench\n} from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\nimport type { Permit, MapBackground, WorkLocation } from '@shared/schema';\nimport { getStatusConfig } from '@/utils/status-config';\n\ninterface MapWidgetProps {\n  onPermitClick?: (permit: Permit) => void;\n  onMapClick?: (x: number, y: number) => void;\n  showFilters?: boolean;\n  mode?: 'view' | 'create';\n  selectedMapBackground?: MapBackground | null;\n  onMapBackgroundChange?: (background: MapBackground) => void;\n  resetTrigger?: number;\n}\n\nexport function MapWidget({ \n  onPermitClick, \n  onMapClick, \n  showFilters = true,\n  mode = 'view',\n  selectedMapBackground,\n  onMapBackgroundChange,\n  resetTrigger\n}: MapWidgetProps) {\n  const [selectedPermit, setSelectedPermit] = useState<Permit | null>(null);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [statusFilter, setStatusFilter] = useState<string>('all');\n  const [typeFilter, setTypeFilter] = useState<string>('all');\n  const [showingCreateMode, setShowingCreateMode] = useState(false);\n  const [newPermitPosition, setNewPermitPosition] = useState<{ x: number, y: number } | null>(null);\n  const [hoveredPermit, setHoveredPermit] = useState<Permit | null>(null);\n  const [mousePosition, setMousePosition] = useState<{ x: number; y: number }>({ x: 0, y: 0 });\n  const { toast } = useToast();\n\n  const { data: permits = [], isLoading: permitsLoading } = useQuery<Permit[]>({\n    queryKey: [\"/api/permits/map\"],\n  });\n\n  const { data: mapBackgrounds = [], isLoading: backgroundsLoading } = useQuery<MapBackground[]>({\n    queryKey: [\"/api/map-backgrounds\"],\n  });\n\n  const { data: workLocations = [] } = useQuery<WorkLocation[]>({\n    queryKey: [\"/api/work-locations/active\"],\n  });\n\n  // Default background if none selected\n  const currentBackground = selectedMapBackground || mapBackgrounds[0];\n\n  // Debug logging\n  useEffect(() => {\n    console.log('MapWidget - mapBackgrounds:', mapBackgrounds);\n    console.log('MapWidget - selectedMapBackground:', selectedMapBackground);\n    console.log('MapWidget - currentBackground:', currentBackground);\n  }, [mapBackgrounds, selectedMapBackground, currentBackground]);\n\n  const getStatusColor = (status: string) => {\n    const config = getStatusConfig(status);\n    return { fill: config.mapFill, stroke: config.mapStroke };\n  };\n\n  const getStatusColorClass = (status: string) => {\n    const config = getStatusConfig(status);\n    return config.mapColorClass;\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch(status.toLowerCase()) {\n      case 'active': return <Wrench className=\"w-4 h-4\" />; // In Bearbeitung\n      case 'pending': return <Clock className=\"w-4 h-4\" />; // Geplant\n      case 'approved': return <AlertTriangle className=\"w-4 h-4\" />; // Genehmigt/Wartend\n      case 'expired': return <AlertTriangle className=\"w-4 h-4\" />; // Dringend\n      case 'completed': return <CheckCircle className=\"w-4 h-4\" />; // Abgeschlossen\n      default: return <MapPin className=\"w-4 h-4\" />;\n    }\n  };\n\n  const getStatusText = (status: string) => {\n    const config = getStatusConfig(status);\n    return config.label;\n  };\n\n  const getPermitTypeLabel = (type: string) => {\n    const typeLabels: Record<string, string> = {\n      'hot_work': 'Heißarbeiten',\n      'confined_space': 'Enger Raum',\n      'electrical': 'Elektrische Arbeiten',\n      'chemical': 'Chemische Arbeiten',\n      'maintenance': 'Wartungsarbeiten',\n      'general': 'Allgemeine Genehmigung'\n    };\n    return typeLabels[type] || type;\n  };\n\n  const filteredPermits = permits.filter(permit => {\n    const matchesSearch = permit.permitId.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         permit.description.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         permit.location.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesStatus = statusFilter === 'all' || permit.status === statusFilter;\n    const matchesType = typeFilter === 'all' || permit.type === typeFilter;\n    \n    return matchesSearch && matchesStatus && matchesType;\n  });\n\n  const handleMapClick = (event: React.MouseEvent<SVGElement>) => {\n    if (mode === 'create' || showingCreateMode) {\n      const rect = event.currentTarget.getBoundingClientRect();\n      const x = event.clientX - rect.left;\n      const y = event.clientY - rect.top;\n      \n      // Convert to SVG coordinates more accurately\n      const svgX = (x / rect.width) * 800;\n      const svgY = (y / rect.height) * 600;\n      \n      console.log('Map click coordinates:', { x, y, svgX, svgY, rect });\n      \n      setNewPermitPosition({ x: svgX, y: svgY });\n      \n      if (onMapClick) {\n        onMapClick(svgX, svgY);\n      }\n    }\n  };\n\n  const handleMouseMove = (event: React.MouseEvent<SVGElement>) => {\n    setMousePosition({ x: event.clientX, y: event.clientY });\n  };\n\n  const handlePermitClick = (permit: Permit) => {\n    setSelectedPermit(permit);\n    if (onPermitClick) {\n      onPermitClick(permit);\n    }\n  };\n\n  const resetCreateMode = () => {\n    setShowingCreateMode(false);\n    setNewPermitPosition(null);\n  };\n\n  // Reset position when resetTrigger changes\n  useEffect(() => {\n    if (resetTrigger !== undefined) {\n      setNewPermitPosition(null);\n    }\n  }, [resetTrigger]);\n\n  if (permitsLoading || backgroundsLoading) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <MapPin className=\"w-5 h-5\" />\n            Kartenansicht\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex items-center justify-center py-8\">\n            <div className=\"text-secondary-gray\">Lade Kartenansicht...</div>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <div className=\"space-y-4\">\n      {/* Header Controls */}\n      <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4\">\n        <div className=\"flex items-center gap-2\">\n          <MapPin className=\"w-5 h-5\" />\n          <h2 className=\"text-xl font-semibold\">Kartenansicht</h2>\n        </div>\n        \n        <div className=\"flex items-center gap-2\">\n          {mapBackgrounds.length > 1 && (\n            <div className=\"flex items-center gap-2\">\n              <Layers className=\"w-4 h-4\" />\n              <Select\n                value={currentBackground?.id.toString() || ''}\n                onValueChange={(value) => {\n                  const background = mapBackgrounds.find(bg => bg.id === parseInt(value));\n                  if (background && onMapBackgroundChange) {\n                    onMapBackgroundChange(background);\n                  }\n                }}\n              >\n                <SelectTrigger className=\"w-48\">\n                  <SelectValue placeholder=\"Kartenansicht wählen\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {mapBackgrounds.map((bg) => (\n                    <SelectItem key={bg.id} value={bg.id.toString()}>\n                      {bg.name}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n          )}\n          \n          {mode === 'view' && (\n            <Button\n              variant={showingCreateMode ? \"destructive\" : \"default\"}\n              onClick={() => setShowingCreateMode(!showingCreateMode)}\n            >\n              {showingCreateMode ? (\n                <>\n                  <X className=\"w-4 h-4 mr-2\" />\n                  Abbrechen\n                </>\n              ) : (\n                <>\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Neue Genehmigung\n                </>\n              )}\n            </Button>\n          )}\n        </div>\n      </div>\n\n      {/* Filters */}\n      {showFilters && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Filter className=\"w-4 h-4\" />\n              Filter\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              <div>\n                <Label htmlFor=\"search\">Suche</Label>\n                <div className=\"relative\">\n                  <Search className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n                  <Input\n                    id=\"search\"\n                    placeholder=\"Permit-ID, Beschreibung oder Ort...\"\n                    value={searchTerm}\n                    onChange={(e) => setSearchTerm(e.target.value)}\n                    className=\"pl-10\"\n                  />\n                </div>\n              </div>\n              \n              <div>\n                <Label htmlFor=\"status\">Status</Label>\n                <Select value={statusFilter} onValueChange={setStatusFilter}>\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">Alle Status</SelectItem>\n                    <SelectItem value=\"active\">Aktiv</SelectItem>\n                    <SelectItem value=\"pending\">Ausstehend</SelectItem>\n                    <SelectItem value=\"approved\">Genehmigt</SelectItem>\n                    <SelectItem value=\"expired\">Abgelaufen</SelectItem>\n                    <SelectItem value=\"completed\">Abgeschlossen</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              \n              <div>\n                <Label htmlFor=\"type\">Typ</Label>\n                <Select value={typeFilter} onValueChange={setTypeFilter}>\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">Alle Typen</SelectItem>\n                    <SelectItem value=\"hot_work\">Heißarbeiten</SelectItem>\n                    <SelectItem value=\"confined_space\">Enger Raum</SelectItem>\n                    <SelectItem value=\"electrical\">Elektrische Arbeiten</SelectItem>\n                    <SelectItem value=\"chemical\">Chemische Arbeiten</SelectItem>\n                    <SelectItem value=\"maintenance\">Wartungsarbeiten</SelectItem>\n                    <SelectItem value=\"general\">Allgemeine Genehmigung</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Main Map Container */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        {/* Map */}\n        <div className=\"lg:col-span-2\">\n          <Card>\n            <CardContent className=\"p-4\">\n              {(showingCreateMode || mode === 'create') && (\n                <div className=\"mb-4 p-3 bg-blue-50 border border-blue-200 rounded-lg\">\n                  <p className=\"text-sm text-blue-800\">\n                    <Plus className=\"w-4 h-4 inline mr-1\" />\n                    Klicken Sie auf die Karte, um eine neue Genehmigung an dieser Position zu erstellen\n                  </p>\n                </div>\n              )}\n              \n              <div className=\"bg-gray-50 rounded-lg border-2 border-gray-200 relative overflow-hidden\">\n                {currentBackground ? (\n                  <svg\n                    width=\"100%\"\n                    height=\"600\"\n                    viewBox=\"0 0 800 600\"\n                    className=\"cursor-pointer\"\n                    onClick={handleMapClick}\n                    onMouseMove={handleMouseMove}\n                    onMouseLeave={() => setHoveredPermit(null)}\n                  >\n                    {/* Background Image */}\n                    <image\n                      href={currentBackground.imagePath}\n                      width=\"800\"\n                      height=\"600\"\n                      preserveAspectRatio=\"xMidYMid slice\"\n                      onError={(e) => {\n                        console.error('Failed to load map background image:', currentBackground.imagePath);\n                        console.error('Error event:', e);\n                      }}\n                      onLoad={() => {\n                        console.log('Successfully loaded map background image:', currentBackground.imagePath);\n                      }}\n                    />\n                    \n                    {/* Permit Markers */}\n                    {filteredPermits.map((permit) => {\n                      // Only show permits that have map positions\n                      if (!permit.mapPositionX || !permit.mapPositionY) {\n                        return null;\n                      }\n                      \n                      const statusColor = getStatusColor(permit.status);\n                      const x = permit.mapPositionX;\n                      const y = permit.mapPositionY;\n                      const isSelected = selectedPermit?.id === permit.id;\n                      const isHovered = hoveredPermit?.id === permit.id;\n                      \n                      return (\n                        <g key={permit.id}>\n                          {/* Selection ring */}\n                          {isSelected && (\n                            <circle\n                              cx={x}\n                              cy={y}\n                              r=\"18\"\n                              fill=\"none\"\n                              stroke=\"#3b82f6\"\n                              strokeWidth=\"3\"\n                              className=\"animate-pulse\"\n                            />\n                          )}\n                          \n                          {/* Main marker */}\n                          <circle\n                            cx={x}\n                            cy={y}\n                            r={isHovered ? \"15\" : isSelected ? \"14\" : \"12\"}\n                            fill={statusColor.fill}\n                            stroke={isSelected ? \"#3b82f6\" : statusColor.stroke}\n                            strokeWidth={isSelected ? \"3\" : \"2\"}\n                            className=\"cursor-pointer transition-all duration-200\"\n                            onClick={(e) => {\n                              e.stopPropagation();\n                              handlePermitClick(permit);\n                            }}\n                            onMouseEnter={() => setHoveredPermit(permit)}\n                            onMouseLeave={() => setHoveredPermit(null)}\n                          />\n                          \n                          {/* Permit Number text above the marker */}\n                          <text\n                            x={x}\n                            y={y - 20}\n                            textAnchor=\"middle\"\n                            fill=\"black\"\n                            fontSize=\"11\"\n                            fontWeight=\"bold\"\n                            className=\"pointer-events-none\"\n                          >\n                            {permit.permitId}\n                          </text>\n                        </g>\n                      );\n                    })}\n                    \n                    {/* Work Location Markers */}\n                    {workLocations.map((location) => (\n                      location.mapPositionX && location.mapPositionY && (\n                        <g key={location.id}>\n                          <rect\n                            x={location.mapPositionX - 8}\n                            y={location.mapPositionY - 8}\n                            width=\"16\"\n                            height=\"16\"\n                            className=\"fill-gray-400 stroke-gray-600 stroke-1 opacity-70\"\n                          />\n                          <text\n                            x={location.mapPositionX}\n                            y={location.mapPositionY + 20}\n                            textAnchor=\"middle\"\n                            className=\"text-xs font-medium fill-gray-700\"\n                          >\n                            {location.name}\n                          </text>\n                        </g>\n                      )\n                    ))}\n                    \n                    {/* New Permit Position Preview */}\n                    {newPermitPosition && (\n                      <circle\n                        cx={newPermitPosition.x}\n                        cy={newPermitPosition.y}\n                        r=\"12\"\n                        className=\"fill-blue-300 stroke-blue-500 stroke-2 opacity-70 animate-pulse\"\n                      />\n                    )}\n                  </svg>\n                ) : (\n                  <div className=\"h-96 flex items-center justify-center bg-gray-100 rounded-lg\">\n                    <div className=\"text-center\">\n                      <MapPin className=\"w-12 h-12 mx-auto mb-4 text-gray-400\" />\n                      <p className=\"text-gray-600\">Kein Kartenhintergrund verfügbar</p>\n                      <p className=\"text-sm text-gray-500 mt-2\">\n                        Laden Sie einen Kartenhintergrund in den Einstellungen hoch\n                      </p>\n                    </div>\n                  </div>\n                )}\n              </div>\n              \n              {/* Legend */}\n              <div className=\"mt-4 flex flex-wrap gap-4\">\n                <div className=\"flex items-center gap-2\">\n                  <div className=\"w-4 h-4 bg-green-500 rounded-full\"></div>\n                  <span className=\"text-sm\">In Bearbeitung</span>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <div className=\"w-4 h-4 bg-blue-500 rounded-full\"></div>\n                  <span className=\"text-sm\">Geplant</span>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <div className=\"w-4 h-4 bg-yellow-500 rounded-full\"></div>\n                  <span className=\"text-sm\">Genehmigt</span>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <div className=\"w-4 h-4 bg-red-500 rounded-full\"></div>\n                  <span className=\"text-sm\">Dringend</span>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <div className=\"w-4 h-4 bg-emerald-500 rounded-full\"></div>\n                  <span className=\"text-sm\">Abgeschlossen</span>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Sidebar */}\n        <div className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg\">Genehmigungen ({filteredPermits.length})</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3 max-h-96 overflow-y-auto\">\n                {filteredPermits.map((permit) => (\n                  <div\n                    key={permit.id}\n                    className={`border rounded-lg p-3 cursor-pointer transition-colors ${\n                      selectedPermit?.id === permit.id \n                        ? 'border-blue-500 bg-blue-50' \n                        : 'hover:bg-gray-50'\n                    }`}\n                    onClick={() => handlePermitClick(permit)}\n                  >\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center gap-2\">\n                          <div className={`w-3 h-3 rounded-full ${getStatusColorClass(permit.status)}`}></div>\n                          <span className=\"font-medium text-sm\">{permit.permitId}</span>\n                        </div>\n                        <div className=\"text-xs text-gray-600 mt-1\">\n                          {getPermitTypeLabel(permit.type)}\n                        </div>\n                        <div className=\"text-xs text-gray-500 mt-1\">\n                          {permit.location}\n                        </div>\n                      </div>\n                      <div className=\"flex flex-col items-end\">\n                        <Badge variant=\"outline\" className={`${getStatusColorClass(permit.status)} text-white border-white text-xs`}>\n                          {getStatusText(permit.status)}\n                        </Badge>\n                        <div className=\"text-xs text-gray-400 mt-1\">\n                          {getStatusIcon(permit.status)}\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n                {filteredPermits.length === 0 && (\n                  <div className=\"text-center py-8 text-gray-500\">\n                    <MapPin className=\"w-8 h-8 mx-auto mb-2 opacity-50\" />\n                    <p className=\"text-sm\">Keine Genehmigungen gefunden</p>\n                  </div>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg\">Statistiken</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                <div className=\"flex justify-between text-sm\">\n                  <span>Gesamt:</span>\n                  <span className=\"font-medium\">{filteredPermits.length}</span>\n                </div>\n                <div className=\"flex justify-between text-sm\">\n                  <span>In Bearbeitung:</span>\n                  <span className=\"font-medium text-green-600\">\n                    {filteredPermits.filter(p => p.status === 'active').length}\n                  </span>\n                </div>\n                <div className=\"flex justify-between text-sm\">\n                  <span>Geplant:</span>\n                  <span className=\"font-medium text-blue-600\">\n                    {filteredPermits.filter(p => p.status === 'pending').length}\n                  </span>\n                </div>\n                <div className=\"flex justify-between text-sm\">\n                  <span>Genehmigt:</span>\n                  <span className=\"font-medium text-yellow-600\">\n                    {filteredPermits.filter(p => p.status === 'approved').length}\n                  </span>\n                </div>\n                <div className=\"flex justify-between text-sm\">\n                  <span>Dringend:</span>\n                  <span className=\"font-medium text-red-600\">\n                    {filteredPermits.filter(p => p.status === 'expired').length}\n                  </span>\n                </div>\n                <div className=\"flex justify-between text-sm\">\n                  <span>Abgeschlossen:</span>\n                  <span className=\"font-medium text-emerald-600\">\n                    {filteredPermits.filter(p => p.status === 'completed').length}\n                  </span>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":23649}}}