{
  "name": "AI Permit Enhancement Workflow",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "ai-permit-analysis",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "webhook-node",
      "name": "Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [240, 300],
      "webhookId": "permit-analysis-webhook"
    },
    {
      "parameters": {
        "model": "gpt-4",
        "options": {},
        "prompt": "=Als Experte für Arbeitssicherheit und TRBS-Richtlinien analysiere die folgende Genehmigung und verbessere sie:\n\nOriginal Genehmigungsdaten:\n{{ JSON.stringify($json.permitData, null, 2) }}\n\nAnalysiere und verbessere folgende Aspekte:\n1. Gefahrenidentifikation (identifiedHazards)\n2. TRBS-Gefährdungskategorien (selectedHazards) - Format: \"categoryId-hazardIndex\"\n3. Schutzmaßnahmen (completedMeasures)\n4. Risikobewertung (riskLevel: low/medium/high/critical)\n5. Sicherheitsmaßnahmen (immediateActions, beforeWorkStarts)\n6. Zusätzliche Kommentare (additionalComments)\n7. Gefahrennotizen (hazardNotes) als JSON-String\n\nAntworte NUR mit einem gültigen JSON-Objekt in folgendem Format:\n{\n  \"type\": \"enhanced_type\",\n  \"location\": \"enhanced_location\", \n  \"description\": \"enhanced_description\",\n  \"riskLevel\": \"low|medium|high|critical\",\n  \"identifiedHazards\": \"detailed_hazard_description\",\n  \"selectedHazards\": [\"categoryId-hazardIndex\", ...],\n  \"hazardNotes\": \"{\\\"categoryId-hazardIndex\\\": \\\"specific_note\\\", ...}\",\n  \"completedMeasures\": [\"measure_id\", ...],\n  \"immediateActions\": \"[\\\"action1\\\", \\\"action2\\\"]\",\n  \"beforeWorkStarts\": \"[\\\"step1\\\", \\\"step2\\\"]\",\n  \"complianceNotes\": \"regulatory_compliance_info\",\n  \"additionalComments\": \"enhanced_safety_comments\",\n  \"overallRisk\": \"low|medium|high|critical\"\n}\n\nBeachte:\n- TRBS-Kategorien: 1=Mechanisch, 2=Elektrisch, 3=Gefahrstoffe, 4=Brand/Explosion, 5=Thermisch, 6=Strahlung, 7=Biologisch, 8=Physikalisch\n- Verwende deutsche Texte\n- Sei präzise und sachlich\n- Fokus auf Sicherheitsverbesserungen"
      },
      "id": "openai-node",
      "name": "OpenAI GPT-4",
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1,
      "position": [460, 300]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "=UPDATE permits_staging SET \n  type = '{{ $json.type }}',\n  location = '{{ $json.location }}',\n  description = '{{ $json.description }}',\n  risk_level = '{{ $json.riskLevel }}',\n  identified_hazards = '{{ $json.identifiedHazards }}',\n  selected_hazards = ARRAY[{{ $json.selectedHazards.map(h => `'${h}'`).join(',') }}],\n  hazard_notes = '{{ $json.hazardNotes }}',\n  completed_measures = ARRAY[{{ $json.completedMeasures.map(m => `'${m}'`).join(',') }}],\n  immediate_actions = '{{ $json.immediateActions }}',\n  before_work_starts = '{{ $json.beforeWorkStarts }}',\n  compliance_notes = '{{ $json.complianceNotes }}',\n  additional_comments = '{{ $json.additionalComments }}',\n  overall_risk = '{{ $json.overallRisk }}',\n  ai_processing_status = 'completed',\n  ai_processing_completed = NOW(),\n  changed_fields = ARRAY['type','location','description','riskLevel','identifiedHazards','selectedHazards','hazardNotes','completedMeasures','immediateActions','beforeWorkStarts','complianceNotes','additionalComments','overallRisk'],\n  updated_at = NOW()\nWHERE id = {{ $('Webhook').first().json.stagingId }}\nRETURNING *;"
      },
      "id": "postgres-update",
      "name": "Update Staging Permit",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 1,
      "position": [680, 300],
      "credentials": {
        "postgres": {
          "id": "permit-db-credentials",
          "name": "Permit Database"
        }
      }
    },
    {
      "parameters": {
        "operation": "insert",
        "table": "ai_suggestions",
        "columns": "permit_id,staging_permit_id,suggestion_type,field_name,original_value,suggested_value,reasoning,priority,confidence,batch_id,status",
        "additionalFields": {},
        "options": {}
      },
      "id": "suggestions-insert",
      "name": "Log AI Suggestions",
      "type": "n8n-nodes-base.postgres", 
      "typeVersion": 1,
      "position": [900, 300],
      "credentials": {
        "postgres": {
          "id": "permit-db-credentials",
          "name": "Permit Database"
        }
      }
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\n  \"success\": true,\n  \"message\": \"AI analysis completed\",\n  \"stagingId\": {{ $('Webhook').first().json.stagingId }},\n  \"batchId\": {{ $('Webhook').first().json.batchId }},\n  \"changesApplied\": {{ $('Update Staging Permit').first().json.rowCount || 0 }},\n  \"timestamp\": \"{{ new Date().toISOString() }}\"\n}"
      },
      "id": "webhook-response",
      "name": "Webhook Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1120, 300]
    },
    {
      "parameters": {
        "jsCode": "// Parse OpenAI response and prepare database updates\nconst aiResponse = $input.first().json;\nlet enhancedData;\n\ntry {\n  // Extract JSON from AI response\n  const jsonMatch = aiResponse.match(/\\{[\\s\\S]*\\}/);\n  if (jsonMatch) {\n    enhancedData = JSON.parse(jsonMatch[0]);\n  } else {\n    throw new Error('No valid JSON found in AI response');\n  }\n} catch (error) {\n  console.error('Failed to parse AI response:', error);\n  // Fallback: return original data with minimal enhancements\n  const originalData = $('Webhook').first().json.permitData;\n  enhancedData = {\n    type: originalData.type,\n    location: originalData.location,\n    description: originalData.description + ' (AI-Enhanced)',\n    riskLevel: originalData.riskLevel || 'medium',\n    identifiedHazards: originalData.identifiedHazards || 'Automatisch identifizierte Standardgefahren',\n    selectedHazards: originalData.selectedHazards || [],\n    hazardNotes: originalData.hazardNotes || '{}',\n    completedMeasures: originalData.completedMeasures || [],\n    immediateActions: originalData.immediateActions || '[]',\n    beforeWorkStarts: originalData.beforeWorkStarts || '[]',\n    complianceNotes: originalData.complianceNotes || 'Grundlegende Compliance-Anforderungen',\n    additionalComments: originalData.additionalComments || 'KI-Analyse durchgeführt',\n    overallRisk: originalData.overallRisk || 'medium'\n  };\n}\n\n// Ensure arrays are properly formatted\nif (typeof enhancedData.selectedHazards === 'string') {\n  try {\n    enhancedData.selectedHazards = JSON.parse(enhancedData.selectedHazards);\n  } catch (e) {\n    enhancedData.selectedHazards = [];\n  }\n}\n\nif (typeof enhancedData.completedMeasures === 'string') {\n  try {\n    enhancedData.completedMeasures = JSON.parse(enhancedData.completedMeasures);\n  } catch (e) {\n    enhancedData.completedMeasures = [];\n  }\n}\n\nreturn { json: enhancedData };"
      },
      "id": "data-processor",
      "name": "Process AI Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [580, 300]
    }
  ],
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "OpenAI GPT-4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI GPT-4": {
      "main": [
        [
          {
            "node": "Process AI Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process AI Response": {
      "main": [
        [
          {
            "node": "Update Staging Permit",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Staging Permit": {
      "main": [
        [
          {
            "node": "Log AI Suggestions",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Log AI Suggestions": {
      "main": [
        [
          {
            "node": "Webhook Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [
    {
      "createdAt": "2025-01-11T18:00:00.000Z",
      "updatedAt": "2025-01-11T18:00:00.000Z",
      "id": "ai-safety",
      "name": "AI Safety Enhancement"
    }
  ],
  "triggerCount": 1,
  "updatedAt": "2025-01-11T18:00:00.000Z",
  "versionId": "1"
}